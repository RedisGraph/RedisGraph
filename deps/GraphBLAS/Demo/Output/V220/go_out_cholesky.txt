
--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/ssget/Mallya/lhr71_adj.tsv.gz
--------------------------------------------------------------
ntuples: 2985588
nrows 70304 ncols 70304
time to prune self-edges:     0.004849
time to build the graph with GrB_Matrix_build:     0.283104
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.030296

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 70304 ncols: 70304 max # entries: 2985588
format: standard CSR vlen: 70304 nvec_nonempty: 70304 nvec: 70304 plen: 70304 vdim: 70304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 2985588 
row: 0 : 3 entries [0:2]
    column 392: bool 1
    column 423: bool 1
    column 424: bool 1
row: 1 : 3 entries [3:5]
    column 393: bool 1
    column 423: bool 1
    column 424: bool 1
row: 2 : 3 entries [6:8]
    column 394: bool 1
    column 423: bool 1
    column 424: bool 1
row: 3 : 3 entries [9:11]
    column 395: bool 1
    column 423: bool 1
    column 424: bool 1
row: 4 : 3 entries [12:14]
    column 396: bool 1
    column 423: bool 1
    column 424: bool 1
row: 5 : 3 entries [15:17]
    column 397: bool 1
    column 423: bool 1
    column 424: bool 1
row: 6 : 3 entries [18:20]
    column 398: bool 1
    column 423: bool 1
    column 424: bool 1
row: 7 : 3 entries [21:23]
    column 399: bool 1
    column 423: bool 1
    column 424: bool 1
row: 8 : 3 entries [24:26]
    column 400: bool 1
    column 423: bool 1
    column 424: bool 1
row: 9 : 3 entries [27:29]
    column 401: bool 1
...
matrix 70304 by 70304, 2985588 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 70304 ncols: 70304 max # entries: 2985588
format: standard CSR vlen: 70304 nvec_nonempty: 70304 nvec: 70304 plen: 70304 vdim: 70304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 2985588 
row: 0 : 3 entries [0:2]
    column 392: bool 1
    column 423: bool 1
    column 424: bool 1
row: 1 : 3 entries [3:5]
    column 393: bool 1
    column 423: bool 1
    column 424: bool 1
row: 2 : 3 entries [6:8]
    column 394: bool 1
    column 423: bool 1
    column 424: bool 1
row: 3 : 3 entries [9:11]
    column 395: bool 1
    column 423: bool 1
    column 424: bool 1
row: 4 : 3 entries [12:14]
    column 396: bool 1
    column 423: bool 1
    column 424: bool 1
row: 5 : 3 entries [15:17]
    column 397: bool 1
    column 423: bool 1
    column 424: bool 1
row: 6 : 3 entries [18:20]
    column 398: bool 1
    column 423: bool 1
    column 424: bool 1
row: 7 : 3 entries [21:23]
    column 399: bool 1
    column 423: bool 1
    column 424: bool 1
row: 8 : 3 entries [24:26]
    column 400: bool 1
    column 423: bool 1
    column 424: bool 1
row: 9 : 3 entries [27:29]
    column 401: bool 1
...

total time to read A matrix:       3.341313 sec

n 70304 # edges 1492794
U=triu(A) time:        0.014444 sec
read A, create U memory usage: 0.109169 GB

------------------------------------- dot product method:
L=tril(A) time:        0.011647 sec
# triangles 160592

tricount time:         0.018656 sec (dot product method)
tri+prep time:         0.044747 sec (incl time to compute L and U)
compute C time:        0.018375 sec
reduce (C) time:       0.000281 sec
rate      33.36 million edges/sec (incl time for U=triu(A))
rate      80.01 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.10917 GB

----------------------------------- outer product method:
tricount time:         0.019031 sec (outer product method)
tri+prep time:         0.030678 sec (incl time to compute L)
compute C time:        0.018752 sec
reduce (C) time:       0.000279 sec
rate      48.66 million edges/sec (incl time for L=tril(A))
rate      78.44 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.109169 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/ssget/Freescale/Freescale2_adj.tsv.gz
--------------------------------------------------------------
ntuples: 11489868
nrows 2999349 ncols 2999349
time to prune self-edges:     0.021639
time to build the graph with GrB_Matrix_build:     1.035739
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.178278

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 2999349 ncols: 2999349 max # entries: 11489868
format: standard CSR vlen: 2999349 nvec_nonempty: 2445088 nvec: 2999349 plen: 2999349 vdim: 2999349
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 11489868 
row: 0 : 316 entries [0:315]
    column 1121499: bool 1
    column 1123602: bool 1
    column 1124438: bool 1
    column 1125716: bool 1
    column 2814734: bool 1
    column 2814735: bool 1
    column 2814736: bool 1
    column 2814737: bool 1
    column 2814738: bool 1
    column 2814739: bool 1
    column 2814740: bool 1
    column 2814741: bool 1
    column 2814742: bool 1
    column 2814743: bool 1
    column 2814744: bool 1
    column 2814745: bool 1
    column 2814746: bool 1
    column 2814747: bool 1
    column 2814748: bool 1
    column 2814749: bool 1
    column 2814750: bool 1
    column 2814751: bool 1
    column 2814752: bool 1
    column 2814753: bool 1
    column 2814754: bool 1
    column 2814755: bool 1
    column 2814756: bool 1
    column 2814757: bool 1
    column 2814758: bool 1
    column 2814759: bool 1
    ...
row: 1 : 424 entries [316:739]
    ...
row: 2 : 55 entries [740:794]
    ...
row: 3 : 93 entries [795:887]
    ...
row: 4 : 14890 entries [888:15777]
    ...
row: 5 : 5778 entries [15778:21555]
    ...
row: 6 : 2 entries [21556:21557]
    ...
row: 7 : 318 entries [21558:21875]
    ...
row: 8 : 95 entries [21876:21970]
    ...
row: 9 : 132 entries [21971:22102]
    ...
...
matrix 2999349 by 2999349, 11489868 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 2999349 ncols: 2999349 max # entries: 11489868
format: standard CSR vlen: 2999349 nvec_nonempty: 2445088 nvec: 2999349 plen: 2999349 vdim: 2999349
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 11489868 
row: 0 : 316 entries [0:315]
    column 1121499: bool 1
    column 1123602: bool 1
    column 1124438: bool 1
    column 1125716: bool 1
    column 2814734: bool 1
    column 2814735: bool 1
    column 2814736: bool 1
    column 2814737: bool 1
    column 2814738: bool 1
    column 2814739: bool 1
    column 2814740: bool 1
    column 2814741: bool 1
    column 2814742: bool 1
    column 2814743: bool 1
    column 2814744: bool 1
    column 2814745: bool 1
    column 2814746: bool 1
    column 2814747: bool 1
    column 2814748: bool 1
    column 2814749: bool 1
    column 2814750: bool 1
    column 2814751: bool 1
    column 2814752: bool 1
    column 2814753: bool 1
    column 2814754: bool 1
    column 2814755: bool 1
    column 2814756: bool 1
    column 2814757: bool 1
    column 2814758: bool 1
    column 2814759: bool 1
    ...
row: 1 : 424 entries [316:739]
    ...
row: 2 : 55 entries [740:794]
    ...
row: 3 : 93 entries [795:887]
    ...
row: 4 : 14890 entries [888:15777]
    ...
row: 5 : 5778 entries [15778:21555]
    ...
row: 6 : 2 entries [21556:21557]
    ...
row: 7 : 318 entries [21558:21875]
    ...
row: 8 : 95 entries [21876:21970]
    ...
row: 9 : 132 entries [21971:22102]
    ...
...

total time to read A matrix:       7.930082 sec

n 2999349 # edges 5744934
U=triu(A) time:        0.088860 sec
read A, create U memory usage: 0.485621 GB

------------------------------------- dot product method:
L=tril(A) time:        0.066251 sec
# triangles 21027280

tricount time:         0.296861 sec (dot product method)
tri+prep time:         0.451972 sec (incl time to compute L and U)
compute C time:        0.284122 sec
reduce (C) time:       0.012739 sec
rate      12.71 million edges/sec (incl time for U=triu(A))
rate      19.35 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.485621 GB

----------------------------------- outer product method:
tricount time:         0.483436 sec (outer product method)
tri+prep time:         0.549687 sec (incl time to compute L)
compute C time:        0.470703 sec
reduce (C) time:       0.012733 sec
rate      10.45 million edges/sec (incl time for L=tril(A))
rate      11.88 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.485621 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/cit-HepPh/cit-HepPh_adj.tsv.gz
--------------------------------------------------------------
ntuples: 841754
nrows 34546 ncols 34546
time to prune self-edges:     0.001435
time to build the graph with GrB_Matrix_build:     0.090967
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.011621

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 34546 ncols: 34546 max # entries: 841754
format: standard CSR vlen: 34546 nvec_nonempty: 34546 nvec: 34546 plen: 34546 vdim: 34546
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 841754 
row: 0 : 44 entries [0:43]
    column 636: bool 1
    column 1705: bool 1
    column 1766: bool 1
    column 3505: bool 1
    column 4861: bool 1
    column 5699: bool 1
    column 6115: bool 1
    column 6741: bool 1
    column 7305: bool 1
    column 7593: bool 1
    column 7880: bool 1
    column 7943: bool 1
    column 8570: bool 1
    column 8852: bool 1
    column 9571: bool 1
    column 9635: bool 1
    column 12031: bool 1
    column 12467: bool 1
    column 14441: bool 1
    column 14513: bool 1
    column 17564: bool 1
    column 18432: bool 1
    column 20624: bool 1
    column 20851: bool 1
    column 20887: bool 1
    column 21318: bool 1
    column 21544: bool 1
    column 21942: bool 1
    column 24279: bool 1
    column 24525: bool 1
    ...
row: 1 : 128 entries [44:171]
    ...
row: 2 : 28 entries [172:199]
    ...
row: 3 : 1 entries [200:200]
    ...
row: 4 : 28 entries [201:228]
    ...
row: 5 : 64 entries [229:292]
    ...
row: 6 : 79 entries [293:371]
    ...
row: 7 : 58 entries [372:429]
    ...
row: 8 : 72 entries [430:501]
    ...
row: 9 : 19 entries [502:520]
    ...
...
matrix 34546 by 34546, 841754 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 34546 ncols: 34546 max # entries: 841754
format: standard CSR vlen: 34546 nvec_nonempty: 34546 nvec: 34546 plen: 34546 vdim: 34546
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 841754 
row: 0 : 44 entries [0:43]
    column 636: bool 1
    column 1705: bool 1
    column 1766: bool 1
    column 3505: bool 1
    column 4861: bool 1
    column 5699: bool 1
    column 6115: bool 1
    column 6741: bool 1
    column 7305: bool 1
    column 7593: bool 1
    column 7880: bool 1
    column 7943: bool 1
    column 8570: bool 1
    column 8852: bool 1
    column 9571: bool 1
    column 9635: bool 1
    column 12031: bool 1
    column 12467: bool 1
    column 14441: bool 1
    column 14513: bool 1
    column 17564: bool 1
    column 18432: bool 1
    column 20624: bool 1
    column 20851: bool 1
    column 20887: bool 1
    column 21318: bool 1
    column 21544: bool 1
    column 21942: bool 1
    column 24279: bool 1
    column 24525: bool 1
    ...
row: 1 : 128 entries [44:171]
    ...
row: 2 : 28 entries [172:199]
    ...
row: 3 : 1 entries [200:200]
    ...
row: 4 : 28 entries [201:228]
    ...
row: 5 : 64 entries [229:292]
    ...
row: 6 : 79 entries [293:371]
    ...
row: 7 : 58 entries [372:429]
    ...
row: 8 : 72 entries [430:501]
    ...
row: 9 : 19 entries [502:520]
    ...
...

total time to read A matrix:       0.554480 sec

n 34546 # edges 420877
U=triu(A) time:        0.004761 sec
read A, create U memory usage: 0.0311332 GB

------------------------------------- dot product method:
L=tril(A) time:        0.003462 sec
# triangles 1276868

tricount time:         0.044378 sec (dot product method)
tri+prep time:         0.052601 sec (incl time to compute L and U)
compute C time:        0.042580 sec
reduce (C) time:       0.001798 sec
rate       8.00 million edges/sec (incl time for U=triu(A))
rate       9.48 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0311333 GB

----------------------------------- outer product method:
tricount time:         0.033688 sec (outer product method)
tri+prep time:         0.037151 sec (incl time to compute L)
compute C time:        0.031899 sec
reduce (C) time:       0.001790 sec
rate      11.33 million edges/sec (incl time for L=tril(A))
rate      12.49 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0311332 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/cit-HepTh/cit-HepTh_adj.tsv.gz
--------------------------------------------------------------
ntuples: 704570
nrows 27770 ncols 27770
time to prune self-edges:     0.001198
time to build the graph with GrB_Matrix_build:     0.073570
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.009352

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 27770 ncols: 27770 max # entries: 704570
format: standard CSR vlen: 27770 nvec_nonempty: 27769 nvec: 27770 plen: 27770 vdim: 27770
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 704570 
row: 0 : 27 entries [0:26]
    column 8743: bool 1
    column 19943: bool 1
    column 22116: bool 1
    column 22119: bool 1
    column 22352: bool 1
    column 22570: bool 1
    column 22654: bool 1
    column 22824: bool 1
    column 22837: bool 1
    column 22860: bool 1
    column 22956: bool 1
    column 23283: bool 1
    column 23890: bool 1
    column 24388: bool 1
    column 24412: bool 1
    column 24426: bool 1
    column 24490: bool 1
    column 24524: bool 1
    column 24711: bool 1
    column 24762: bool 1
    column 25016: bool 1
    column 25124: bool 1
    column 26262: bool 1
    column 26292: bool 1
    column 26352: bool 1
    column 26577: bool 1
    column 26699: bool 1
row: 1 : 44 entries [27:70]
    column 624: bool 1
    column 1008: bool 1
    column 1207: bool 1
    ...
row: 2 : 24 entries [71:94]
    ...
row: 3 : 52 entries [95:146]
    ...
row: 4 : 28 entries [147:174]
    ...
row: 5 : 57 entries [175:231]
    ...
row: 6 : 23 entries [232:254]
    ...
row: 7 : 10 entries [255:264]
    ...
row: 8 : 2 entries [265:266]
    ...
row: 9 : 93 entries [267:359]
    ...
...
matrix 27770 by 27770, 704570 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 27770 ncols: 27770 max # entries: 704570
format: standard CSR vlen: 27770 nvec_nonempty: 27769 nvec: 27770 plen: 27770 vdim: 27770
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 704570 
row: 0 : 27 entries [0:26]
    column 8743: bool 1
    column 19943: bool 1
    column 22116: bool 1
    column 22119: bool 1
    column 22352: bool 1
    column 22570: bool 1
    column 22654: bool 1
    column 22824: bool 1
    column 22837: bool 1
    column 22860: bool 1
    column 22956: bool 1
    column 23283: bool 1
    column 23890: bool 1
    column 24388: bool 1
    column 24412: bool 1
    column 24426: bool 1
    column 24490: bool 1
    column 24524: bool 1
    column 24711: bool 1
    column 24762: bool 1
    column 25016: bool 1
    column 25124: bool 1
    column 26262: bool 1
    column 26292: bool 1
    column 26352: bool 1
    column 26577: bool 1
    column 26699: bool 1
row: 1 : 44 entries [27:70]
    column 624: bool 1
    column 1008: bool 1
    column 1207: bool 1
    ...
row: 2 : 24 entries [71:94]
    ...
row: 3 : 52 entries [95:146]
    ...
row: 4 : 28 entries [147:174]
    ...
row: 5 : 57 entries [175:231]
    ...
row: 6 : 23 entries [232:254]
    ...
row: 7 : 10 entries [255:264]
    ...
row: 8 : 2 entries [265:266]
    ...
row: 9 : 93 entries [267:359]
    ...
...

total time to read A matrix:       0.458138 sec

n 27770 # edges 352285
U=triu(A) time:        0.004053 sec
read A, create U memory usage: 0.0260319 GB

------------------------------------- dot product method:
L=tril(A) time:        0.002882 sec
# triangles 1478735

tricount time:         0.048649 sec (dot product method)
tri+prep time:         0.055584 sec (incl time to compute L and U)
compute C time:        0.047010 sec
reduce (C) time:       0.001639 sec
rate       6.34 million edges/sec (incl time for U=triu(A))
rate       7.24 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0260321 GB

----------------------------------- outer product method:
tricount time:         0.038963 sec (outer product method)
tri+prep time:         0.041845 sec (incl time to compute L)
compute C time:        0.037329 sec
reduce (C) time:       0.001634 sec
rate       8.42 million edges/sec (incl time for L=tril(A))
rate       9.04 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0260319 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/email-EuAll/email-EuAll_adj.tsv.gz
--------------------------------------------------------------
ntuples: 728962
nrows 265214 ncols 265214
time to prune self-edges:     0.001616
time to build the graph with GrB_Matrix_build:     0.075768
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.013527

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 265214 ncols: 265214 max # entries: 728962
format: standard CSR vlen: 265214 nvec_nonempty: 265009 nvec: 265214 plen: 265214 vdim: 265214
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 728962 
row: 0 : 15 entries [0:14]
    column 1: bool 1
    column 11113: bool 1
    column 33336: bool 1
    column 66669: bool 1
    column 74302: bool 1
    column 111113: bool 1
    column 194239: bool 1
    column 198548: bool 1
    column 201350: bool 1
    column 201883: bool 1
    column 207437: bool 1
    column 209659: bool 1
    column 228326: bool 1
    column 235882: bool 1
    column 242992: bool 1
row: 1 : 957 entries [15:971]
    column 0: bool 1
    column 80: bool 1
    column 311: bool 1
    column 495: bool 1
    column 798: bool 1
    column 1062: bool 1
    column 2311: bool 1
    column 3099: bool 1
    column 3144: bool 1
    column 3423: bool 1
    column 3448: bool 1
    column 3613: bool 1
    column 3670: bool 1
    column 3767: bool 1
    column 3799: bool 1
    ...
row: 2 : 1587 entries [972:2558]
    ...
row: 3 : 1 entries [2559:2559]
    ...
row: 4 : 2 entries [2560:2561]
    ...
row: 5 : 1 entries [2562:2562]
    ...
row: 6 : 1 entries [2563:2563]
    ...
row: 7 : 1 entries [2564:2564]
    ...
row: 8 : 1 entries [2565:2565]
    ...
row: 9 : 1 entries [2566:2566]
    ...
...
matrix 265214 by 265214, 728962 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 265214 ncols: 265214 max # entries: 728962
format: standard CSR vlen: 265214 nvec_nonempty: 265009 nvec: 265214 plen: 265214 vdim: 265214
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 728962 
row: 0 : 15 entries [0:14]
    column 1: bool 1
    column 11113: bool 1
    column 33336: bool 1
    column 66669: bool 1
    column 74302: bool 1
    column 111113: bool 1
    column 194239: bool 1
    column 198548: bool 1
    column 201350: bool 1
    column 201883: bool 1
    column 207437: bool 1
    column 209659: bool 1
    column 228326: bool 1
    column 235882: bool 1
    column 242992: bool 1
row: 1 : 957 entries [15:971]
    column 0: bool 1
    column 80: bool 1
    column 311: bool 1
    column 495: bool 1
    column 798: bool 1
    column 1062: bool 1
    column 2311: bool 1
    column 3099: bool 1
    column 3144: bool 1
    column 3423: bool 1
    column 3448: bool 1
    column 3613: bool 1
    column 3670: bool 1
    column 3767: bool 1
    column 3799: bool 1
    ...
row: 2 : 1587 entries [972:2558]
    ...
row: 3 : 1 entries [2559:2559]
    ...
row: 4 : 2 entries [2560:2561]
    ...
row: 5 : 1 entries [2562:2562]
    ...
row: 6 : 1 entries [2563:2563]
    ...
row: 7 : 1 entries [2564:2564]
    ...
row: 8 : 1 entries [2565:2565]
    ...
row: 9 : 1 entries [2566:2566]
    ...
...

total time to read A matrix:       0.503665 sec

n 265214 # edges 364481
U=triu(A) time:        0.006321 sec
read A, create U memory usage: 0.0326087 GB

------------------------------------- dot product method:
L=tril(A) time:        0.005505 sec
# triangles 267313

tricount time:         0.032089 sec (dot product method)
tri+prep time:         0.043915 sec (incl time to compute L and U)
compute C time:        0.031701 sec
reduce (C) time:       0.000388 sec
rate       8.30 million edges/sec (incl time for U=triu(A))
rate      11.36 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0326089 GB

----------------------------------- outer product method:
tricount time:         0.031146 sec (outer product method)
tri+prep time:         0.036651 sec (incl time to compute L)
compute C time:        0.030762 sec
reduce (C) time:       0.000384 sec
rate       9.94 million edges/sec (incl time for L=tril(A))
rate      11.70 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0326087 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/soc-Epinions1/soc-Epinions1_adj.tsv.gz
--------------------------------------------------------------
ntuples: 811480
nrows 75879 ncols 75879
time to prune self-edges:     0.001079
time to build the graph with GrB_Matrix_build:     0.086094
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.011559

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 75879 ncols: 75879 max # entries: 811480
format: standard CSR vlen: 75879 nvec_nonempty: 75879 nvec: 75879 plen: 75879 vdim: 75879
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 811480 
row: 0 : 682 entries [0:681]
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 149: bool 1
    column 181: bool 1
    column 225: bool 1
    column 281: bool 1
    column 336: bool 1
    column 370: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 779: bool 1
    column 825: bool 1
    column 874: bool 1
    column 890: bool 1
    column 896: bool 1
    column 924: bool 1
    column 1001: bool 1
    column 1110: bool 1
    column 1111: bool 1
    column 1121: bool 1
    column 1222: bool 1
    column 1333: bool 1
    column 1444: bool 1
    column 1555: bool 1
    column 1666: bool 1
    column 1777: bool 1
    column 1833: bool 1
    column 1888: bool 1
    ...
row: 1 : 841 entries [682:1522]
    ...
row: 2 : 286 entries [1523:1808]
    ...
row: 3 : 345 entries [1809:2153]
    ...
row: 4 : 55 entries [2154:2208]
    ...
row: 5 : 24 entries [2209:2232]
    ...
row: 6 : 10 entries [2233:2242]
    ...
row: 7 : 79 entries [2243:2321]
    ...
row: 8 : 11 entries [2322:2332]
    ...
row: 9 : 1 entries [2333:2333]
    ...
...
matrix 75879 by 75879, 811480 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 75879 ncols: 75879 max # entries: 811480
format: standard CSR vlen: 75879 nvec_nonempty: 75879 nvec: 75879 plen: 75879 vdim: 75879
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 811480 
row: 0 : 682 entries [0:681]
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 149: bool 1
    column 181: bool 1
    column 225: bool 1
    column 281: bool 1
    column 336: bool 1
    column 370: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 779: bool 1
    column 825: bool 1
    column 874: bool 1
    column 890: bool 1
    column 896: bool 1
    column 924: bool 1
    column 1001: bool 1
    column 1110: bool 1
    column 1111: bool 1
    column 1121: bool 1
    column 1222: bool 1
    column 1333: bool 1
    column 1444: bool 1
    column 1555: bool 1
    column 1666: bool 1
    column 1777: bool 1
    column 1833: bool 1
    column 1888: bool 1
    ...
row: 1 : 841 entries [682:1522]
    ...
row: 2 : 286 entries [1523:1808]
    ...
row: 3 : 345 entries [1809:2153]
    ...
row: 4 : 55 entries [2154:2208]
    ...
row: 5 : 24 entries [2209:2232]
    ...
row: 6 : 10 entries [2233:2242]
    ...
row: 7 : 79 entries [2243:2321]
    ...
row: 8 : 11 entries [2322:2332]
    ...
row: 9 : 1 entries [2333:2333]
    ...
...

total time to read A matrix:       0.532543 sec

n 75879 # edges 405740
U=triu(A) time:        0.004994 sec
read A, create U memory usage: 0.0310353 GB

------------------------------------- dot product method:
L=tril(A) time:        0.003792 sec
# triangles 1624481

tricount time:         0.081527 sec (dot product method)
tri+prep time:         0.090313 sec (incl time to compute L and U)
compute C time:        0.080148 sec
reduce (C) time:       0.001379 sec
rate       4.49 million edges/sec (incl time for U=triu(A))
rate       4.98 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0310355 GB

----------------------------------- outer product method:
tricount time:         0.053600 sec (outer product method)
tri+prep time:         0.057392 sec (incl time to compute L)
compute C time:        0.052225 sec
reduce (C) time:       0.001375 sec
rate       7.07 million edges/sec (incl time for L=tril(A))
rate       7.57 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0310353 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/soc-Slashdot0811/soc-Slashdot0811_adj.tsv.gz
--------------------------------------------------------------
ntuples: 938360
nrows 77360 ncols 77360
time to prune self-edges:     0.001661
time to build the graph with GrB_Matrix_build:     0.100874
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.013483

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 77360 ncols: 77360 max # entries: 938360
format: standard CSR vlen: 77360 nvec_nonempty: 77360 nvec: 77360 plen: 77360 vdim: 77360
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 938360 
row: 0 : 242 entries [0:241]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 225: bool 1
    column 336: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 780: bool 1
    column 891: bool 1
    column 1002: bool 1
    column 1113: bool 1
    column 1114: bool 1
    column 1225: bool 1
    column 1336: bool 1
    column 1447: bool 1
    column 1558: bool 1
    column 1574: bool 1
    column 1669: bool 1
    column 1780: bool 1
    column 1891: bool 1
    column 2002: bool 1
    column 2113: bool 1
    column 2224: bool 1
    column 2225: bool 1
    column 2336: bool 1
    column 2447: bool 1
    column 2558: bool 1
    column 2669: bool 1
    ...
row: 1 : 186 entries [242:427]
    ...
row: 2 : 67 entries [428:494]
    ...
row: 3 : 21 entries [495:515]
    ...
row: 4 : 7 entries [516:522]
    ...
row: 5 : 95 entries [523:617]
    ...
row: 6 : 25 entries [618:642]
    ...
row: 7 : 4 entries [643:646]
    ...
row: 8 : 16 entries [647:662]
    ...
row: 9 : 36 entries [663:698]
    ...
...
matrix 77360 by 77360, 938360 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 77360 ncols: 77360 max # entries: 938360
format: standard CSR vlen: 77360 nvec_nonempty: 77360 nvec: 77360 plen: 77360 vdim: 77360
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 938360 
row: 0 : 242 entries [0:241]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 225: bool 1
    column 336: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 780: bool 1
    column 891: bool 1
    column 1002: bool 1
    column 1113: bool 1
    column 1114: bool 1
    column 1225: bool 1
    column 1336: bool 1
    column 1447: bool 1
    column 1558: bool 1
    column 1574: bool 1
    column 1669: bool 1
    column 1780: bool 1
    column 1891: bool 1
    column 2002: bool 1
    column 2113: bool 1
    column 2224: bool 1
    column 2225: bool 1
    column 2336: bool 1
    column 2447: bool 1
    column 2558: bool 1
    column 2669: bool 1
    ...
row: 1 : 186 entries [242:427]
    ...
row: 2 : 67 entries [428:494]
    ...
row: 3 : 21 entries [495:515]
    ...
row: 4 : 7 entries [516:522]
    ...
row: 5 : 95 entries [523:617]
    ...
row: 6 : 25 entries [618:642]
    ...
row: 7 : 4 entries [643:646]
    ...
row: 8 : 16 entries [647:662]
    ...
row: 9 : 36 entries [663:698]
    ...
...

total time to read A matrix:       0.616564 sec

n 77360 # edges 469180
U=triu(A) time:        0.005670 sec
read A, create U memory usage: 0.0356385 GB

------------------------------------- dot product method:
L=tril(A) time:        0.004348 sec
# triangles 551724

tricount time:         0.056743 sec (dot product method)
tri+prep time:         0.066762 sec (incl time to compute L and U)
compute C time:        0.055891 sec
reduce (C) time:       0.000852 sec
rate       7.03 million edges/sec (incl time for U=triu(A))
rate       8.27 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0356387 GB

----------------------------------- outer product method:
tricount time:         0.046814 sec (outer product method)
tri+prep time:         0.051163 sec (incl time to compute L)
compute C time:        0.045966 sec
reduce (C) time:       0.000848 sec
rate       9.17 million edges/sec (incl time for L=tril(A))
rate      10.02 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0356385 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/soc-Slashdot0902/soc-Slashdot0902_adj.tsv.gz
--------------------------------------------------------------
ntuples: 1008460
nrows 82168 ncols 82168
time to prune self-edges:     0.001694
time to build the graph with GrB_Matrix_build:     0.110110
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.014563

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 82168 ncols: 82168 max # entries: 1008460
format: standard CSR vlen: 82168 nvec_nonempty: 82168 nvec: 82168 plen: 82168 vdim: 82168
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1008460 
row: 0 : 245 entries [0:244]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 225: bool 1
    column 336: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 780: bool 1
    column 891: bool 1
    column 1002: bool 1
    column 1113: bool 1
    column 1114: bool 1
    column 1225: bool 1
    column 1336: bool 1
    column 1447: bool 1
    column 1558: bool 1
    column 1669: bool 1
    column 1780: bool 1
    column 1891: bool 1
    column 1982: bool 1
    column 2002: bool 1
    column 2113: bool 1
    column 2224: bool 1
    column 2225: bool 1
    column 2336: bool 1
    column 2447: bool 1
    column 2558: bool 1
    column 2669: bool 1
    ...
row: 1 : 186 entries [245:430]
    ...
row: 2 : 23 entries [431:453]
    ...
row: 3 : 136 entries [454:589]
    ...
row: 4 : 8 entries [590:597]
    ...
row: 5 : 28 entries [598:625]
    ...
row: 6 : 17 entries [626:642]
    ...
row: 7 : 14 entries [643:656]
    ...
row: 8 : 205 entries [657:861]
    ...
row: 9 : 65 entries [862:926]
    ...
...
matrix 82168 by 82168, 1008460 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 82168 ncols: 82168 max # entries: 1008460
format: standard CSR vlen: 82168 nvec_nonempty: 82168 nvec: 82168 plen: 82168 vdim: 82168
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1008460 
row: 0 : 245 entries [0:244]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 225: bool 1
    column 336: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 780: bool 1
    column 891: bool 1
    column 1002: bool 1
    column 1113: bool 1
    column 1114: bool 1
    column 1225: bool 1
    column 1336: bool 1
    column 1447: bool 1
    column 1558: bool 1
    column 1669: bool 1
    column 1780: bool 1
    column 1891: bool 1
    column 1982: bool 1
    column 2002: bool 1
    column 2113: bool 1
    column 2224: bool 1
    column 2225: bool 1
    column 2336: bool 1
    column 2447: bool 1
    column 2558: bool 1
    column 2669: bool 1
    ...
row: 1 : 186 entries [245:430]
    ...
row: 2 : 23 entries [431:453]
    ...
row: 3 : 136 entries [454:589]
    ...
row: 4 : 8 entries [590:597]
    ...
row: 5 : 28 entries [598:625]
    ...
row: 6 : 17 entries [626:642]
    ...
row: 7 : 14 entries [643:656]
    ...
row: 8 : 205 entries [657:861]
    ...
row: 9 : 65 entries [862:926]
    ...
...

total time to read A matrix:       0.664519 sec

n 82168 # edges 504230
U=triu(A) time:        0.006091 sec
read A, create U memory usage: 0.0382775 GB

------------------------------------- dot product method:
L=tril(A) time:        0.004653 sec
# triangles 602592

tricount time:         0.060382 sec (dot product method)
tri+prep time:         0.071126 sec (incl time to compute L and U)
compute C time:        0.059463 sec
reduce (C) time:       0.000918 sec
rate       7.09 million edges/sec (incl time for U=triu(A))
rate       8.35 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0382777 GB

----------------------------------- outer product method:
tricount time:         0.051191 sec (outer product method)
tri+prep time:         0.055845 sec (incl time to compute L)
compute C time:        0.050277 sec
reduce (C) time:       0.000914 sec
rate       9.03 million edges/sec (incl time for L=tril(A))
rate       9.85 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0382775 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/amazon0312/amazon0312_adj.tsv.gz
--------------------------------------------------------------
ntuples: 4699738
nrows 400727 ncols 400727
time to prune self-edges:     0.010166
time to build the graph with GrB_Matrix_build:     0.532934
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.084077

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 400727 ncols: 400727 max # entries: 4699738
format: standard CSR vlen: 400727 nvec_nonempty: 400727 nvec: 400727 plen: 400727 vdim: 400727
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4699738 
row: 0 : 5 entries [0:4]
    column 1: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 333334: bool 1
    column 345172: bool 1
row: 1 : 5 entries [5:9]
    column 0: bool 1
    column 33335: bool 1
    column 44446: bool 1
    column 55557: bool 1
    column 111112: bool 1
row: 2 : 159 entries [10:168]
    column 1730: bool 1
    column 1752: bool 1
    column 4817: bool 1
    column 10955: bool 1
    column 11689: bool 1
    column 15576: bool 1
    column 15645: bool 1
    column 20554: bool 1
    column 34462: bool 1
    column 34463: bool 1
    column 34466: bool 1
    column 35014: bool 1
    column 36328: bool 1
    column 38891: bool 1
    column 40742: bool 1
    column 43761: bool 1
    column 45447: bool 1
    column 47878: bool 1
    column 62153: bool 1
    column 67558: bool 1
    ...
row: 3 : 108 entries [169:276]
    ...
row: 4 : 13 entries [277:289]
    ...
row: 5 : 15 entries [290:304]
    ...
row: 6 : 3 entries [305:307]
    ...
row: 7 : 10 entries [308:317]
    ...
row: 8 : 23 entries [318:340]
    ...
row: 9 : 37 entries [341:377]
    ...
...
matrix 400727 by 400727, 4699738 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 400727 ncols: 400727 max # entries: 4699738
format: standard CSR vlen: 400727 nvec_nonempty: 400727 nvec: 400727 plen: 400727 vdim: 400727
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4699738 
row: 0 : 5 entries [0:4]
    column 1: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 333334: bool 1
    column 345172: bool 1
row: 1 : 5 entries [5:9]
    column 0: bool 1
    column 33335: bool 1
    column 44446: bool 1
    column 55557: bool 1
    column 111112: bool 1
row: 2 : 159 entries [10:168]
    column 1730: bool 1
    column 1752: bool 1
    column 4817: bool 1
    column 10955: bool 1
    column 11689: bool 1
    column 15576: bool 1
    column 15645: bool 1
    column 20554: bool 1
    column 34462: bool 1
    column 34463: bool 1
    column 34466: bool 1
    column 35014: bool 1
    column 36328: bool 1
    column 38891: bool 1
    column 40742: bool 1
    column 43761: bool 1
    column 45447: bool 1
    column 47878: bool 1
    column 62153: bool 1
    column 67558: bool 1
    ...
row: 3 : 108 entries [169:276]
    ...
row: 4 : 13 entries [277:289]
    ...
row: 5 : 15 entries [290:304]
    ...
row: 6 : 3 entries [305:307]
    ...
row: 7 : 10 entries [308:317]
    ...
row: 8 : 23 entries [318:340]
    ...
row: 9 : 37 entries [341:377]
    ...
...

total time to read A matrix:       3.267579 sec

n 400727 # edges 2349869
U=triu(A) time:        0.032110 sec
read A, create U memory usage: 0.178809 GB

------------------------------------- dot product method:
L=tril(A) time:        0.021425 sec
# triangles 3686467

tricount time:         0.236857 sec (dot product method)
tri+prep time:         0.290392 sec (incl time to compute L and U)
compute C time:        0.228272 sec
reduce (C) time:       0.008584 sec
rate       8.09 million edges/sec (incl time for U=triu(A))
rate       9.92 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.178809 GB

----------------------------------- outer product method:
tricount time:         0.172277 sec (outer product method)
tri+prep time:         0.193702 sec (incl time to compute L)
compute C time:        0.163697 sec
reduce (C) time:       0.008580 sec
rate      12.13 million edges/sec (incl time for L=tril(A))
rate      13.64 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.178809 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/amazon0505/amazon0505_adj.tsv.gz
--------------------------------------------------------------
ntuples: 4878874
nrows 410236 ncols 410236
time to prune self-edges:     0.012810
time to build the graph with GrB_Matrix_build:     0.549113
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.088621

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 410236 ncols: 410236 max # entries: 4878874
format: standard CSR vlen: 410236 nvec_nonempty: 410236 nvec: 410236 plen: 410236 vdim: 410236
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4878874 
row: 0 : 10 entries [0:9]
    column 1: bool 1
    column 2: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 333334: bool 1
    column 354681: bool 1
    column 365792: bool 1
    column 376903: bool 1
    column 388014: bool 1
    column 399125: bool 1
row: 1 : 10 entries [10:19]
    column 0: bool 1
    column 77780: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 333334: bool 1
    column 348015: bool 1
    column 354681: bool 1
    column 361348: bool 1
    column 366793: bool 1
    column 376903: bool 1
row: 2 : 261 entries [20:280]
    column 0: bool 1
    column 7263: bool 1
    column 7619: bool 1
    column 11114: bool 1
    column 11920: bool 1
    column 13255: bool 1
    column 14447: bool 1
    column 14881: bool 1
    column 15492: bool 1
    column 15558: bool 1
    ...
row: 3 : 139 entries [281:419]
    ...
row: 4 : 14 entries [420:433]
    ...
row: 5 : 11 entries [434:444]
    ...
row: 6 : 10 entries [445:454]
    ...
row: 7 : 9 entries [455:463]
    ...
row: 8 : 7 entries [464:470]
    ...
row: 9 : 10 entries [471:480]
    ...
...
matrix 410236 by 410236, 4878874 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 410236 ncols: 410236 max # entries: 4878874
format: standard CSR vlen: 410236 nvec_nonempty: 410236 nvec: 410236 plen: 410236 vdim: 410236
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4878874 
row: 0 : 10 entries [0:9]
    column 1: bool 1
    column 2: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 333334: bool 1
    column 354681: bool 1
    column 365792: bool 1
    column 376903: bool 1
    column 388014: bool 1
    column 399125: bool 1
row: 1 : 10 entries [10:19]
    column 0: bool 1
    column 77780: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 333334: bool 1
    column 348015: bool 1
    column 354681: bool 1
    column 361348: bool 1
    column 366793: bool 1
    column 376903: bool 1
row: 2 : 261 entries [20:280]
    column 0: bool 1
    column 7263: bool 1
    column 7619: bool 1
    column 11114: bool 1
    column 11920: bool 1
    column 13255: bool 1
    column 14447: bool 1
    column 14881: bool 1
    column 15492: bool 1
    column 15558: bool 1
    ...
row: 3 : 139 entries [281:419]
    ...
row: 4 : 14 entries [420:433]
    ...
row: 5 : 11 entries [434:444]
    ...
row: 6 : 10 entries [445:454]
    ...
row: 7 : 9 entries [455:463]
    ...
row: 8 : 7 entries [464:470]
    ...
row: 9 : 10 entries [471:480]
    ...
...

total time to read A matrix:       3.332906 sec

n 410236 # edges 2439437
U=triu(A) time:        0.033263 sec
read A, create U memory usage: 0.185486 GB

------------------------------------- dot product method:
L=tril(A) time:        0.022201 sec
# triangles 3951063

tricount time:         0.252093 sec (dot product method)
tri+prep time:         0.307556 sec (incl time to compute L and U)
compute C time:        0.243080 sec
reduce (C) time:       0.009012 sec
rate       7.93 million edges/sec (incl time for U=triu(A))
rate       9.68 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.185486 GB

----------------------------------- outer product method:
tricount time:         0.176820 sec (outer product method)
tri+prep time:         0.199021 sec (incl time to compute L)
compute C time:        0.167794 sec
reduce (C) time:       0.009026 sec
rate      12.26 million edges/sec (incl time for L=tril(A))
rate      13.80 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.185486 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/amazon0601/amazon0601_adj.tsv.gz
--------------------------------------------------------------
ntuples: 4886816
nrows 403394 ncols 403394
time to prune self-edges:     0.009686
time to build the graph with GrB_Matrix_build:     0.550517
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.088160

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 403394 ncols: 403394 max # entries: 4886816
format: standard CSR vlen: 403394 nvec_nonempty: 403394 nvec: 403394 plen: 403394 vdim: 403394
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4886816 
row: 0 : 11 entries [0:10]
    column 1: bool 1
    column 2: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 299651: bool 1
    column 333334: bool 1
    column 347839: bool 1
    column 358950: bool 1
    column 370061: bool 1
    column 381172: bool 1
    column 392283: bool 1
row: 1 : 10 entries [11:20]
    column 0: bool 1
    column 61113: bool 1
    column 94446: bool 1
    column 111112: bool 1
    column 147780: bool 1
    column 148891: bool 1
    column 150002: bool 1
    column 222223: bool 1
    column 327002: bool 1
    column 333334: bool 1
row: 2 : 45 entries [21:65]
    column 0: bool 1
    column 3781: bool 1
    column 3892: bool 1
    column 8891: bool 1
    column 12724: bool 1
    column 58114: bool 1
    column 88471: bool 1
    column 111112: bool 1
    column 120908: bool 1
    ...
row: 3 : 14 entries [66:79]
    ...
row: 4 : 15 entries [80:94]
    ...
row: 5 : 11 entries [95:105]
    ...
row: 6 : 22 entries [106:127]
    ...
row: 7 : 15 entries [128:142]
    ...
row: 8 : 10 entries [143:152]
    ...
row: 9 : 12 entries [153:164]
    ...
...
matrix 403394 by 403394, 4886816 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 403394 ncols: 403394 max # entries: 4886816
format: standard CSR vlen: 403394 nvec_nonempty: 403394 nvec: 403394 plen: 403394 vdim: 403394
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4886816 
row: 0 : 11 entries [0:10]
    column 1: bool 1
    column 2: bool 1
    column 111112: bool 1
    column 222223: bool 1
    column 299651: bool 1
    column 333334: bool 1
    column 347839: bool 1
    column 358950: bool 1
    column 370061: bool 1
    column 381172: bool 1
    column 392283: bool 1
row: 1 : 10 entries [11:20]
    column 0: bool 1
    column 61113: bool 1
    column 94446: bool 1
    column 111112: bool 1
    column 147780: bool 1
    column 148891: bool 1
    column 150002: bool 1
    column 222223: bool 1
    column 327002: bool 1
    column 333334: bool 1
row: 2 : 45 entries [21:65]
    column 0: bool 1
    column 3781: bool 1
    column 3892: bool 1
    column 8891: bool 1
    column 12724: bool 1
    column 58114: bool 1
    column 88471: bool 1
    column 111112: bool 1
    column 120908: bool 1
    ...
row: 3 : 14 entries [66:79]
    ...
row: 4 : 15 entries [80:94]
    ...
row: 5 : 11 entries [95:105]
    ...
row: 6 : 22 entries [106:127]
    ...
row: 7 : 15 entries [128:142]
    ...
row: 8 : 10 entries [143:152]
    ...
row: 9 : 12 entries [153:164]
    ...
...

total time to read A matrix:       3.372116 sec

n 403394 # edges 2443408
U=triu(A) time:        0.033165 sec
read A, create U memory usage: 0.185608 GB

------------------------------------- dot product method:
L=tril(A) time:        0.022153 sec
# triangles 3986507

tricount time:         0.253963 sec (dot product method)
tri+prep time:         0.309281 sec (incl time to compute L and U)
compute C time:        0.244906 sec
reduce (C) time:       0.009057 sec
rate       7.90 million edges/sec (incl time for U=triu(A))
rate       9.62 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.185608 GB

----------------------------------- outer product method:
tricount time:         0.177090 sec (outer product method)
tri+prep time:         0.199242 sec (incl time to compute L)
compute C time:        0.168031 sec
reduce (C) time:       0.009059 sec
rate      12.26 million edges/sec (incl time for L=tril(A))
rate      13.80 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.185608 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/flickrEdges/flickrEdges_adj.tsv.gz
--------------------------------------------------------------
ntuples: 4633896
nrows 105938 ncols 105938
time to prune self-edges:     0.009510
time to build the graph with GrB_Matrix_build:     0.543170
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.071534

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 105938 ncols: 105938 max # entries: 4633896
format: standard CSR vlen: 105938 nvec_nonempty: 105938 nvec: 105938 plen: 105938 vdim: 105938
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4633896 
row: 0 : 5 entries [0:4]
    column 544: bool 1
    column 20146: bool 1
    column 23577: bool 1
    column 36848: bool 1
    column 70621: bool 1
row: 1 : 6 entries [5:10]
    column 22327: bool 1
    column 36684: bool 1
    column 51337: bool 1
    column 91575: bool 1
    column 92704: bool 1
    column 103228: bool 1
row: 2 : 11 entries [11:21]
    column 6387: bool 1
    column 15872: bool 1
    column 17843: bool 1
    column 22327: bool 1
    column 45601: bool 1
    column 56813: bool 1
    column 61257: bool 1
    column 62226: bool 1
    column 62744: bool 1
    column 63040: bool 1
    column 75239: bool 1
row: 3 : 5 entries [22:26]
    column 14109: bool 1
    column 20304: bool 1
    column 48334: bool 1
    column 69197: bool 1
    column 69954: bool 1
row: 4 : 272 entries [27:298]
    column 81: bool 1
    column 102: bool 1
    column 171: bool 1
    ...
row: 5 : 46 entries [299:344]
    ...
row: 6 : 12 entries [345:356]
    ...
row: 7 : 7 entries [357:363]
    ...
row: 8 : 447 entries [364:810]
    ...
row: 9 : 178 entries [811:988]
    ...
...
matrix 105938 by 105938, 4633896 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 105938 ncols: 105938 max # entries: 4633896
format: standard CSR vlen: 105938 nvec_nonempty: 105938 nvec: 105938 plen: 105938 vdim: 105938
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4633896 
row: 0 : 5 entries [0:4]
    column 544: bool 1
    column 20146: bool 1
    column 23577: bool 1
    column 36848: bool 1
    column 70621: bool 1
row: 1 : 6 entries [5:10]
    column 22327: bool 1
    column 36684: bool 1
    column 51337: bool 1
    column 91575: bool 1
    column 92704: bool 1
    column 103228: bool 1
row: 2 : 11 entries [11:21]
    column 6387: bool 1
    column 15872: bool 1
    column 17843: bool 1
    column 22327: bool 1
    column 45601: bool 1
    column 56813: bool 1
    column 61257: bool 1
    column 62226: bool 1
    column 62744: bool 1
    column 63040: bool 1
    column 75239: bool 1
row: 3 : 5 entries [22:26]
    column 14109: bool 1
    column 20304: bool 1
    column 48334: bool 1
    column 69197: bool 1
    column 69954: bool 1
row: 4 : 272 entries [27:298]
    column 81: bool 1
    column 102: bool 1
    column 171: bool 1
    ...
row: 5 : 46 entries [299:344]
    ...
row: 6 : 12 entries [345:356]
    ...
row: 7 : 7 entries [357:363]
    ...
row: 8 : 447 entries [364:810]
    ...
row: 9 : 178 entries [811:988]
    ...
...

total time to read A matrix:       3.067959 sec

n 105938 # edges 2316948
U=triu(A) time:        0.023655 sec
read A, create U memory usage: 0.169364 GB

------------------------------------- dot product method:
L=tril(A) time:        0.018136 sec
# triangles 107987357

tricount time:         1.258251 sec (dot product method)
tri+prep time:         1.300043 sec (incl time to compute L and U)
compute C time:        1.247058 sec
reduce (C) time:       0.011193 sec
rate       1.78 million edges/sec (incl time for U=triu(A))
rate       1.84 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.169364 GB

----------------------------------- outer product method:
tricount time:         0.936386 sec (outer product method)
tri+prep time:         0.954522 sec (incl time to compute L)
compute C time:        0.925300 sec
reduce (C) time:       0.011085 sec
rate       2.43 million edges/sec (incl time for L=tril(A))
rate       2.47 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.169364 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/cit-Patents/cit-Patents_adj.tsv.gz
--------------------------------------------------------------
ntuples: 33037894
nrows 3774768 ncols 3774768
time to prune self-edges:     0.047668
time to build the graph with GrB_Matrix_build:     4.423414
make symmetric
A = (C+C')/2
A = (C+C')/2 time     1.507819

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 3774768 ncols: 3774768 max # entries: 33037894
format: standard CSR vlen: 3774768 nvec_nonempty: 3774768 nvec: 3774768 plen: 3774768 vdim: 3774768
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 33037894 
row: 0 : 2 entries [0:1]
    column 1640588: bool 1
    column 2330914: bool 1
row: 1 : 1 entries [2:2]
    column 2221416: bool 1
row: 2 : 1 entries [3:3]
    column 2719475: bool 1
row: 3 : 1 entries [4:4]
    column 2398884: bool 1
row: 4 : 1 entries [5:5]
    column 2451924: bool 1
row: 5 : 1 entries [6:6]
    column 2721440: bool 1
row: 6 : 1 entries [7:7]
    column 1583896: bool 1
row: 7 : 1 entries [8:8]
    column 1719648: bool 1
row: 8 : 2 entries [9:10]
    column 1869106: bool 1
    column 2663586: bool 1
row: 9 : 1 entries [11:11]
    column 1768660: bool 1
...
matrix 3774768 by 3774768, 33037894 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 3774768 ncols: 3774768 max # entries: 33037894
format: standard CSR vlen: 3774768 nvec_nonempty: 3774768 nvec: 3774768 plen: 3774768 vdim: 3774768
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 33037894 
row: 0 : 2 entries [0:1]
    column 1640588: bool 1
    column 2330914: bool 1
row: 1 : 1 entries [2:2]
    column 2221416: bool 1
row: 2 : 1 entries [3:3]
    column 2719475: bool 1
row: 3 : 1 entries [4:4]
    column 2398884: bool 1
row: 4 : 1 entries [5:5]
    column 2451924: bool 1
row: 5 : 1 entries [6:6]
    column 2721440: bool 1
row: 6 : 1 entries [7:7]
    column 1583896: bool 1
row: 7 : 1 entries [8:8]
    column 1719648: bool 1
row: 8 : 2 entries [9:10]
    column 1869106: bool 1
    column 2663586: bool 1
row: 9 : 1 entries [11:11]
    column 1768660: bool 1
...

total time to read A matrix:      25.345225 sec

n 3774768 # edges 16518947
U=triu(A) time:        0.234469 sec
read A, create U memory usage: 1.27996 GB

------------------------------------- dot product method:
L=tril(A) time:        0.151944 sec
# triangles 7515023

tricount time:         3.328048 sec (dot product method)
tri+prep time:         3.714461 sec (incl time to compute L and U)
compute C time:        3.303511 sec
reduce (C) time:       0.024538 sec
rate       4.45 million edges/sec (incl time for U=triu(A))
rate       4.96 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.27996 GB

----------------------------------- outer product method:
tricount time:         1.836998 sec (outer product method)
tri+prep time:         1.988942 sec (incl time to compute L)
compute C time:        1.812537 sec
reduce (C) time:       0.024461 sec
rate       8.31 million edges/sec (incl time for L=tril(A))
rate       8.99 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.27996 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/ssget/SNAP/soc-LiveJournal1_adj.tsv.gz
--------------------------------------------------------------
ntuples: 85702474
nrows 4847571 ncols 4847571
time to prune self-edges:     0.127227
time to build the graph with GrB_Matrix_build:    11.368620
make symmetric
A = (C+C')/2
A = (C+C')/2 time     2.999461

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4847571 ncols: 4847571 max # entries: 85702474
format: standard CSR vlen: 4847571 nvec_nonempty: 4846609 nvec: 4847571 plen: 4847571 vdim: 4847571
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 85702474 
row: 0 : 94 entries [0:93]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 9: bool 1
    column 10: bool 1
    column 11: bool 1
    column 12: bool 1
    column 13: bool 1
    column 14: bool 1
    column 15: bool 1
    column 16: bool 1
    column 17: bool 1
    column 18: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
    column 29: bool 1
    column 30: bool 1
    ...
row: 1 : 436 entries [94:529]
    ...
row: 2 : 194 entries [530:723]
    ...
row: 3 : 135 entries [724:858]
    ...
row: 4 : 136 entries [859:994]
    ...
row: 5 : 109 entries [995:1103]
    ...
row: 6 : 212 entries [1104:1315]
    ...
row: 7 : 75 entries [1316:1390]
    ...
row: 8 : 37 entries [1391:1427]
    ...
row: 9 : 136 entries [1428:1563]
    ...
...
matrix 4847571 by 4847571, 85702474 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4847571 ncols: 4847571 max # entries: 85702474
format: standard CSR vlen: 4847571 nvec_nonempty: 4846609 nvec: 4847571 plen: 4847571 vdim: 4847571
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 85702474 
row: 0 : 94 entries [0:93]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 9: bool 1
    column 10: bool 1
    column 11: bool 1
    column 12: bool 1
    column 13: bool 1
    column 14: bool 1
    column 15: bool 1
    column 16: bool 1
    column 17: bool 1
    column 18: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
    column 29: bool 1
    column 30: bool 1
    ...
row: 1 : 436 entries [94:529]
    ...
row: 2 : 194 entries [530:723]
    ...
row: 3 : 135 entries [724:858]
    ...
row: 4 : 136 entries [859:994]
    ...
row: 5 : 109 entries [995:1103]
    ...
row: 6 : 212 entries [1104:1315]
    ...
row: 7 : 75 entries [1316:1390]
    ...
row: 8 : 37 entries [1391:1427]
    ...
row: 9 : 136 entries [1428:1563]
    ...
...

total time to read A matrix:      62.956903 sec

n 4847571 # edges 42851237
U=triu(A) time:        0.519126 sec
read A, create U memory usage: 3.20163 GB

------------------------------------- dot product method:
L=tril(A) time:        0.370810 sec
# triangles 285730264

tricount time:        17.798188 sec (dot product method)
tri+prep time:        18.688124 sec (incl time to compute L and U)
compute C time:       17.628813 sec
reduce (C) time:       0.169376 sec
rate       2.29 million edges/sec (incl time for U=triu(A))
rate       2.41 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 3.20163 GB

----------------------------------- outer product method:
tricount time:         9.222087 sec (outer product method)
tri+prep time:         9.592897 sec (incl time to compute L)
compute C time:        9.059816 sec
reduce (C) time:       0.162271 sec
rate       4.47 million edges/sec (incl time for L=tril(A))
rate       4.65 million edges/sec (just tricount itself)

tricount (outer) memory usage: 3.20163 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/ssget/Gleich/wb-edu_adj.tsv.gz
--------------------------------------------------------------
ntuples: 92472210
nrows 9845725 ncols 9845725
time to prune self-edges:     0.158928
time to build the graph with GrB_Matrix_build:     8.521459
make symmetric
A = (C+C')/2
A = (C+C')/2 time     1.243747

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 9845725 ncols: 9845725 max # entries: 92472210
format: standard CSR vlen: 9845725 nvec_nonempty: 9450404 nvec: 9845725 plen: 9845725 vdim: 9845725
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 92472210 
row: 0 : 24 entries [0:23]
    column 376551: bool 1
    column 376552: bool 1
    column 930006: bool 1
    column 2642936: bool 1
    column 2933770: bool 1
    column 4583265: bool 1
    column 5300999: bool 1
    column 5301012: bool 1
    column 5301668: bool 1
    column 5303899: bool 1
    column 5303926: bool 1
    column 5303946: bool 1
    column 5305095: bool 1
    column 6331962: bool 1
    column 7672592: bool 1
    column 7765037: bool 1
    column 8866907: bool 1
    column 8866920: bool 1
    column 8867570: bool 1
    column 8869819: bool 1
    column 8869846: bool 1
    column 8869866: bool 1
    column 9652914: bool 1
    column 9700544: bool 1
row: 1 : 1 entries [24:24]
    column 437289: bool 1
row: 2 : 1 entries [25:25]
    column 13: bool 1
row: 3 : 98 entries [26:123]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    ...
row: 4 : 2 entries [124:125]
    ...
row: 5 : 5 entries [126:130]
    ...
row: 6 : 7 entries [131:137]
    ...
row: 7 : 2 entries [138:139]
    ...
row: 8 : 8 entries [140:147]
    ...
row: 9 : 5 entries [148:152]
    ...
...
matrix 9845725 by 9845725, 92472210 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 9845725 ncols: 9845725 max # entries: 92472210
format: standard CSR vlen: 9845725 nvec_nonempty: 9450404 nvec: 9845725 plen: 9845725 vdim: 9845725
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 92472210 
row: 0 : 24 entries [0:23]
    column 376551: bool 1
    column 376552: bool 1
    column 930006: bool 1
    column 2642936: bool 1
    column 2933770: bool 1
    column 4583265: bool 1
    column 5300999: bool 1
    column 5301012: bool 1
    column 5301668: bool 1
    column 5303899: bool 1
    column 5303926: bool 1
    column 5303946: bool 1
    column 5305095: bool 1
    column 6331962: bool 1
    column 7672592: bool 1
    column 7765037: bool 1
    column 8866907: bool 1
    column 8866920: bool 1
    column 8867570: bool 1
    column 8869819: bool 1
    column 8869846: bool 1
    column 8869866: bool 1
    column 9652914: bool 1
    column 9700544: bool 1
row: 1 : 1 entries [24:24]
    column 437289: bool 1
row: 2 : 1 entries [25:25]
    column 13: bool 1
row: 3 : 98 entries [26:123]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    ...
row: 4 : 2 entries [124:125]
    ...
row: 5 : 5 entries [126:130]
    ...
row: 6 : 7 entries [131:137]
    ...
row: 7 : 2 entries [138:139]
    ...
row: 8 : 8 entries [140:147]
    ...
row: 9 : 5 entries [148:152]
    ...
...

total time to read A matrix:      63.787709 sec

n 9845725 # edges 46236105
U=triu(A) time:        0.595799 sec
read A, create U memory usage: 3.5653 GB

------------------------------------- dot product method:
L=tril(A) time:        0.435548 sec
# triangles 254718147

tricount time:         3.738055 sec (dot product method)
tri+prep time:         4.769402 sec (incl time to compute L and U)
compute C time:        3.553400 sec
reduce (C) time:       0.184655 sec
rate       9.69 million edges/sec (incl time for U=triu(A))
rate      12.37 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 3.5653 GB

----------------------------------- outer product method:
tricount time:         3.999489 sec (outer product method)
tri+prep time:         4.435037 sec (incl time to compute L)
compute C time:        3.814576 sec
reduce (C) time:       0.184913 sec
rate      10.43 million edges/sec (incl time for L=tril(A))
rate      11.56 million edges/sec (just tricount itself)

tricount (outer) memory usage: 3.5653 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/amazon0302/amazon0302_adj.tsv.gz
--------------------------------------------------------------
ntuples: 1799584
nrows 262111 ncols 262111
time to prune self-edges:     0.007573
time to build the graph with GrB_Matrix_build:     0.190773
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.029325

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 262111 ncols: 262111 max # entries: 1799584
format: standard CSR vlen: 262111 nvec_nonempty: 262111 nvec: 262111 plen: 262111 vdim: 262111
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1799584 
row: 0 : 5 entries [0:4]
    column 1: bool 1
    column 111112: bool 1
    column 184334: bool 1
    column 195445: bool 1
    column 206556: bool 1
row: 1 : 5 entries [5:9]
    column 0: bool 1
    column 55557: bool 1
    column 111112: bool 1
    column 195445: bool 1
    column 206556: bool 1
row: 2 : 36 entries [10:45]
    column 8032: bool 1
    column 13261: bool 1
    column 18869: bool 1
    column 18880: bool 1
    column 18893: bool 1
    column 18904: bool 1
    column 28395: bool 1
    column 31225: bool 1
    column 41113: bool 1
    column 42224: bool 1
    column 42281: bool 1
    column 43335: bool 1
    column 44487: bool 1
    column 46718: bool 1
    column 47658: bool 1
    column 79794: bool 1
    column 90164: bool 1
    column 149547: bool 1
    column 161652: bool 1
    column 161914: bool 1
    ...
row: 3 : 55 entries [46:100]
    ...
row: 4 : 5 entries [101:105]
    ...
row: 5 : 5 entries [106:110]
    ...
row: 6 : 6 entries [111:116]
    ...
row: 7 : 7 entries [117:123]
    ...
row: 8 : 13 entries [124:136]
    ...
row: 9 : 5 entries [137:141]
    ...
...
matrix 262111 by 262111, 1799584 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 262111 ncols: 262111 max # entries: 1799584
format: standard CSR vlen: 262111 nvec_nonempty: 262111 nvec: 262111 plen: 262111 vdim: 262111
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1799584 
row: 0 : 5 entries [0:4]
    column 1: bool 1
    column 111112: bool 1
    column 184334: bool 1
    column 195445: bool 1
    column 206556: bool 1
row: 1 : 5 entries [5:9]
    column 0: bool 1
    column 55557: bool 1
    column 111112: bool 1
    column 195445: bool 1
    column 206556: bool 1
row: 2 : 36 entries [10:45]
    column 8032: bool 1
    column 13261: bool 1
    column 18869: bool 1
    column 18880: bool 1
    column 18893: bool 1
    column 18904: bool 1
    column 28395: bool 1
    column 31225: bool 1
    column 41113: bool 1
    column 42224: bool 1
    column 42281: bool 1
    column 43335: bool 1
    column 44487: bool 1
    column 46718: bool 1
    column 47658: bool 1
    column 79794: bool 1
    column 90164: bool 1
    column 149547: bool 1
    column 161652: bool 1
    column 161914: bool 1
    ...
row: 3 : 55 entries [46:100]
    ...
row: 4 : 5 entries [101:105]
    ...
row: 5 : 5 entries [106:110]
    ...
row: 6 : 6 entries [111:116]
    ...
row: 7 : 7 entries [117:123]
    ...
row: 8 : 13 entries [124:136]
    ...
row: 9 : 5 entries [137:141]
    ...
...

total time to read A matrix:       1.241774 sec

n 262111 # edges 899792
U=triu(A) time:        0.014062 sec
read A, create U memory usage: 0.0710766 GB

------------------------------------- dot product method:
L=tril(A) time:        0.009403 sec
# triangles 717719

tricount time:         0.051798 sec (dot product method)
tri+prep time:         0.075263 sec (incl time to compute L and U)
compute C time:        0.049187 sec
reduce (C) time:       0.002611 sec
rate      11.96 million edges/sec (incl time for U=triu(A))
rate      17.37 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0710768 GB

----------------------------------- outer product method:
tricount time:         0.036671 sec (outer product method)
tri+prep time:         0.046074 sec (incl time to compute L)
compute C time:        0.034071 sec
reduce (C) time:       0.002600 sec
rate      19.53 million edges/sec (incl time for L=tril(A))
rate      24.54 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0710766 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/as-caida20071105/as-caida20071105_adj.tsv.gz
--------------------------------------------------------------
ntuples: 106762
nrows 26475 ncols 26475
time to prune self-edges:     0.000138
time to build the graph with GrB_Matrix_build:     0.010180
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.001655

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 26475 ncols: 26475 max # entries: 106762
format: standard CSR vlen: 26475 nvec_nonempty: 26475 nvec: 26475 plen: 26475 vdim: 26475
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 106762 
row: 0 : 8 entries [0:7]
    column 2401: bool 1
    column 3988: bool 1
    column 5641: bool 1
    column 7888: bool 1
    column 12560: bool 1
    column 13766: bool 1
    column 16645: bool 1
    column 24379: bool 1
row: 1 : 4 entries [8:11]
    column 3736: bool 1
    column 10630: bool 1
    column 10788: bool 1
    column 23761: bool 1
row: 2 : 3 entries [12:14]
    column 3736: bool 1
    column 10788: bool 1
    column 23743: bool 1
row: 3 : 5 entries [15:19]
    column 12: bool 1
    column 5023: bool 1
    column 5024: bool 1
    column 10788: bool 1
    column 26017: bool 1
row: 4 : 3 entries [20:22]
    column 3736: bool 1
    column 10788: bool 1
    column 23762: bool 1
row: 5 : 1 entries [23:23]
    column 23740: bool 1
row: 6 : 2 entries [24:25]
    column 13298: bool 1
    column 23762: bool 1
row: 7 : 15 entries [26:40]
    column 5238: bool 1
    column 5373: bool 1
    column 5385: bool 1
    column 5725: bool 1
    ...
row: 8 : 1 entries [41:41]
    ...
row: 9 : 3 entries [42:44]
    ...
...
matrix 26475 by 26475, 106762 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 26475 ncols: 26475 max # entries: 106762
format: standard CSR vlen: 26475 nvec_nonempty: 26475 nvec: 26475 plen: 26475 vdim: 26475
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 106762 
row: 0 : 8 entries [0:7]
    column 2401: bool 1
    column 3988: bool 1
    column 5641: bool 1
    column 7888: bool 1
    column 12560: bool 1
    column 13766: bool 1
    column 16645: bool 1
    column 24379: bool 1
row: 1 : 4 entries [8:11]
    column 3736: bool 1
    column 10630: bool 1
    column 10788: bool 1
    column 23761: bool 1
row: 2 : 3 entries [12:14]
    column 3736: bool 1
    column 10788: bool 1
    column 23743: bool 1
row: 3 : 5 entries [15:19]
    column 12: bool 1
    column 5023: bool 1
    column 5024: bool 1
    column 10788: bool 1
    column 26017: bool 1
row: 4 : 3 entries [20:22]
    column 3736: bool 1
    column 10788: bool 1
    column 23762: bool 1
row: 5 : 1 entries [23:23]
    column 23740: bool 1
row: 6 : 2 entries [24:25]
    column 13298: bool 1
    column 23762: bool 1
row: 7 : 15 entries [26:40]
    column 5238: bool 1
    column 5373: bool 1
    column 5385: bool 1
    column 5725: bool 1
    ...
row: 8 : 1 entries [41:41]
    ...
row: 9 : 3 entries [42:44]
    ...
...

total time to read A matrix:       0.072274 sec

n 26475 # edges 53381
U=triu(A) time:        0.000910 sec
read A, create U memory usage: 0.00447978 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000693 sec
# triangles 36365

tricount time:         0.003345 sec (dot product method)
tri+prep time:         0.004948 sec (incl time to compute L and U)
compute C time:        0.003267 sec
reduce (C) time:       0.000078 sec
rate      10.79 million edges/sec (incl time for U=triu(A))
rate      15.96 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00447992 GB

----------------------------------- outer product method:
tricount time:         0.004666 sec (outer product method)
tri+prep time:         0.005359 sec (incl time to compute L)
compute C time:        0.004589 sec
reduce (C) time:       0.000077 sec
rate       9.96 million edges/sec (incl time for L=tril(A))
rate      11.44 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00447978 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/as20000102/as20000102_adj.tsv.gz
--------------------------------------------------------------
ntuples: 25144
nrows 6474 ncols 6474
time to prune self-edges:     0.000033
time to build the graph with GrB_Matrix_build:     0.002159
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000392

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 6474 ncols: 6474 max # entries: 25144
format: standard CSR vlen: 6474 nvec_nonempty: 6474 nvec: 6474 plen: 6474 vdim: 6474
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 25144 
row: 0 : 378 entries [0:377]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 14: bool 1
    column 25: bool 1
    column 36: bool 1
    column 47: bool 1
    column 58: bool 1
    column 69: bool 1
    column 80: bool 1
    column 91: bool 1
    column 102: bool 1
    column 113: bool 1
    column 114: bool 1
    column 125: bool 1
    column 136: bool 1
    column 147: bool 1
    column 158: bool 1
    column 169: bool 1
    column 180: bool 1
    column 191: bool 1
    column 202: bool 1
    column 213: bool 1
    column 224: bool 1
    column 225: bool 1
    column 236: bool 1
    column 247: bool 1
    column 258: bool 1
    column 269: bool 1
    column 280: bool 1
    ...
row: 1 : 1458 entries [378:1835]
    ...
row: 2 : 29 entries [1836:1864]
    ...
row: 3 : 16 entries [1865:1880]
    ...
row: 4 : 15 entries [1881:1895]
    ...
row: 5 : 2 entries [1896:1897]
    ...
row: 6 : 2 entries [1898:1899]
    ...
row: 7 : 4 entries [1900:1903]
    ...
row: 8 : 4 entries [1904:1907]
    ...
row: 9 : 3 entries [1908:1910]
    ...
...
matrix 6474 by 6474, 25144 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 6474 ncols: 6474 max # entries: 25144
format: standard CSR vlen: 6474 nvec_nonempty: 6474 nvec: 6474 plen: 6474 vdim: 6474
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 25144 
row: 0 : 378 entries [0:377]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 14: bool 1
    column 25: bool 1
    column 36: bool 1
    column 47: bool 1
    column 58: bool 1
    column 69: bool 1
    column 80: bool 1
    column 91: bool 1
    column 102: bool 1
    column 113: bool 1
    column 114: bool 1
    column 125: bool 1
    column 136: bool 1
    column 147: bool 1
    column 158: bool 1
    column 169: bool 1
    column 180: bool 1
    column 191: bool 1
    column 202: bool 1
    column 213: bool 1
    column 224: bool 1
    column 225: bool 1
    column 236: bool 1
    column 247: bool 1
    column 258: bool 1
    column 269: bool 1
    column 280: bool 1
    ...
row: 1 : 1458 entries [378:1835]
    ...
row: 2 : 29 entries [1836:1864]
    ...
row: 3 : 16 entries [1865:1880]
    ...
row: 4 : 15 entries [1881:1895]
    ...
row: 5 : 2 entries [1896:1897]
    ...
row: 6 : 2 entries [1898:1899]
    ...
row: 7 : 4 entries [1900:1903]
    ...
row: 8 : 4 entries [1904:1907]
    ...
row: 9 : 3 entries [1908:1910]
    ...
...

total time to read A matrix:       0.016957 sec

n 6474 # edges 12572
U=triu(A) time:        0.000224 sec
read A, create U memory usage: 0.0010615 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000166 sec
# triangles 6584

tricount time:         0.000603 sec (dot product method)
tri+prep time:         0.000993 sec (incl time to compute L and U)
compute C time:        0.000586 sec
reduce (C) time:       0.000017 sec
rate      12.66 million edges/sec (incl time for U=triu(A))
rate      20.85 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00106165 GB

----------------------------------- outer product method:
tricount time:         0.000457 sec (outer product method)
tri+prep time:         0.000623 sec (incl time to compute L)
compute C time:        0.000441 sec
reduce (C) time:       0.000016 sec
rate      20.18 million edges/sec (incl time for L=tril(A))
rate      27.52 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0010615 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/ca-AstroPh/ca-AstroPh_adj.tsv.gz
--------------------------------------------------------------
ntuples: 396100
nrows 18772 ncols 18772
time to prune self-edges:     0.000549
time to build the graph with GrB_Matrix_build:     0.040217
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.005261

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 18772 ncols: 18772 max # entries: 396100
format: standard CSR vlen: 18772 nvec_nonempty: 18771 nvec: 18772 plen: 18772 vdim: 18772
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 396100 
row: 0 : 8 entries [0:7]
    column 1056: bool 1
    column 1701: bool 1
    column 3425: bool 1
    column 6911: bool 1
    column 8883: bool 1
    column 12884: bool 1
    column 13078: bool 1
    column 13559: bool 1
row: 1 : 130 entries [8:137]
    column 51: bool 1
    column 362: bool 1
    column 541: bool 1
    column 772: bool 1
    column 1025: bool 1
    column 1218: bool 1
    column 1268: bool 1
    column 1354: bool 1
    column 1427: bool 1
    column 1527: bool 1
    column 1781: bool 1
    column 1792: bool 1
    column 1808: bool 1
    column 1956: bool 1
    column 1957: bool 1
    column 2007: bool 1
    column 2216: bool 1
    column 2302: bool 1
    column 2474: bool 1
    column 2871: bool 1
    column 3100: bool 1
    column 3203: bool 1
    ...
row: 2 : 7 entries [138:144]
    ...
row: 3 : 8 entries [145:152]
    ...
row: 4 : 8 entries [153:160]
    ...
row: 5 : 20 entries [161:180]
    ...
row: 6 : 22 entries [181:202]
    ...
row: 7 : 105 entries [203:307]
    ...
row: 8 : 19 entries [308:326]
    ...
row: 9 : 85 entries [327:411]
    ...
...
matrix 18772 by 18772, 396100 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 18772 ncols: 18772 max # entries: 396100
format: standard CSR vlen: 18772 nvec_nonempty: 18771 nvec: 18772 plen: 18772 vdim: 18772
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 396100 
row: 0 : 8 entries [0:7]
    column 1056: bool 1
    column 1701: bool 1
    column 3425: bool 1
    column 6911: bool 1
    column 8883: bool 1
    column 12884: bool 1
    column 13078: bool 1
    column 13559: bool 1
row: 1 : 130 entries [8:137]
    column 51: bool 1
    column 362: bool 1
    column 541: bool 1
    column 772: bool 1
    column 1025: bool 1
    column 1218: bool 1
    column 1268: bool 1
    column 1354: bool 1
    column 1427: bool 1
    column 1527: bool 1
    column 1781: bool 1
    column 1792: bool 1
    column 1808: bool 1
    column 1956: bool 1
    column 1957: bool 1
    column 2007: bool 1
    column 2216: bool 1
    column 2302: bool 1
    column 2474: bool 1
    column 2871: bool 1
    column 3100: bool 1
    column 3203: bool 1
    ...
row: 2 : 7 entries [138:144]
    ...
row: 3 : 8 entries [145:152]
    ...
row: 4 : 8 entries [153:160]
    ...
row: 5 : 20 entries [161:180]
    ...
row: 6 : 22 entries [181:202]
    ...
row: 7 : 105 entries [203:307]
    ...
row: 8 : 19 entries [308:326]
    ...
row: 9 : 85 entries [327:411]
    ...
...

total time to read A matrix:       0.257260 sec

n 18772 # edges 198050
U=triu(A) time:        0.002338 sec
read A, create U memory usage: 0.0147111 GB

------------------------------------- dot product method:
L=tril(A) time:        0.001689 sec
# triangles 1351441

tricount time:         0.022924 sec (dot product method)
tri+prep time:         0.026952 sec (incl time to compute L and U)
compute C time:        0.021936 sec
reduce (C) time:       0.000988 sec
rate       7.35 million edges/sec (incl time for U=triu(A))
rate       8.64 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0147112 GB

----------------------------------- outer product method:
tricount time:         0.018301 sec (outer product method)
tri+prep time:         0.019990 sec (incl time to compute L)
compute C time:        0.017317 sec
reduce (C) time:       0.000984 sec
rate       9.91 million edges/sec (incl time for L=tril(A))
rate      10.82 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0147111 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/ca-CondMat/ca-CondMat_adj.tsv.gz
--------------------------------------------------------------
ntuples: 186878
nrows 23133 ncols 23133
time to prune self-edges:     0.000239
time to build the graph with GrB_Matrix_build:     0.018263
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.002670

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 23133 ncols: 23133 max # entries: 186878
format: standard CSR vlen: 23133 nvec_nonempty: 23133 nvec: 23133 plen: 23133 vdim: 23133
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 186878 
row: 0 : 3 entries [0:2]
    column 6736: bool 1
    column 17557: bool 1
    column 20971: bool 1
row: 1 : 1 entries [3:3]
    column 13159: bool 1
row: 2 : 7 entries [4:10]
    column 2326: bool 1
    column 2758: bool 1
    column 4756: bool 1
    column 11897: bool 1
    column 13158: bool 1
    column 16241: bool 1
    column 22779: bool 1
row: 3 : 2 entries [11:12]
    column 7187: bool 1
    column 17472: bool 1
row: 4 : 3 entries [13:15]
    column 12808: bool 1
    column 17930: bool 1
    column 22133: bool 1
row: 5 : 1 entries [16:16]
    column 21281: bool 1
row: 6 : 2 entries [17:18]
    column 11919: bool 1
    column 22350: bool 1
row: 7 : 33 entries [19:51]
    column 1623: bool 1
    column 2184: bool 1
    column 2555: bool 1
    column 2580: bool 1
    column 2705: bool 1
    column 3962: bool 1
    column 4215: bool 1
    column 6872: bool 1
    column 7759: bool 1
    column 7941: bool 1
    column 7970: bool 1
    ...
row: 8 : 1 entries [52:52]
    ...
row: 9 : 7 entries [53:59]
    ...
...
matrix 23133 by 23133, 186878 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 23133 ncols: 23133 max # entries: 186878
format: standard CSR vlen: 23133 nvec_nonempty: 23133 nvec: 23133 plen: 23133 vdim: 23133
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 186878 
row: 0 : 3 entries [0:2]
    column 6736: bool 1
    column 17557: bool 1
    column 20971: bool 1
row: 1 : 1 entries [3:3]
    column 13159: bool 1
row: 2 : 7 entries [4:10]
    column 2326: bool 1
    column 2758: bool 1
    column 4756: bool 1
    column 11897: bool 1
    column 13158: bool 1
    column 16241: bool 1
    column 22779: bool 1
row: 3 : 2 entries [11:12]
    column 7187: bool 1
    column 17472: bool 1
row: 4 : 3 entries [13:15]
    column 12808: bool 1
    column 17930: bool 1
    column 22133: bool 1
row: 5 : 1 entries [16:16]
    column 21281: bool 1
row: 6 : 2 entries [17:18]
    column 11919: bool 1
    column 22350: bool 1
row: 7 : 33 entries [19:51]
    column 1623: bool 1
    column 2184: bool 1
    column 2555: bool 1
    column 2580: bool 1
    column 2705: bool 1
    column 3962: bool 1
    column 4215: bool 1
    column 6872: bool 1
    column 7759: bool 1
    column 7941: bool 1
    column 7970: bool 1
    ...
row: 8 : 1 entries [52:52]
    ...
row: 9 : 7 entries [53:59]
    ...
...

total time to read A matrix:       0.123887 sec

n 23133 # edges 93439
U=triu(A) time:        0.001341 sec
read A, create U memory usage: 0.00728374 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000964 sec
# triangles 173361

tricount time:         0.005540 sec (dot product method)
tri+prep time:         0.007845 sec (incl time to compute L and U)
compute C time:        0.005175 sec
reduce (C) time:       0.000364 sec
rate      11.91 million edges/sec (incl time for U=triu(A))
rate      16.87 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00728389 GB

----------------------------------- outer product method:
tricount time:         0.004388 sec (outer product method)
tri+prep time:         0.005352 sec (incl time to compute L)
compute C time:        0.004026 sec
reduce (C) time:       0.000361 sec
rate      17.46 million edges/sec (incl time for L=tril(A))
rate      21.29 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00728374 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/ca-GrQc/ca-GrQc_adj.tsv.gz
--------------------------------------------------------------
ntuples: 28968
nrows 5242 ncols 5242
time to prune self-edges:     0.000038
time to build the graph with GrB_Matrix_build:     0.002665
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000405

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 5242 ncols: 5242 max # entries: 28968
format: standard CSR vlen: 5242 nvec_nonempty: 5241 nvec: 5242 plen: 5242 vdim: 5242
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 28968 
row: 0 : 25 entries [0:24]
    column 301: bool 1
    column 422: bool 1
    column 440: bool 1
    column 641: bool 1
    column 718: bool 1
    column 903: bool 1
    column 1256: bool 1
    column 1463: bool 1
    column 1670: bool 1
    column 1808: bool 1
    column 2411: bool 1
    column 2416: bool 1
    column 2498: bool 1
    column 2834: bool 1
    column 2935: bool 1
    column 2991: bool 1
    column 3137: bool 1
    column 3187: bool 1
    column 3426: bool 1
    column 3558: bool 1
    column 4070: bool 1
    column 4172: bool 1
    column 4307: bool 1
    column 4436: bool 1
    column 5203: bool 1
row: 1 : 1 entries [25:25]
    column 3402: bool 1
row: 2 : 1 entries [26:26]
    column 4675: bool 1
row: 3 : 5 entries [27:31]
    column 522: bool 1
    column 1567: bool 1
    column 2265: bool 1
    ...
row: 4 : 4 entries [32:35]
    ...
row: 5 : 5 entries [36:40]
    ...
row: 6 : 2 entries [41:42]
    ...
row: 7 : 11 entries [43:53]
    ...
row: 8 : 6 entries [54:59]
    ...
row: 9 : 17 entries [60:76]
    ...
...
matrix 5242 by 5242, 28968 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 5242 ncols: 5242 max # entries: 28968
format: standard CSR vlen: 5242 nvec_nonempty: 5241 nvec: 5242 plen: 5242 vdim: 5242
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 28968 
row: 0 : 25 entries [0:24]
    column 301: bool 1
    column 422: bool 1
    column 440: bool 1
    column 641: bool 1
    column 718: bool 1
    column 903: bool 1
    column 1256: bool 1
    column 1463: bool 1
    column 1670: bool 1
    column 1808: bool 1
    column 2411: bool 1
    column 2416: bool 1
    column 2498: bool 1
    column 2834: bool 1
    column 2935: bool 1
    column 2991: bool 1
    column 3137: bool 1
    column 3187: bool 1
    column 3426: bool 1
    column 3558: bool 1
    column 4070: bool 1
    column 4172: bool 1
    column 4307: bool 1
    column 4436: bool 1
    column 5203: bool 1
row: 1 : 1 entries [25:25]
    column 3402: bool 1
row: 2 : 1 entries [26:26]
    column 4675: bool 1
row: 3 : 5 entries [27:31]
    column 522: bool 1
    column 1567: bool 1
    column 2265: bool 1
    ...
row: 4 : 4 entries [32:35]
    ...
row: 5 : 5 entries [36:40]
    ...
row: 6 : 2 entries [41:42]
    ...
row: 7 : 11 entries [43:53]
    ...
row: 8 : 6 entries [54:59]
    ...
row: 9 : 17 entries [60:76]
    ...
...

total time to read A matrix:       0.020213 sec

n 5242 # edges 14484
U=triu(A) time:        0.000250 sec
read A, create U memory usage: 0.0011696 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000171 sec
# triangles 48260

tricount time:         0.000739 sec (dot product method)
tri+prep time:         0.001159 sec (incl time to compute L and U)
compute C time:        0.000686 sec
reduce (C) time:       0.000053 sec
rate      12.49 million edges/sec (incl time for U=triu(A))
rate      19.61 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00116974 GB

----------------------------------- outer product method:
tricount time:         0.000565 sec (outer product method)
tri+prep time:         0.000735 sec (incl time to compute L)
compute C time:        0.000513 sec
reduce (C) time:       0.000051 sec
rate      19.70 million edges/sec (incl time for L=tril(A))
rate      25.64 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0011696 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/ca-HepPh/ca-HepPh_adj.tsv.gz
--------------------------------------------------------------
ntuples: 236978
nrows 12008 ncols 12008
time to prune self-edges:     0.000375
time to build the graph with GrB_Matrix_build:     0.023469
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.002943

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 12008 ncols: 12008 max # entries: 236978
format: standard CSR vlen: 12008 nvec_nonempty: 12006 nvec: 12008 plen: 12008 vdim: 12008
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 236978 
row: 0 : 1 entries [0:0]
    column 8107: bool 1
row: 1 : 4 entries [1:4]
    column 130: bool 1
    column 6242: bool 1
    column 6527: bool 1
    column 7301: bool 1
row: 2 : 20 entries [5:24]
    column 574: bool 1
    column 1588: bool 1
    column 2534: bool 1
    column 3079: bool 1
    column 3278: bool 1
    column 3399: bool 1
    column 4019: bool 1
    column 4830: bool 1
    column 4940: bool 1
    column 5872: bool 1
    column 6868: bool 1
    column 6880: bool 1
    column 6937: bool 1
    column 7237: bool 1
    column 7432: bool 1
    column 8479: bool 1
    column 8940: bool 1
    column 9545: bool 1
    column 9837: bool 1
    column 10838: bool 1
row: 3 : 34 entries [25:58]
    column 4: bool 1
    column 347: bool 1
    column 548: bool 1
    column 587: bool 1
    column 801: bool 1
    ...
row: 4 : 2 entries [59:60]
    ...
row: 5 : 8 entries [61:68]
    ...
row: 6 : 9 entries [69:77]
    ...
row: 7 : 2 entries [78:79]
    ...
row: 8 : 10 entries [80:89]
    ...
row: 9 : 6 entries [90:95]
    ...
...
matrix 12008 by 12008, 236978 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 12008 ncols: 12008 max # entries: 236978
format: standard CSR vlen: 12008 nvec_nonempty: 12006 nvec: 12008 plen: 12008 vdim: 12008
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 236978 
row: 0 : 1 entries [0:0]
    column 8107: bool 1
row: 1 : 4 entries [1:4]
    column 130: bool 1
    column 6242: bool 1
    column 6527: bool 1
    column 7301: bool 1
row: 2 : 20 entries [5:24]
    column 574: bool 1
    column 1588: bool 1
    column 2534: bool 1
    column 3079: bool 1
    column 3278: bool 1
    column 3399: bool 1
    column 4019: bool 1
    column 4830: bool 1
    column 4940: bool 1
    column 5872: bool 1
    column 6868: bool 1
    column 6880: bool 1
    column 6937: bool 1
    column 7237: bool 1
    column 7432: bool 1
    column 8479: bool 1
    column 8940: bool 1
    column 9545: bool 1
    column 9837: bool 1
    column 10838: bool 1
row: 3 : 34 entries [25:58]
    column 4: bool 1
    column 347: bool 1
    column 548: bool 1
    column 587: bool 1
    column 801: bool 1
    ...
row: 4 : 2 entries [59:60]
    ...
row: 5 : 8 entries [61:68]
    ...
row: 6 : 9 entries [69:77]
    ...
row: 7 : 2 entries [78:79]
    ...
row: 8 : 10 entries [80:89]
    ...
row: 9 : 6 entries [90:95]
    ...
...

total time to read A matrix:       0.151866 sec

n 12008 # edges 118489
U=triu(A) time:        0.001364 sec
read A, create U memory usage: 0.00882034 GB

------------------------------------- dot product method:
L=tril(A) time:        0.001014 sec
# triangles 3358499

tricount time:         0.022456 sec (dot product method)
tri+prep time:         0.024834 sec (incl time to compute L and U)
compute C time:        0.021844 sec
reduce (C) time:       0.000613 sec
rate       4.77 million edges/sec (incl time for U=triu(A))
rate       5.28 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00882049 GB

----------------------------------- outer product method:
tricount time:         0.017861 sec (outer product method)
tri+prep time:         0.018875 sec (incl time to compute L)
compute C time:        0.017253 sec
reduce (C) time:       0.000608 sec
rate       6.28 million edges/sec (incl time for L=tril(A))
rate       6.63 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00882034 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/ca-HepTh/ca-HepTh_adj.tsv.gz
--------------------------------------------------------------
ntuples: 51946
nrows 9877 ncols 9877
time to prune self-edges:     0.000068
time to build the graph with GrB_Matrix_build:     0.004862
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000758

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 9877 ncols: 9877 max # entries: 51946
format: standard CSR vlen: 9877 nvec_nonempty: 9875 nvec: 9877 plen: 9877 vdim: 9877
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 51946 
row: 0 : 3 entries [0:2]
    column 1628: bool 1
    column 7051: bool 1
    column 7708: bool 1
row: 1 : 9 entries [3:11]
    column 2383: bool 1
    column 3055: bool 1
    column 3661: bool 1
    column 3672: bool 1
    column 5036: bool 1
    column 5390: bool 1
    column 5657: bool 1
    column 7151: bool 1
    column 9561: bool 1
row: 2 : 7 entries [12:18]
    column 2638: bool 1
    column 3059: bool 1
    column 3652: bool 1
    column 5662: bool 1
    column 6450: bool 1
    column 6681: bool 1
    column 7535: bool 1
row: 3 : 5 entries [19:23]
    column 2472: bool 1
    column 3348: bool 1
    column 6659: bool 1
    column 7762: bool 1
    column 9431: bool 1
row: 4 : 3 entries [24:26]
    column 2174: bool 1
    column 4040: bool 1
    column 7699: bool 1
row: 5 : 10 entries [27:36]
    column 323: bool 1
    column 565: bool 1
    column 835: bool 1
    ...
row: 6 : 9 entries [37:45]
    ...
row: 7 : 8 entries [46:53]
    ...
row: 8 : 8 entries [54:61]
    ...
row: 9 : 5 entries [62:66]
    ...
...
matrix 9877 by 9877, 51946 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 9877 ncols: 9877 max # entries: 51946
format: standard CSR vlen: 9877 nvec_nonempty: 9875 nvec: 9877 plen: 9877 vdim: 9877
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 51946 
row: 0 : 3 entries [0:2]
    column 1628: bool 1
    column 7051: bool 1
    column 7708: bool 1
row: 1 : 9 entries [3:11]
    column 2383: bool 1
    column 3055: bool 1
    column 3661: bool 1
    column 3672: bool 1
    column 5036: bool 1
    column 5390: bool 1
    column 5657: bool 1
    column 7151: bool 1
    column 9561: bool 1
row: 2 : 7 entries [12:18]
    column 2638: bool 1
    column 3059: bool 1
    column 3652: bool 1
    column 5662: bool 1
    column 6450: bool 1
    column 6681: bool 1
    column 7535: bool 1
row: 3 : 5 entries [19:23]
    column 2472: bool 1
    column 3348: bool 1
    column 6659: bool 1
    column 7762: bool 1
    column 9431: bool 1
row: 4 : 3 entries [24:26]
    column 2174: bool 1
    column 4040: bool 1
    column 7699: bool 1
row: 5 : 10 entries [27:36]
    column 323: bool 1
    column 565: bool 1
    column 835: bool 1
    ...
row: 6 : 9 entries [37:45]
    ...
row: 7 : 8 entries [46:53]
    ...
row: 8 : 8 entries [54:61]
    ...
row: 9 : 5 entries [62:66]
    ...
...

total time to read A matrix:       0.035244 sec

n 9877 # edges 25973
U=triu(A) time:        0.000446 sec
read A, create U memory usage: 0.00210805 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000307 sec
# triangles 28339

tricount time:         0.001168 sec (dot product method)
tri+prep time:         0.001921 sec (incl time to compute L and U)
compute C time:        0.001092 sec
reduce (C) time:       0.000076 sec
rate      13.52 million edges/sec (incl time for U=triu(A))
rate      22.23 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00210819 GB

----------------------------------- outer product method:
tricount time:         0.000926 sec (outer product method)
tri+prep time:         0.001233 sec (incl time to compute L)
compute C time:        0.000852 sec
reduce (C) time:       0.000074 sec
rate      21.06 million edges/sec (incl time for L=tril(A))
rate      28.04 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00210805 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/email-Enron/email-Enron_adj.tsv.gz
--------------------------------------------------------------
ntuples: 367662
nrows 36692 ncols 36692
time to prune self-edges:     0.000491
time to build the graph with GrB_Matrix_build:     0.036010
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.004897

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 36692 ncols: 36692 max # entries: 367662
format: standard CSR vlen: 36692 nvec_nonempty: 36692 nvec: 36692 plen: 36692 vdim: 36692
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 367662 
row: 0 : 1 entries [0:0]
    column 1: bool 1
row: 1 : 70 entries [1:70]
    column 0: bool 1
    column 2: bool 1
    column 1113: bool 1
    column 2224: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    column 6668: bool 1
    column 7779: bool 1
    column 8890: bool 1
    column 10001: bool 1
    column 11112: bool 1
    column 11113: bool 1
    column 12224: bool 1
    column 13335: bool 1
    column 14446: bool 1
    column 15557: bool 1
    column 16668: bool 1
    column 17779: bool 1
    column 18890: bool 1
    column 20001: bool 1
    column 21112: bool 1
    column 22223: bool 1
    column 22224: bool 1
    column 23335: bool 1
    column 24446: bool 1
    column 25557: bool 1
    column 26668: bool 1
    column 27779: bool 1
    ...
row: 2 : 4 entries [71:74]
    ...
row: 3 : 4 entries [75:78]
    ...
row: 4 : 65 entries [79:143]
    ...
row: 5 : 1 entries [144:144]
    ...
row: 6 : 2 entries [145:146]
    ...
row: 7 : 2 entries [147:148]
    ...
row: 8 : 3 entries [149:151]
    ...
row: 9 : 3 entries [152:154]
    ...
...
matrix 36692 by 36692, 367662 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 36692 ncols: 36692 max # entries: 367662
format: standard CSR vlen: 36692 nvec_nonempty: 36692 nvec: 36692 plen: 36692 vdim: 36692
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 367662 
row: 0 : 1 entries [0:0]
    column 1: bool 1
row: 1 : 70 entries [1:70]
    column 0: bool 1
    column 2: bool 1
    column 1113: bool 1
    column 2224: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    column 6668: bool 1
    column 7779: bool 1
    column 8890: bool 1
    column 10001: bool 1
    column 11112: bool 1
    column 11113: bool 1
    column 12224: bool 1
    column 13335: bool 1
    column 14446: bool 1
    column 15557: bool 1
    column 16668: bool 1
    column 17779: bool 1
    column 18890: bool 1
    column 20001: bool 1
    column 21112: bool 1
    column 22223: bool 1
    column 22224: bool 1
    column 23335: bool 1
    column 24446: bool 1
    column 25557: bool 1
    column 26668: bool 1
    column 27779: bool 1
    ...
row: 2 : 4 entries [71:74]
    ...
row: 3 : 4 entries [75:78]
    ...
row: 4 : 65 entries [79:143]
    ...
row: 5 : 1 entries [144:144]
    ...
row: 6 : 2 entries [145:146]
    ...
row: 7 : 2 entries [147:148]
    ...
row: 8 : 3 entries [149:151]
    ...
row: 9 : 3 entries [152:154]
    ...
...

total time to read A matrix:       0.238875 sec

n 36692 # edges 183831
U=triu(A) time:        0.002404 sec
read A, create U memory usage: 0.0141174 GB

------------------------------------- dot product method:
L=tril(A) time:        0.001769 sec
# triangles 727044

tricount time:         0.025444 sec (dot product method)
tri+prep time:         0.029617 sec (incl time to compute L and U)
compute C time:        0.024660 sec
reduce (C) time:       0.000784 sec
rate       6.21 million edges/sec (incl time for U=triu(A))
rate       7.22 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0141175 GB

----------------------------------- outer product method:
tricount time:         0.019271 sec (outer product method)
tri+prep time:         0.021039 sec (incl time to compute L)
compute C time:        0.018489 sec
reduce (C) time:       0.000782 sec
rate       8.74 million edges/sec (incl time for L=tril(A))
rate       9.54 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0141174 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/facebook_combined/facebook_combined_adj.tsv.gz
--------------------------------------------------------------
ntuples: 176468
nrows 4039 ncols 4039
time to prune self-edges:     0.000225
time to build the graph with GrB_Matrix_build:     0.016075
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.001832

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4039 ncols: 4039 max # entries: 176468
format: standard CSR vlen: 4039 nvec_nonempty: 4039 nvec: 4039 plen: 4039 vdim: 4039
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 176468 
row: 0 : 347 entries [0:346]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 14: bool 1
    column 25: bool 1
    column 36: bool 1
    column 47: bool 1
    column 58: bool 1
    column 69: bool 1
    column 80: bool 1
    column 91: bool 1
    column 102: bool 1
    column 113: bool 1
    column 114: bool 1
    column 125: bool 1
    column 136: bool 1
    column 147: bool 1
    column 158: bool 1
    column 169: bool 1
    column 180: bool 1
    column 191: bool 1
    column 202: bool 1
    column 213: bool 1
    column 224: bool 1
    column 225: bool 1
    column 236: bool 1
    column 247: bool 1
    column 258: bool 1
    column 269: bool 1
    column 280: bool 1
    ...
row: 1 : 17 entries [347:363]
    ...
row: 2 : 10 entries [364:373]
    ...
row: 3 : 9 entries [374:382]
    ...
row: 4 : 16 entries [383:398]
    ...
row: 5 : 39 entries [399:437]
    ...
row: 6 : 4 entries [438:441]
    ...
row: 7 : 95 entries [442:536]
    ...
row: 8 : 120 entries [537:656]
    ...
row: 9 : 14 entries [657:670]
    ...
...
matrix 4039 by 4039, 176468 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4039 ncols: 4039 max # entries: 176468
format: standard CSR vlen: 4039 nvec_nonempty: 4039 nvec: 4039 plen: 4039 vdim: 4039
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 176468 
row: 0 : 347 entries [0:346]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 14: bool 1
    column 25: bool 1
    column 36: bool 1
    column 47: bool 1
    column 58: bool 1
    column 69: bool 1
    column 80: bool 1
    column 91: bool 1
    column 102: bool 1
    column 113: bool 1
    column 114: bool 1
    column 125: bool 1
    column 136: bool 1
    column 147: bool 1
    column 158: bool 1
    column 169: bool 1
    column 180: bool 1
    column 191: bool 1
    column 202: bool 1
    column 213: bool 1
    column 224: bool 1
    column 225: bool 1
    column 236: bool 1
    column 247: bool 1
    column 258: bool 1
    column 269: bool 1
    column 280: bool 1
    ...
row: 1 : 17 entries [347:363]
    ...
row: 2 : 10 entries [364:373]
    ...
row: 3 : 9 entries [374:382]
    ...
row: 4 : 16 entries [383:398]
    ...
row: 5 : 39 entries [399:437]
    ...
row: 6 : 4 entries [438:441]
    ...
row: 7 : 95 entries [442:536]
    ...
row: 8 : 120 entries [537:656]
    ...
row: 9 : 14 entries [657:670]
    ...
...

total time to read A matrix:       0.109958 sec

n 4039 # edges 88234
U=triu(A) time:        0.000907 sec
read A, create U memory usage: 0.00645073 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000692 sec
# triangles 1612010

tricount time:         0.016207 sec (dot product method)
tri+prep time:         0.017806 sec (incl time to compute L and U)
compute C time:        0.015716 sec
reduce (C) time:       0.000491 sec
rate       4.96 million edges/sec (incl time for U=triu(A))
rate       5.44 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00645087 GB

----------------------------------- outer product method:
tricount time:         0.011251 sec (outer product method)
tri+prep time:         0.011943 sec (incl time to compute L)
compute C time:        0.010765 sec
reduce (C) time:       0.000486 sec
rate       7.39 million edges/sec (incl time for L=tril(A))
rate       7.84 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00645073 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/loc-brightkite_edges/loc-brightkite_edges_adj.tsv.gz
--------------------------------------------------------------
ntuples: 428156
nrows 58228 ncols 58228
time to prune self-edges:     0.000561
time to build the graph with GrB_Matrix_build:     0.042851
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.006146

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 58228 ncols: 58228 max # entries: 428156
format: standard CSR vlen: 58228 nvec_nonempty: 58228 nvec: 58228 plen: 58228 vdim: 58228
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 428156 
row: 0 : 120 entries [0:119]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 225: bool 1
    column 336: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 780: bool 1
    column 891: bool 1
    column 1002: bool 1
    column 1113: bool 1
    column 1114: bool 1
    column 1225: bool 1
    column 1336: bool 1
    column 1447: bool 1
    column 1558: bool 1
    column 1669: bool 1
    column 1780: bool 1
    column 1891: bool 1
    column 2002: bool 1
    column 2113: bool 1
    column 2224: bool 1
    column 2225: bool 1
    column 2336: bool 1
    column 2447: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    ...
row: 1 : 40 entries [120:159]
    ...
row: 2 : 35 entries [160:194]
    ...
row: 3 : 2 entries [195:196]
    ...
row: 4 : 7 entries [197:203]
    ...
row: 5 : 2 entries [204:205]
    ...
row: 6 : 2 entries [206:207]
    ...
row: 7 : 4 entries [208:211]
    ...
row: 8 : 4 entries [212:215]
    ...
row: 9 : 3 entries [216:218]
    ...
...
matrix 58228 by 58228, 428156 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 58228 ncols: 58228 max # entries: 428156
format: standard CSR vlen: 58228 nvec_nonempty: 58228 nvec: 58228 plen: 58228 vdim: 58228
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 428156 
row: 0 : 120 entries [0:119]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 114: bool 1
    column 225: bool 1
    column 336: bool 1
    column 447: bool 1
    column 558: bool 1
    column 669: bool 1
    column 780: bool 1
    column 891: bool 1
    column 1002: bool 1
    column 1113: bool 1
    column 1114: bool 1
    column 1225: bool 1
    column 1336: bool 1
    column 1447: bool 1
    column 1558: bool 1
    column 1669: bool 1
    column 1780: bool 1
    column 1891: bool 1
    column 2002: bool 1
    column 2113: bool 1
    column 2224: bool 1
    column 2225: bool 1
    column 2336: bool 1
    column 2447: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    ...
row: 1 : 40 entries [120:159]
    ...
row: 2 : 35 entries [160:194]
    ...
row: 3 : 2 entries [195:196]
    ...
row: 4 : 7 entries [197:203]
    ...
row: 5 : 2 entries [204:205]
    ...
row: 6 : 2 entries [206:207]
    ...
row: 7 : 4 entries [208:211]
    ...
row: 8 : 4 entries [212:215]
    ...
row: 9 : 3 entries [216:218]
    ...
...

total time to read A matrix:       0.280671 sec

n 58228 # edges 214078
U=triu(A) time:        0.003056 sec
read A, create U memory usage: 0.016812 GB

------------------------------------- dot product method:
L=tril(A) time:        0.002247 sec
# triangles 494728

tricount time:         0.019131 sec (dot product method)
tri+prep time:         0.024434 sec (incl time to compute L and U)
compute C time:        0.018574 sec
reduce (C) time:       0.000557 sec
rate       8.76 million edges/sec (incl time for U=triu(A))
rate      11.19 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0168122 GB

----------------------------------- outer product method:
tricount time:         0.012752 sec (outer product method)
tri+prep time:         0.014999 sec (incl time to compute L)
compute C time:        0.012198 sec
reduce (C) time:       0.000554 sec
rate      14.27 million edges/sec (incl time for L=tril(A))
rate      16.79 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.016812 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/loc-gowalla_edges/loc-gowalla_edges_adj.tsv.gz
--------------------------------------------------------------
ntuples: 1900654
nrows 196591 ncols 196591
time to prune self-edges:     0.003673
time to build the graph with GrB_Matrix_build:     0.206091
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.028730

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 196591 ncols: 196591 max # entries: 1900654
format: standard CSR vlen: 196591 nvec_nonempty: 196591 nvec: 196591 plen: 196591 vdim: 196591
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1900654 
row: 0 : 615 entries [0:614]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 1114: bool 1
    column 2225: bool 1
    column 3336: bool 1
    column 4447: bool 1
    column 5558: bool 1
    column 6669: bool 1
    column 7780: bool 1
    column 8891: bool 1
    column 10002: bool 1
    column 11113: bool 1
    column 11114: bool 1
    column 12225: bool 1
    column 13336: bool 1
    column 14447: bool 1
    column 15558: bool 1
    column 16669: bool 1
    column 17780: bool 1
    column 18891: bool 1
    column 20002: bool 1
    column 21113: bool 1
    column 22224: bool 1
    column 22225: bool 1
    column 23336: bool 1
    column 24447: bool 1
    column 25558: bool 1
    column 26669: bool 1
    column 27780: bool 1
    ...
row: 1 : 838 entries [615:1452]
    ...
row: 2 : 22 entries [1453:1474]
    ...
row: 3 : 74 entries [1475:1548]
    ...
row: 4 : 6 entries [1549:1554]
    ...
row: 5 : 9 entries [1555:1563]
    ...
row: 6 : 5 entries [1564:1568]
    ...
row: 7 : 6 entries [1569:1574]
    ...
row: 8 : 18 entries [1575:1592]
    ...
row: 9 : 4 entries [1593:1596]
    ...
...
matrix 196591 by 196591, 1900654 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 196591 ncols: 196591 max # entries: 1900654
format: standard CSR vlen: 196591 nvec_nonempty: 196591 nvec: 196591 plen: 196591 vdim: 196591
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1900654 
row: 0 : 615 entries [0:614]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 1114: bool 1
    column 2225: bool 1
    column 3336: bool 1
    column 4447: bool 1
    column 5558: bool 1
    column 6669: bool 1
    column 7780: bool 1
    column 8891: bool 1
    column 10002: bool 1
    column 11113: bool 1
    column 11114: bool 1
    column 12225: bool 1
    column 13336: bool 1
    column 14447: bool 1
    column 15558: bool 1
    column 16669: bool 1
    column 17780: bool 1
    column 18891: bool 1
    column 20002: bool 1
    column 21113: bool 1
    column 22224: bool 1
    column 22225: bool 1
    column 23336: bool 1
    column 24447: bool 1
    column 25558: bool 1
    column 26669: bool 1
    column 27780: bool 1
    ...
row: 1 : 838 entries [615:1452]
    ...
row: 2 : 22 entries [1453:1474]
    ...
row: 3 : 74 entries [1475:1548]
    ...
row: 4 : 6 entries [1549:1554]
    ...
row: 5 : 9 entries [1555:1563]
    ...
row: 6 : 5 entries [1564:1568]
    ...
row: 7 : 6 entries [1569:1574]
    ...
row: 8 : 18 entries [1575:1592]
    ...
row: 9 : 4 entries [1593:1596]
    ...
...

total time to read A matrix:       1.277030 sec

n 196591 # edges 950327
U=triu(A) time:        0.012501 sec
read A, create U memory usage: 0.0731427 GB

------------------------------------- dot product method:
L=tril(A) time:        0.009042 sec
# triangles 2273138

tricount time:         0.139560 sec (dot product method)
tri+prep time:         0.161103 sec (incl time to compute L and U)
compute C time:        0.136544 sec
reduce (C) time:       0.003017 sec
rate       5.90 million edges/sec (incl time for U=triu(A))
rate       6.81 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0731428 GB

----------------------------------- outer product method:
tricount time:         0.185732 sec (outer product method)
tri+prep time:         0.194774 sec (incl time to compute L)
compute C time:        0.182715 sec
reduce (C) time:       0.003017 sec
rate       4.88 million edges/sec (incl time for L=tril(A))
rate       5.12 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0731427 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010331/oregon1_010331_adj.tsv.gz
--------------------------------------------------------------
ntuples: 44004
nrows 10670 ncols 10670
time to prune self-edges:     0.000058
time to build the graph with GrB_Matrix_build:     0.003965
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000680

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10670 ncols: 10670 max # entries: 44004
format: standard CSR vlen: 10670 nvec_nonempty: 10670 nvec: 10670 plen: 10670 vdim: 10670
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 44004 
row: 0 : 565 entries [0:564]
    column 181: bool 1
    column 184: bool 1
    column 190: bool 1
    column 193: bool 1
    column 206: bool 1
    column 208: bool 1
    column 215: bool 1
    column 220: bool 1
    column 238: bool 1
    column 258: bool 1
    column 266: bool 1
    column 272: bool 1
    column 283: bool 1
    column 284: bool 1
    column 312: bool 1
    column 325: bool 1
    column 329: bool 1
    column 341: bool 1
    column 349: bool 1
    column 351: bool 1
    column 352: bool 1
    column 354: bool 1
    column 366: bool 1
    column 388: bool 1
    column 389: bool 1
    column 401: bool 1
    column 411: bool 1
    column 414: bool 1
    column 438: bool 1
    column 443: bool 1
    ...
row: 1 : 1 entries [565:565]
    ...
row: 2 : 2 entries [566:567]
    ...
row: 3 : 2 entries [568:569]
    ...
row: 4 : 2 entries [570:571]
    ...
row: 5 : 2 entries [572:573]
    ...
row: 6 : 1 entries [574:574]
    ...
row: 7 : 2 entries [575:576]
    ...
row: 8 : 1 entries [577:577]
    ...
row: 9 : 3 entries [578:580]
    ...
...
matrix 10670 by 10670, 44004 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10670 ncols: 10670 max # entries: 44004
format: standard CSR vlen: 10670 nvec_nonempty: 10670 nvec: 10670 plen: 10670 vdim: 10670
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 44004 
row: 0 : 565 entries [0:564]
    column 181: bool 1
    column 184: bool 1
    column 190: bool 1
    column 193: bool 1
    column 206: bool 1
    column 208: bool 1
    column 215: bool 1
    column 220: bool 1
    column 238: bool 1
    column 258: bool 1
    column 266: bool 1
    column 272: bool 1
    column 283: bool 1
    column 284: bool 1
    column 312: bool 1
    column 325: bool 1
    column 329: bool 1
    column 341: bool 1
    column 349: bool 1
    column 351: bool 1
    column 352: bool 1
    column 354: bool 1
    column 366: bool 1
    column 388: bool 1
    column 389: bool 1
    column 401: bool 1
    column 411: bool 1
    column 414: bool 1
    column 438: bool 1
    column 443: bool 1
    ...
row: 1 : 1 entries [565:565]
    ...
row: 2 : 2 entries [566:567]
    ...
row: 3 : 2 entries [568:569]
    ...
row: 4 : 2 entries [570:571]
    ...
row: 5 : 2 entries [572:573]
    ...
row: 6 : 1 entries [574:574]
    ...
row: 7 : 2 entries [575:576]
    ...
row: 8 : 1 entries [577:577]
    ...
row: 9 : 3 entries [578:580]
    ...
...

total time to read A matrix:       0.029914 sec

n 10670 # edges 22002
U=triu(A) time:        0.000370 sec
read A, create U memory usage: 0.00184117 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000288 sec
# triangles 17144

tricount time:         0.001223 sec (dot product method)
tri+prep time:         0.001881 sec (incl time to compute L and U)
compute C time:        0.001182 sec
reduce (C) time:       0.000041 sec
rate      11.70 million edges/sec (incl time for U=triu(A))
rate      17.99 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00184131 GB

----------------------------------- outer product method:
tricount time:         0.002035 sec (outer product method)
tri+prep time:         0.002323 sec (incl time to compute L)
compute C time:        0.001995 sec
reduce (C) time:       0.000039 sec
rate       9.47 million edges/sec (incl time for L=tril(A))
rate      10.81 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00184117 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010407/oregon1_010407_adj.tsv.gz
--------------------------------------------------------------
ntuples: 43998
nrows 10729 ncols 10729
time to prune self-edges:     0.000057
time to build the graph with GrB_Matrix_build:     0.003968
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000683

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10729 ncols: 10729 max # entries: 43998
format: standard CSR vlen: 10729 nvec_nonempty: 10729 nvec: 10729 plen: 10729 vdim: 10729
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 43998 
row: 0 : 563 entries [0:562]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 244: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 316: bool 1
    column 329: bool 1
    column 333: bool 1
    column 345: bool 1
    column 353: bool 1
    column 355: bool 1
    column 356: bool 1
    column 358: bool 1
    column 370: bool 1
    column 392: bool 1
    column 393: bool 1
    column 405: bool 1
    column 415: bool 1
    column 418: bool 1
    column 442: bool 1
    ...
row: 1 : 1 entries [563:563]
    ...
row: 2 : 2 entries [564:565]
    ...
row: 3 : 2 entries [566:567]
    ...
row: 4 : 2 entries [568:569]
    ...
row: 5 : 2 entries [570:571]
    ...
row: 6 : 1 entries [572:572]
    ...
row: 7 : 2 entries [573:574]
    ...
row: 8 : 1 entries [575:575]
    ...
row: 9 : 3 entries [576:578]
    ...
...
matrix 10729 by 10729, 43998 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10729 ncols: 10729 max # entries: 43998
format: standard CSR vlen: 10729 nvec_nonempty: 10729 nvec: 10729 plen: 10729 vdim: 10729
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 43998 
row: 0 : 563 entries [0:562]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 244: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 316: bool 1
    column 329: bool 1
    column 333: bool 1
    column 345: bool 1
    column 353: bool 1
    column 355: bool 1
    column 356: bool 1
    column 358: bool 1
    column 370: bool 1
    column 392: bool 1
    column 393: bool 1
    column 405: bool 1
    column 415: bool 1
    column 418: bool 1
    column 442: bool 1
    ...
row: 1 : 1 entries [563:563]
    ...
row: 2 : 2 entries [564:565]
    ...
row: 3 : 2 entries [566:567]
    ...
row: 4 : 2 entries [568:569]
    ...
row: 5 : 2 entries [570:571]
    ...
row: 6 : 1 entries [572:572]
    ...
row: 7 : 2 entries [573:574]
    ...
row: 8 : 1 entries [575:575]
    ...
row: 9 : 3 entries [576:578]
    ...
...

total time to read A matrix:       0.029467 sec

n 10729 # edges 21999
U=triu(A) time:        0.000370 sec
read A, create U memory usage: 0.00184237 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000289 sec
# triangles 15834

tricount time:         0.001197 sec (dot product method)
tri+prep time:         0.001857 sec (incl time to compute L and U)
compute C time:        0.001156 sec
reduce (C) time:       0.000041 sec
rate      11.85 million edges/sec (incl time for U=triu(A))
rate      18.38 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00184251 GB

----------------------------------- outer product method:
tricount time:         0.002026 sec (outer product method)
tri+prep time:         0.002315 sec (incl time to compute L)
compute C time:        0.001988 sec
reduce (C) time:       0.000038 sec
rate       9.50 million edges/sec (incl time for L=tril(A))
rate      10.86 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00184237 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010414/oregon1_010414_adj.tsv.gz
--------------------------------------------------------------
ntuples: 44938
nrows 10790 ncols 10790
time to prune self-edges:     0.000059
time to build the graph with GrB_Matrix_build:     0.004058
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000686

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10790 ncols: 10790 max # entries: 44938
format: standard CSR vlen: 10790 nvec_nonempty: 10790 nvec: 10790 plen: 10790 vdim: 10790
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 44938 
row: 0 : 564 entries [0:563]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 243: bool 1
    column 260: bool 1
    column 268: bool 1
    column 274: bool 1
    column 285: bool 1
    column 286: bool 1
    column 316: bool 1
    column 328: bool 1
    column 332: bool 1
    column 344: bool 1
    column 352: bool 1
    column 354: bool 1
    column 355: bool 1
    column 357: bool 1
    column 369: bool 1
    column 391: bool 1
    column 392: bool 1
    column 404: bool 1
    column 414: bool 1
    column 417: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [564:564]
    ...
row: 2 : 2 entries [565:566]
    ...
row: 3 : 2 entries [567:568]
    ...
row: 4 : 2 entries [569:570]
    ...
row: 5 : 2 entries [571:572]
    ...
row: 6 : 1 entries [573:573]
    ...
row: 7 : 2 entries [574:575]
    ...
row: 8 : 2 entries [576:577]
    ...
row: 9 : 3 entries [578:580]
    ...
...
matrix 10790 by 10790, 44938 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10790 ncols: 10790 max # entries: 44938
format: standard CSR vlen: 10790 nvec_nonempty: 10790 nvec: 10790 plen: 10790 vdim: 10790
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 44938 
row: 0 : 564 entries [0:563]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 243: bool 1
    column 260: bool 1
    column 268: bool 1
    column 274: bool 1
    column 285: bool 1
    column 286: bool 1
    column 316: bool 1
    column 328: bool 1
    column 332: bool 1
    column 344: bool 1
    column 352: bool 1
    column 354: bool 1
    column 355: bool 1
    column 357: bool 1
    column 369: bool 1
    column 391: bool 1
    column 392: bool 1
    column 404: bool 1
    column 414: bool 1
    column 417: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [564:564]
    ...
row: 2 : 2 entries [565:566]
    ...
row: 3 : 2 entries [567:568]
    ...
row: 4 : 2 entries [569:570]
    ...
row: 5 : 2 entries [571:572]
    ...
row: 6 : 1 entries [573:573]
    ...
row: 7 : 2 entries [574:575]
    ...
row: 8 : 2 entries [576:577]
    ...
row: 9 : 3 entries [578:580]
    ...
...

total time to read A matrix:       0.030318 sec

n 10790 # edges 22469
U=triu(A) time:        0.000379 sec
read A, create U memory usage: 0.00187767 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000288 sec
# triangles 18237

tricount time:         0.001245 sec (dot product method)
tri+prep time:         0.001912 sec (incl time to compute L and U)
compute C time:        0.001203 sec
reduce (C) time:       0.000043 sec
rate      11.75 million edges/sec (incl time for U=triu(A))
rate      18.04 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00187782 GB

----------------------------------- outer product method:
tricount time:         0.002167 sec (outer product method)
tri+prep time:         0.002455 sec (incl time to compute L)
compute C time:        0.002126 sec
reduce (C) time:       0.000041 sec
rate       9.15 million edges/sec (incl time for L=tril(A))
rate      10.37 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00187767 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010421/oregon1_010421_adj.tsv.gz
--------------------------------------------------------------
ntuples: 45494
nrows 10859 ncols 10859
time to prune self-edges:     0.000059
time to build the graph with GrB_Matrix_build:     0.004126
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000705

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10859 ncols: 10859 max # entries: 45494
format: standard CSR vlen: 10859 nvec_nonempty: 10859 nvec: 10859 plen: 10859 vdim: 10859
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45494 
row: 0 : 573 entries [0:572]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 244: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 316: bool 1
    column 328: bool 1
    column 332: bool 1
    column 344: bool 1
    column 352: bool 1
    column 354: bool 1
    column 355: bool 1
    column 357: bool 1
    column 369: bool 1
    column 391: bool 1
    column 392: bool 1
    column 404: bool 1
    column 414: bool 1
    column 417: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [573:573]
    ...
row: 2 : 2 entries [574:575]
    ...
row: 3 : 2 entries [576:577]
    ...
row: 4 : 2 entries [578:579]
    ...
row: 5 : 2 entries [580:581]
    ...
row: 6 : 1 entries [582:582]
    ...
row: 7 : 2 entries [583:584]
    ...
row: 8 : 2 entries [585:586]
    ...
row: 9 : 3 entries [587:589]
    ...
...
matrix 10859 by 10859, 45494 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10859 ncols: 10859 max # entries: 45494
format: standard CSR vlen: 10859 nvec_nonempty: 10859 nvec: 10859 plen: 10859 vdim: 10859
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45494 
row: 0 : 573 entries [0:572]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 244: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 316: bool 1
    column 328: bool 1
    column 332: bool 1
    column 344: bool 1
    column 352: bool 1
    column 354: bool 1
    column 355: bool 1
    column 357: bool 1
    column 369: bool 1
    column 391: bool 1
    column 392: bool 1
    column 404: bool 1
    column 414: bool 1
    column 417: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [573:573]
    ...
row: 2 : 2 entries [574:575]
    ...
row: 3 : 2 entries [576:577]
    ...
row: 4 : 2 entries [578:579]
    ...
row: 5 : 2 entries [580:581]
    ...
row: 6 : 1 entries [582:582]
    ...
row: 7 : 2 entries [583:584]
    ...
row: 8 : 2 entries [585:586]
    ...
row: 9 : 3 entries [587:589]
    ...
...

total time to read A matrix:       0.030731 sec

n 10859 # edges 22747
U=triu(A) time:        0.000388 sec
read A, create U memory usage: 0.00189934 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000288 sec
# triangles 19108

tricount time:         0.001277 sec (dot product method)
tri+prep time:         0.001952 sec (incl time to compute L and U)
compute C time:        0.001233 sec
reduce (C) time:       0.000044 sec
rate      11.65 million edges/sec (incl time for U=triu(A))
rate      17.82 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00189949 GB

----------------------------------- outer product method:
tricount time:         0.002233 sec (outer product method)
tri+prep time:         0.002521 sec (incl time to compute L)
compute C time:        0.002191 sec
reduce (C) time:       0.000042 sec
rate       9.02 million edges/sec (incl time for L=tril(A))
rate      10.19 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00189934 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010428/oregon1_010428_adj.tsv.gz
--------------------------------------------------------------
ntuples: 44986
nrows 10886 ncols 10886
time to prune self-edges:     0.000059
time to build the graph with GrB_Matrix_build:     0.004072
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000690

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10886 ncols: 10886 max # entries: 44986
format: standard CSR vlen: 10886 nvec_nonempty: 10886 nvec: 10886 plen: 10886 vdim: 10886
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 44986 
row: 0 : 572 entries [0:571]
    column 181: bool 1
    column 184: bool 1
    column 190: bool 1
    column 193: bool 1
    column 206: bool 1
    column 208: bool 1
    column 215: bool 1
    column 219: bool 1
    column 237: bool 1
    column 240: bool 1
    column 257: bool 1
    column 265: bool 1
    column 271: bool 1
    column 282: bool 1
    column 283: bool 1
    column 313: bool 1
    column 325: bool 1
    column 329: bool 1
    column 341: bool 1
    column 349: bool 1
    column 351: bool 1
    column 352: bool 1
    column 354: bool 1
    column 366: bool 1
    column 388: bool 1
    column 389: bool 1
    column 401: bool 1
    column 411: bool 1
    column 414: bool 1
    column 437: bool 1
    ...
row: 1 : 1 entries [572:572]
    ...
row: 2 : 2 entries [573:574]
    ...
row: 3 : 2 entries [575:576]
    ...
row: 4 : 2 entries [577:578]
    ...
row: 5 : 2 entries [579:580]
    ...
row: 6 : 1 entries [581:581]
    ...
row: 7 : 2 entries [582:583]
    ...
row: 8 : 2 entries [584:585]
    ...
row: 9 : 3 entries [586:588]
    ...
...
matrix 10886 by 10886, 44986 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10886 ncols: 10886 max # entries: 44986
format: standard CSR vlen: 10886 nvec_nonempty: 10886 nvec: 10886 plen: 10886 vdim: 10886
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 44986 
row: 0 : 572 entries [0:571]
    column 181: bool 1
    column 184: bool 1
    column 190: bool 1
    column 193: bool 1
    column 206: bool 1
    column 208: bool 1
    column 215: bool 1
    column 219: bool 1
    column 237: bool 1
    column 240: bool 1
    column 257: bool 1
    column 265: bool 1
    column 271: bool 1
    column 282: bool 1
    column 283: bool 1
    column 313: bool 1
    column 325: bool 1
    column 329: bool 1
    column 341: bool 1
    column 349: bool 1
    column 351: bool 1
    column 352: bool 1
    column 354: bool 1
    column 366: bool 1
    column 388: bool 1
    column 389: bool 1
    column 401: bool 1
    column 411: bool 1
    column 414: bool 1
    column 437: bool 1
    ...
row: 1 : 1 entries [572:572]
    ...
row: 2 : 2 entries [573:574]
    ...
row: 3 : 2 entries [575:576]
    ...
row: 4 : 2 entries [577:578]
    ...
row: 5 : 2 entries [579:580]
    ...
row: 6 : 1 entries [581:581]
    ...
row: 7 : 2 entries [582:583]
    ...
row: 8 : 2 entries [584:585]
    ...
row: 9 : 3 entries [586:588]
    ...
...

total time to read A matrix:       0.030459 sec

n 10886 # edges 22493
U=triu(A) time:        0.000380 sec
read A, create U memory usage: 0.0018817 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000289 sec
# triangles 17645

tricount time:         0.001309 sec (dot product method)
tri+prep time:         0.001978 sec (incl time to compute L and U)
compute C time:        0.001265 sec
reduce (C) time:       0.000044 sec
rate      11.37 million edges/sec (incl time for U=triu(A))
rate      17.18 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00188185 GB

----------------------------------- outer product method:
tricount time:         0.002179 sec (outer product method)
tri+prep time:         0.002467 sec (incl time to compute L)
compute C time:        0.002139 sec
reduce (C) time:       0.000040 sec
rate       9.12 million edges/sec (incl time for L=tril(A))
rate      10.32 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0018817 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010505/oregon1_010505_adj.tsv.gz
--------------------------------------------------------------
ntuples: 45214
nrows 10943 ncols 10943
time to prune self-edges:     0.000059
time to build the graph with GrB_Matrix_build:     0.004078
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000696

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10943 ncols: 10943 max # entries: 45214
format: standard CSR vlen: 10943 nvec_nonempty: 10943 nvec: 10943 plen: 10943 vdim: 10943
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45214 
row: 0 : 567 entries [0:566]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 244: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 317: bool 1
    column 329: bool 1
    column 333: bool 1
    column 345: bool 1
    column 353: bool 1
    column 355: bool 1
    column 356: bool 1
    column 358: bool 1
    column 370: bool 1
    column 392: bool 1
    column 393: bool 1
    column 405: bool 1
    column 415: bool 1
    column 418: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [567:567]
    ...
row: 2 : 2 entries [568:569]
    ...
row: 3 : 2 entries [570:571]
    ...
row: 4 : 2 entries [572:573]
    ...
row: 5 : 2 entries [574:575]
    ...
row: 6 : 1 entries [576:576]
    ...
row: 7 : 2 entries [577:578]
    ...
row: 8 : 2 entries [579:580]
    ...
row: 9 : 3 entries [581:583]
    ...
...
matrix 10943 by 10943, 45214 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10943 ncols: 10943 max # entries: 45214
format: standard CSR vlen: 10943 nvec_nonempty: 10943 nvec: 10943 plen: 10943 vdim: 10943
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45214 
row: 0 : 567 entries [0:566]
    column 185: bool 1
    column 188: bool 1
    column 194: bool 1
    column 197: bool 1
    column 210: bool 1
    column 212: bool 1
    column 219: bool 1
    column 223: bool 1
    column 241: bool 1
    column 244: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 317: bool 1
    column 329: bool 1
    column 333: bool 1
    column 345: bool 1
    column 353: bool 1
    column 355: bool 1
    column 356: bool 1
    column 358: bool 1
    column 370: bool 1
    column 392: bool 1
    column 393: bool 1
    column 405: bool 1
    column 415: bool 1
    column 418: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [567:567]
    ...
row: 2 : 2 entries [568:569]
    ...
row: 3 : 2 entries [570:571]
    ...
row: 4 : 2 entries [572:573]
    ...
row: 5 : 2 entries [574:575]
    ...
row: 6 : 1 entries [576:576]
    ...
row: 7 : 2 entries [577:578]
    ...
row: 8 : 2 entries [579:580]
    ...
row: 9 : 3 entries [581:583]
    ...
...

total time to read A matrix:       0.030417 sec

n 10943 # edges 22607
U=triu(A) time:        0.000383 sec
read A, create U memory usage: 0.00189128 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000290 sec
# triangles 17597

tricount time:         0.001248 sec (dot product method)
tri+prep time:         0.001921 sec (incl time to compute L and U)
compute C time:        0.001206 sec
reduce (C) time:       0.000042 sec
rate      11.77 million edges/sec (incl time for U=triu(A))
rate      18.11 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00189142 GB

----------------------------------- outer product method:
tricount time:         0.002169 sec (outer product method)
tri+prep time:         0.002460 sec (incl time to compute L)
compute C time:        0.002129 sec
reduce (C) time:       0.000040 sec
rate       9.19 million edges/sec (incl time for L=tril(A))
rate      10.42 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00189128 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010512/oregon1_010512_adj.tsv.gz
--------------------------------------------------------------
ntuples: 45354
nrows 11011 ncols 11011
time to prune self-edges:     0.000059
time to build the graph with GrB_Matrix_build:     0.004096
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000701

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11011 ncols: 11011 max # entries: 45354
format: standard CSR vlen: 11011 nvec_nonempty: 11011 nvec: 11011 plen: 11011 vdim: 11011
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45354 
row: 0 : 567 entries [0:566]
    column 186: bool 1
    column 189: bool 1
    column 195: bool 1
    column 198: bool 1
    column 211: bool 1
    column 213: bool 1
    column 220: bool 1
    column 224: bool 1
    column 242: bool 1
    column 245: bool 1
    column 262: bool 1
    column 270: bool 1
    column 276: bool 1
    column 287: bool 1
    column 288: bool 1
    column 318: bool 1
    column 330: bool 1
    column 334: bool 1
    column 346: bool 1
    column 354: bool 1
    column 356: bool 1
    column 357: bool 1
    column 359: bool 1
    column 371: bool 1
    column 393: bool 1
    column 394: bool 1
    column 406: bool 1
    column 416: bool 1
    column 419: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [567:567]
    ...
row: 2 : 2 entries [568:569]
    ...
row: 3 : 2 entries [570:571]
    ...
row: 4 : 2 entries [572:573]
    ...
row: 5 : 2 entries [574:575]
    ...
row: 6 : 1 entries [576:576]
    ...
row: 7 : 2 entries [577:578]
    ...
row: 8 : 2 entries [579:580]
    ...
row: 9 : 3 entries [581:583]
    ...
...
matrix 11011 by 11011, 45354 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11011 ncols: 11011 max # entries: 45354
format: standard CSR vlen: 11011 nvec_nonempty: 11011 nvec: 11011 plen: 11011 vdim: 11011
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45354 
row: 0 : 567 entries [0:566]
    column 186: bool 1
    column 189: bool 1
    column 195: bool 1
    column 198: bool 1
    column 211: bool 1
    column 213: bool 1
    column 220: bool 1
    column 224: bool 1
    column 242: bool 1
    column 245: bool 1
    column 262: bool 1
    column 270: bool 1
    column 276: bool 1
    column 287: bool 1
    column 288: bool 1
    column 318: bool 1
    column 330: bool 1
    column 334: bool 1
    column 346: bool 1
    column 354: bool 1
    column 356: bool 1
    column 357: bool 1
    column 359: bool 1
    column 371: bool 1
    column 393: bool 1
    column 394: bool 1
    column 406: bool 1
    column 416: bool 1
    column 419: bool 1
    column 441: bool 1
    ...
row: 1 : 1 entries [567:567]
    ...
row: 2 : 2 entries [568:569]
    ...
row: 3 : 2 entries [570:571]
    ...
row: 4 : 2 entries [572:573]
    ...
row: 5 : 2 entries [574:575]
    ...
row: 6 : 1 entries [576:576]
    ...
row: 7 : 2 entries [577:578]
    ...
row: 8 : 2 entries [579:580]
    ...
row: 9 : 3 entries [581:583]
    ...
...

total time to read A matrix:       0.030596 sec

n 11011 # edges 22677
U=triu(A) time:        0.000386 sec
read A, create U memory usage: 0.00189795 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000288 sec
# triangles 17598

tricount time:         0.001231 sec (dot product method)
tri+prep time:         0.001904 sec (incl time to compute L and U)
compute C time:        0.001188 sec
reduce (C) time:       0.000042 sec
rate      11.91 million edges/sec (incl time for U=triu(A))
rate      18.43 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0018981 GB

----------------------------------- outer product method:
tricount time:         0.002250 sec (outer product method)
tri+prep time:         0.002538 sec (incl time to compute L)
compute C time:        0.002208 sec
reduce (C) time:       0.000042 sec
rate       8.93 million edges/sec (incl time for L=tril(A))
rate      10.08 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00189795 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010519/oregon1_010519_adj.tsv.gz
--------------------------------------------------------------
ntuples: 45448
nrows 11051 ncols 11051
time to prune self-edges:     0.000059
time to build the graph with GrB_Matrix_build:     0.004094
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000702

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11051 ncols: 11051 max # entries: 45448
format: standard CSR vlen: 11051 nvec_nonempty: 11051 nvec: 11051 plen: 11051 vdim: 11051
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45448 
row: 0 : 562 entries [0:561]
    column 189: bool 1
    column 191: bool 1
    column 197: bool 1
    column 200: bool 1
    column 214: bool 1
    column 216: bool 1
    column 223: bool 1
    column 227: bool 1
    column 246: bool 1
    column 249: bool 1
    column 266: bool 1
    column 274: bool 1
    column 280: bool 1
    column 291: bool 1
    column 292: bool 1
    column 322: bool 1
    column 334: bool 1
    column 338: bool 1
    column 350: bool 1
    column 358: bool 1
    column 360: bool 1
    column 361: bool 1
    column 363: bool 1
    column 375: bool 1
    column 397: bool 1
    column 398: bool 1
    column 410: bool 1
    column 420: bool 1
    column 423: bool 1
    column 452: bool 1
    ...
row: 1 : 1 entries [562:562]
    ...
row: 2 : 2 entries [563:564]
    ...
row: 3 : 2 entries [565:566]
    ...
row: 4 : 2 entries [567:568]
    ...
row: 5 : 2 entries [569:570]
    ...
row: 6 : 1 entries [571:571]
    ...
row: 7 : 2 entries [572:573]
    ...
row: 8 : 2 entries [574:575]
    ...
row: 9 : 3 entries [576:578]
    ...
...
matrix 11051 by 11051, 45448 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11051 ncols: 11051 max # entries: 45448
format: standard CSR vlen: 11051 nvec_nonempty: 11051 nvec: 11051 plen: 11051 vdim: 11051
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 45448 
row: 0 : 562 entries [0:561]
    column 189: bool 1
    column 191: bool 1
    column 197: bool 1
    column 200: bool 1
    column 214: bool 1
    column 216: bool 1
    column 223: bool 1
    column 227: bool 1
    column 246: bool 1
    column 249: bool 1
    column 266: bool 1
    column 274: bool 1
    column 280: bool 1
    column 291: bool 1
    column 292: bool 1
    column 322: bool 1
    column 334: bool 1
    column 338: bool 1
    column 350: bool 1
    column 358: bool 1
    column 360: bool 1
    column 361: bool 1
    column 363: bool 1
    column 375: bool 1
    column 397: bool 1
    column 398: bool 1
    column 410: bool 1
    column 420: bool 1
    column 423: bool 1
    column 452: bool 1
    ...
row: 1 : 1 entries [562:562]
    ...
row: 2 : 2 entries [563:564]
    ...
row: 3 : 2 entries [565:566]
    ...
row: 4 : 2 entries [567:568]
    ...
row: 5 : 2 entries [569:570]
    ...
row: 6 : 1 entries [571:571]
    ...
row: 7 : 2 entries [572:573]
    ...
row: 8 : 2 entries [574:575]
    ...
row: 9 : 3 entries [576:578]
    ...
...

total time to read A matrix:       0.030590 sec

n 11051 # edges 22724
U=triu(A) time:        0.000387 sec
read A, create U memory usage: 0.0019023 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000294 sec
# triangles 17677

tricount time:         0.001235 sec (dot product method)
tri+prep time:         0.001916 sec (incl time to compute L and U)
compute C time:        0.001194 sec
reduce (C) time:       0.000042 sec
rate      11.86 million edges/sec (incl time for U=triu(A))
rate      18.40 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00190244 GB

----------------------------------- outer product method:
tricount time:         0.002200 sec (outer product method)
tri+prep time:         0.002495 sec (incl time to compute L)
compute C time:        0.002160 sec
reduce (C) time:       0.000040 sec
rate       9.11 million edges/sec (incl time for L=tril(A))
rate      10.33 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0019023 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon1_010526/oregon1_010526_adj.tsv.gz
--------------------------------------------------------------
ntuples: 46818
nrows 11174 ncols 11174
time to prune self-edges:     0.000061
time to build the graph with GrB_Matrix_build:     0.004221
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000718

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11174 ncols: 11174 max # entries: 46818
format: standard CSR vlen: 11174 nvec_nonempty: 11174 nvec: 11174 plen: 11174 vdim: 11174
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 46818 
row: 0 : 565 entries [0:564]
    column 189: bool 1
    column 192: bool 1
    column 198: bool 1
    column 201: bool 1
    column 215: bool 1
    column 217: bool 1
    column 224: bool 1
    column 229: bool 1
    column 248: bool 1
    column 251: bool 1
    column 268: bool 1
    column 276: bool 1
    column 282: bool 1
    column 293: bool 1
    column 294: bool 1
    column 325: bool 1
    column 337: bool 1
    column 341: bool 1
    column 353: bool 1
    column 361: bool 1
    column 363: bool 1
    column 364: bool 1
    column 366: bool 1
    column 378: bool 1
    column 400: bool 1
    column 401: bool 1
    column 413: bool 1
    column 423: bool 1
    column 426: bool 1
    column 455: bool 1
    ...
row: 1 : 1 entries [565:565]
    ...
row: 2 : 2 entries [566:567]
    ...
row: 3 : 2 entries [568:569]
    ...
row: 4 : 2 entries [570:571]
    ...
row: 5 : 2 entries [572:573]
    ...
row: 6 : 1 entries [574:574]
    ...
row: 7 : 2 entries [575:576]
    ...
row: 8 : 2 entries [577:578]
    ...
row: 9 : 3 entries [579:581]
    ...
...
matrix 11174 by 11174, 46818 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11174 ncols: 11174 max # entries: 46818
format: standard CSR vlen: 11174 nvec_nonempty: 11174 nvec: 11174 plen: 11174 vdim: 11174
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 46818 
row: 0 : 565 entries [0:564]
    column 189: bool 1
    column 192: bool 1
    column 198: bool 1
    column 201: bool 1
    column 215: bool 1
    column 217: bool 1
    column 224: bool 1
    column 229: bool 1
    column 248: bool 1
    column 251: bool 1
    column 268: bool 1
    column 276: bool 1
    column 282: bool 1
    column 293: bool 1
    column 294: bool 1
    column 325: bool 1
    column 337: bool 1
    column 341: bool 1
    column 353: bool 1
    column 361: bool 1
    column 363: bool 1
    column 364: bool 1
    column 366: bool 1
    column 378: bool 1
    column 400: bool 1
    column 401: bool 1
    column 413: bool 1
    column 423: bool 1
    column 426: bool 1
    column 455: bool 1
    ...
row: 1 : 1 entries [565:565]
    ...
row: 2 : 2 entries [566:567]
    ...
row: 3 : 2 entries [568:569]
    ...
row: 4 : 2 entries [570:571]
    ...
row: 5 : 2 entries [572:573]
    ...
row: 6 : 1 entries [574:574]
    ...
row: 7 : 2 entries [575:576]
    ...
row: 8 : 2 entries [577:578]
    ...
row: 9 : 3 entries [579:581]
    ...
...

total time to read A matrix:       0.031458 sec

n 11174 # edges 23409
U=triu(A) time:        0.000395 sec
read A, create U memory usage: 0.00195457 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000299 sec
# triangles 19894

tricount time:         0.001315 sec (dot product method)
tri+prep time:         0.002010 sec (incl time to compute L and U)
compute C time:        0.001270 sec
reduce (C) time:       0.000045 sec
rate      11.65 million edges/sec (incl time for U=triu(A))
rate      17.80 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00195471 GB

----------------------------------- outer product method:
tricount time:         0.002273 sec (outer product method)
tri+prep time:         0.002573 sec (incl time to compute L)
compute C time:        0.002230 sec
reduce (C) time:       0.000044 sec
rate       9.10 million edges/sec (incl time for L=tril(A))
rate      10.30 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00195457 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010331/oregon2_010331_adj.tsv.gz
--------------------------------------------------------------
ntuples: 62360
nrows 10900 ncols 10900
time to prune self-edges:     0.000081
time to build the graph with GrB_Matrix_build:     0.008352
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000871

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10900 ncols: 10900 max # entries: 62360
format: standard CSR vlen: 10900 nvec_nonempty: 10900 nvec: 10900 plen: 10900 vdim: 10900
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 62360 
row: 0 : 566 entries [0:565]
    column 184: bool 1
    column 187: bool 1
    column 193: bool 1
    column 196: bool 1
    column 209: bool 1
    column 211: bool 1
    column 218: bool 1
    column 223: bool 1
    column 241: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 316: bool 1
    column 329: bool 1
    column 333: bool 1
    column 345: bool 1
    column 353: bool 1
    column 355: bool 1
    column 356: bool 1
    column 358: bool 1
    column 370: bool 1
    column 392: bool 1
    column 393: bool 1
    column 405: bool 1
    column 415: bool 1
    column 418: bool 1
    column 442: bool 1
    column 447: bool 1
    ...
row: 1 : 1 entries [566:566]
    ...
row: 2 : 2 entries [567:568]
    ...
row: 3 : 2 entries [569:570]
    ...
row: 4 : 2 entries [571:572]
    ...
row: 5 : 2 entries [573:574]
    ...
row: 6 : 1 entries [575:575]
    ...
row: 7 : 2 entries [576:577]
    ...
row: 8 : 2 entries [578:579]
    ...
row: 9 : 3 entries [580:582]
    ...
...
matrix 10900 by 10900, 62360 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10900 ncols: 10900 max # entries: 62360
format: standard CSR vlen: 10900 nvec_nonempty: 10900 nvec: 10900 plen: 10900 vdim: 10900
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 62360 
row: 0 : 566 entries [0:565]
    column 184: bool 1
    column 187: bool 1
    column 193: bool 1
    column 196: bool 1
    column 209: bool 1
    column 211: bool 1
    column 218: bool 1
    column 223: bool 1
    column 241: bool 1
    column 261: bool 1
    column 269: bool 1
    column 275: bool 1
    column 286: bool 1
    column 287: bool 1
    column 316: bool 1
    column 329: bool 1
    column 333: bool 1
    column 345: bool 1
    column 353: bool 1
    column 355: bool 1
    column 356: bool 1
    column 358: bool 1
    column 370: bool 1
    column 392: bool 1
    column 393: bool 1
    column 405: bool 1
    column 415: bool 1
    column 418: bool 1
    column 442: bool 1
    column 447: bool 1
    ...
row: 1 : 1 entries [566:566]
    ...
row: 2 : 2 entries [567:568]
    ...
row: 3 : 2 entries [569:570]
    ...
row: 4 : 2 entries [571:572]
    ...
row: 5 : 2 entries [573:574]
    ...
row: 6 : 1 entries [575:575]
    ...
row: 7 : 2 entries [576:577]
    ...
row: 8 : 2 entries [578:579]
    ...
row: 9 : 3 entries [580:582]
    ...
...

total time to read A matrix:       0.044255 sec

n 10900 # edges 31180
U=triu(A) time:        0.000468 sec
read A, create U memory usage: 0.0025075 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000357 sec
# triangles 82856

tricount time:         0.002361 sec (dot product method)
tri+prep time:         0.003185 sec (incl time to compute L and U)
compute C time:        0.002269 sec
reduce (C) time:       0.000092 sec
rate       9.79 million edges/sec (incl time for U=triu(A))
rate      13.21 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00250765 GB

----------------------------------- outer product method:
tricount time:         0.003139 sec (outer product method)
tri+prep time:         0.003496 sec (incl time to compute L)
compute C time:        0.003049 sec
reduce (C) time:       0.000090 sec
rate       8.92 million edges/sec (incl time for L=tril(A))
rate       9.93 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0025075 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010407/oregon2_010407_adj.tsv.gz
--------------------------------------------------------------
ntuples: 61710
nrows 10981 ncols 10981
time to prune self-edges:     0.000080
time to build the graph with GrB_Matrix_build:     0.008267
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000869

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10981 ncols: 10981 max # entries: 61710
format: standard CSR vlen: 10981 nvec_nonempty: 10981 nvec: 10981 plen: 10981 vdim: 10981
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 61710 
row: 0 : 565 entries [0:564]
    column 187: bool 1
    column 190: bool 1
    column 196: bool 1
    column 199: bool 1
    column 212: bool 1
    column 214: bool 1
    column 222: bool 1
    column 226: bool 1
    column 244: bool 1
    column 247: bool 1
    column 264: bool 1
    column 272: bool 1
    column 278: bool 1
    column 289: bool 1
    column 290: bool 1
    column 319: bool 1
    column 332: bool 1
    column 336: bool 1
    column 348: bool 1
    column 356: bool 1
    column 358: bool 1
    column 359: bool 1
    column 361: bool 1
    column 373: bool 1
    column 395: bool 1
    column 396: bool 1
    column 408: bool 1
    column 418: bool 1
    column 421: bool 1
    column 445: bool 1
    ...
row: 1 : 1 entries [565:565]
    ...
row: 2 : 2 entries [566:567]
    ...
row: 3 : 2 entries [568:569]
    ...
row: 4 : 2 entries [570:571]
    ...
row: 5 : 2 entries [572:573]
    ...
row: 6 : 1 entries [574:574]
    ...
row: 7 : 2 entries [575:576]
    ...
row: 8 : 2 entries [577:578]
    ...
row: 9 : 3 entries [579:581]
    ...
...
matrix 10981 by 10981, 61710 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10981 ncols: 10981 max # entries: 61710
format: standard CSR vlen: 10981 nvec_nonempty: 10981 nvec: 10981 plen: 10981 vdim: 10981
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 61710 
row: 0 : 565 entries [0:564]
    column 187: bool 1
    column 190: bool 1
    column 196: bool 1
    column 199: bool 1
    column 212: bool 1
    column 214: bool 1
    column 222: bool 1
    column 226: bool 1
    column 244: bool 1
    column 247: bool 1
    column 264: bool 1
    column 272: bool 1
    column 278: bool 1
    column 289: bool 1
    column 290: bool 1
    column 319: bool 1
    column 332: bool 1
    column 336: bool 1
    column 348: bool 1
    column 356: bool 1
    column 358: bool 1
    column 359: bool 1
    column 361: bool 1
    column 373: bool 1
    column 395: bool 1
    column 396: bool 1
    column 408: bool 1
    column 418: bool 1
    column 421: bool 1
    column 445: bool 1
    ...
row: 1 : 1 entries [565:565]
    ...
row: 2 : 2 entries [566:567]
    ...
row: 3 : 2 entries [568:569]
    ...
row: 4 : 2 entries [570:571]
    ...
row: 5 : 2 entries [572:573]
    ...
row: 6 : 1 entries [574:574]
    ...
row: 7 : 2 entries [575:576]
    ...
row: 8 : 2 entries [577:578]
    ...
row: 9 : 3 entries [579:581]
    ...
...

total time to read A matrix:       0.043893 sec

n 10981 # edges 30855
U=triu(A) time:        0.000472 sec
read A, create U memory usage: 0.00248605 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000352 sec
# triangles 78138

tricount time:         0.002356 sec (dot product method)
tri+prep time:         0.003179 sec (incl time to compute L and U)
compute C time:        0.002267 sec
reduce (C) time:       0.000089 sec
rate       9.71 million edges/sec (incl time for U=triu(A))
rate      13.10 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00248619 GB

----------------------------------- outer product method:
tricount time:         0.003140 sec (outer product method)
tri+prep time:         0.003492 sec (incl time to compute L)
compute C time:        0.003053 sec
reduce (C) time:       0.000087 sec
rate       8.84 million edges/sec (incl time for L=tril(A))
rate       9.83 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00248605 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010414/oregon2_010414_adj.tsv.gz
--------------------------------------------------------------
ntuples: 63522
nrows 11019 ncols 11019
time to prune self-edges:     0.000082
time to build the graph with GrB_Matrix_build:     0.008506
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000894

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11019 ncols: 11019 max # entries: 63522
format: standard CSR vlen: 11019 nvec_nonempty: 11019 nvec: 11019 plen: 11019 vdim: 11019
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63522 
row: 0 : 566 entries [0:565]
    column 186: bool 1
    column 189: bool 1
    column 195: bool 1
    column 198: bool 1
    column 211: bool 1
    column 213: bool 1
    column 221: bool 1
    column 225: bool 1
    column 243: bool 1
    column 246: bool 1
    column 263: bool 1
    column 271: bool 1
    column 277: bool 1
    column 288: bool 1
    column 289: bool 1
    column 319: bool 1
    column 331: bool 1
    column 335: bool 1
    column 347: bool 1
    column 355: bool 1
    column 357: bool 1
    column 358: bool 1
    column 360: bool 1
    column 372: bool 1
    column 394: bool 1
    column 395: bool 1
    column 407: bool 1
    column 417: bool 1
    column 420: bool 1
    column 444: bool 1
    ...
row: 1 : 1 entries [566:566]
    ...
row: 2 : 2 entries [567:568]
    ...
row: 3 : 2 entries [569:570]
    ...
row: 4 : 2 entries [571:572]
    ...
row: 5 : 2 entries [573:574]
    ...
row: 6 : 1 entries [575:575]
    ...
row: 7 : 2 entries [576:577]
    ...
row: 8 : 2 entries [578:579]
    ...
row: 9 : 3 entries [580:582]
    ...
...
matrix 11019 by 11019, 63522 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11019 ncols: 11019 max # entries: 63522
format: standard CSR vlen: 11019 nvec_nonempty: 11019 nvec: 11019 plen: 11019 vdim: 11019
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63522 
row: 0 : 566 entries [0:565]
    column 186: bool 1
    column 189: bool 1
    column 195: bool 1
    column 198: bool 1
    column 211: bool 1
    column 213: bool 1
    column 221: bool 1
    column 225: bool 1
    column 243: bool 1
    column 246: bool 1
    column 263: bool 1
    column 271: bool 1
    column 277: bool 1
    column 288: bool 1
    column 289: bool 1
    column 319: bool 1
    column 331: bool 1
    column 335: bool 1
    column 347: bool 1
    column 355: bool 1
    column 357: bool 1
    column 358: bool 1
    column 360: bool 1
    column 372: bool 1
    column 394: bool 1
    column 395: bool 1
    column 407: bool 1
    column 417: bool 1
    column 420: bool 1
    column 444: bool 1
    ...
row: 1 : 1 entries [566:566]
    ...
row: 2 : 2 entries [567:568]
    ...
row: 3 : 2 entries [569:570]
    ...
row: 4 : 2 entries [571:572]
    ...
row: 5 : 2 entries [573:574]
    ...
row: 6 : 1 entries [575:575]
    ...
row: 7 : 2 entries [576:577]
    ...
row: 8 : 2 entries [578:579]
    ...
row: 9 : 3 entries [580:582]
    ...
...

total time to read A matrix:       0.044860 sec

n 11019 # edges 31761
U=triu(A) time:        0.000482 sec
read A, create U memory usage: 0.00255219 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000361 sec
# triangles 88905

tricount time:         0.002472 sec (dot product method)
tri+prep time:         0.003315 sec (incl time to compute L and U)
compute C time:        0.002378 sec
reduce (C) time:       0.000094 sec
rate       9.58 million edges/sec (incl time for U=triu(A))
rate      12.85 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00255234 GB

----------------------------------- outer product method:
tricount time:         0.003299 sec (outer product method)
tri+prep time:         0.003660 sec (incl time to compute L)
compute C time:        0.003207 sec
reduce (C) time:       0.000092 sec
rate       8.68 million edges/sec (incl time for L=tril(A))
rate       9.63 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00255219 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010421/oregon2_010421_adj.tsv.gz
--------------------------------------------------------------
ntuples: 63076
nrows 11080 ncols 11080
time to prune self-edges:     0.000082
time to build the graph with GrB_Matrix_build:     0.008483
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000859

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11080 ncols: 11080 max # entries: 63076
format: standard CSR vlen: 11080 nvec_nonempty: 11080 nvec: 11080 plen: 11080 vdim: 11080
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63076 
row: 0 : 576 entries [0:575]
    column 187: bool 1
    column 190: bool 1
    column 196: bool 1
    column 199: bool 1
    column 212: bool 1
    column 214: bool 1
    column 222: bool 1
    column 226: bool 1
    column 244: bool 1
    column 247: bool 1
    column 264: bool 1
    column 272: bool 1
    column 278: bool 1
    column 289: bool 1
    column 290: bool 1
    column 319: bool 1
    column 331: bool 1
    column 335: bool 1
    column 347: bool 1
    column 355: bool 1
    column 357: bool 1
    column 358: bool 1
    column 360: bool 1
    column 372: bool 1
    column 394: bool 1
    column 395: bool 1
    column 407: bool 1
    column 417: bool 1
    column 420: bool 1
    column 444: bool 1
    ...
row: 1 : 1 entries [576:576]
    ...
row: 2 : 2 entries [577:578]
    ...
row: 3 : 2 entries [579:580]
    ...
row: 4 : 2 entries [581:582]
    ...
row: 5 : 2 entries [583:584]
    ...
row: 6 : 1 entries [585:585]
    ...
row: 7 : 2 entries [586:587]
    ...
row: 8 : 2 entries [588:589]
    ...
row: 9 : 3 entries [590:592]
    ...
...
matrix 11080 by 11080, 63076 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11080 ncols: 11080 max # entries: 63076
format: standard CSR vlen: 11080 nvec_nonempty: 11080 nvec: 11080 plen: 11080 vdim: 11080
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63076 
row: 0 : 576 entries [0:575]
    column 187: bool 1
    column 190: bool 1
    column 196: bool 1
    column 199: bool 1
    column 212: bool 1
    column 214: bool 1
    column 222: bool 1
    column 226: bool 1
    column 244: bool 1
    column 247: bool 1
    column 264: bool 1
    column 272: bool 1
    column 278: bool 1
    column 289: bool 1
    column 290: bool 1
    column 319: bool 1
    column 331: bool 1
    column 335: bool 1
    column 347: bool 1
    column 355: bool 1
    column 357: bool 1
    column 358: bool 1
    column 360: bool 1
    column 372: bool 1
    column 394: bool 1
    column 395: bool 1
    column 407: bool 1
    column 417: bool 1
    column 420: bool 1
    column 444: bool 1
    ...
row: 1 : 1 entries [576:576]
    ...
row: 2 : 2 entries [577:578]
    ...
row: 3 : 2 entries [579:580]
    ...
row: 4 : 2 entries [581:582]
    ...
row: 5 : 2 entries [583:584]
    ...
row: 6 : 1 entries [585:585]
    ...
row: 7 : 2 entries [586:587]
    ...
row: 8 : 2 entries [588:589]
    ...
row: 9 : 3 entries [590:592]
    ...
...

total time to read A matrix:       0.044626 sec

n 11080 # edges 31538
U=triu(A) time:        0.000470 sec
read A, create U memory usage: 0.0025376 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000357 sec
# triangles 82129

tricount time:         0.002413 sec (dot product method)
tri+prep time:         0.003240 sec (incl time to compute L and U)
compute C time:        0.002321 sec
reduce (C) time:       0.000092 sec
rate       9.73 million edges/sec (incl time for U=triu(A))
rate      13.07 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00253774 GB

----------------------------------- outer product method:
tricount time:         0.003254 sec (outer product method)
tri+prep time:         0.003611 sec (incl time to compute L)
compute C time:        0.003164 sec
reduce (C) time:       0.000090 sec
rate       8.73 million edges/sec (incl time for L=tril(A))
rate       9.69 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0025376 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010428/oregon2_010428_adj.tsv.gz
--------------------------------------------------------------
ntuples: 62868
nrows 11113 ncols 11113
time to prune self-edges:     0.000081
time to build the graph with GrB_Matrix_build:     0.008435
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000881

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11113 ncols: 11113 max # entries: 62868
format: standard CSR vlen: 11113 nvec_nonempty: 11113 nvec: 11113 plen: 11113 vdim: 11113
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 62868 
row: 0 : 574 entries [0:573]
    column 182: bool 1
    column 185: bool 1
    column 191: bool 1
    column 194: bool 1
    column 207: bool 1
    column 209: bool 1
    column 217: bool 1
    column 221: bool 1
    column 239: bool 1
    column 242: bool 1
    column 259: bool 1
    column 267: bool 1
    column 273: bool 1
    column 284: bool 1
    column 285: bool 1
    column 315: bool 1
    column 327: bool 1
    column 331: bool 1
    column 343: bool 1
    column 351: bool 1
    column 353: bool 1
    column 354: bool 1
    column 356: bool 1
    column 368: bool 1
    column 390: bool 1
    column 391: bool 1
    column 403: bool 1
    column 413: bool 1
    column 416: bool 1
    column 439: bool 1
    ...
row: 1 : 1 entries [574:574]
    ...
row: 2 : 2 entries [575:576]
    ...
row: 3 : 2 entries [577:578]
    ...
row: 4 : 2 entries [579:580]
    ...
row: 5 : 2 entries [581:582]
    ...
row: 6 : 1 entries [583:583]
    ...
row: 7 : 2 entries [584:585]
    ...
row: 8 : 2 entries [586:587]
    ...
row: 9 : 3 entries [588:590]
    ...
...
matrix 11113 by 11113, 62868 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11113 ncols: 11113 max # entries: 62868
format: standard CSR vlen: 11113 nvec_nonempty: 11113 nvec: 11113 plen: 11113 vdim: 11113
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 62868 
row: 0 : 574 entries [0:573]
    column 182: bool 1
    column 185: bool 1
    column 191: bool 1
    column 194: bool 1
    column 207: bool 1
    column 209: bool 1
    column 217: bool 1
    column 221: bool 1
    column 239: bool 1
    column 242: bool 1
    column 259: bool 1
    column 267: bool 1
    column 273: bool 1
    column 284: bool 1
    column 285: bool 1
    column 315: bool 1
    column 327: bool 1
    column 331: bool 1
    column 343: bool 1
    column 351: bool 1
    column 353: bool 1
    column 354: bool 1
    column 356: bool 1
    column 368: bool 1
    column 390: bool 1
    column 391: bool 1
    column 403: bool 1
    column 413: bool 1
    column 416: bool 1
    column 439: bool 1
    ...
row: 1 : 1 entries [574:574]
    ...
row: 2 : 2 entries [575:576]
    ...
row: 3 : 2 entries [577:578]
    ...
row: 4 : 2 entries [579:580]
    ...
row: 5 : 2 entries [581:582]
    ...
row: 6 : 1 entries [583:583]
    ...
row: 7 : 2 entries [584:585]
    ...
row: 8 : 2 entries [586:587]
    ...
row: 9 : 3 entries [588:590]
    ...
...

total time to read A matrix:       0.044449 sec

n 11113 # edges 31434
U=triu(A) time:        0.000480 sec
read A, create U memory usage: 0.0025309 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000357 sec
# triangles 78000

tricount time:         0.002353 sec (dot product method)
tri+prep time:         0.003190 sec (incl time to compute L and U)
compute C time:        0.002263 sec
reduce (C) time:       0.000090 sec
rate       9.85 million edges/sec (incl time for U=triu(A))
rate      13.36 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00253105 GB

----------------------------------- outer product method:
tricount time:         0.003237 sec (outer product method)
tri+prep time:         0.003595 sec (incl time to compute L)
compute C time:        0.003149 sec
reduce (C) time:       0.000088 sec
rate       8.74 million edges/sec (incl time for L=tril(A))
rate       9.71 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0025309 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010505/oregon2_010505_adj.tsv.gz
--------------------------------------------------------------
ntuples: 61886
nrows 11157 ncols 11157
time to prune self-edges:     0.000080
time to build the graph with GrB_Matrix_build:     0.008237
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000874

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11157 ncols: 11157 max # entries: 61886
format: standard CSR vlen: 11157 nvec_nonempty: 11157 nvec: 11157 plen: 11157 vdim: 11157
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 61886 
row: 0 : 572 entries [0:571]
    column 186: bool 1
    column 189: bool 1
    column 195: bool 1
    column 198: bool 1
    column 211: bool 1
    column 213: bool 1
    column 220: bool 1
    column 224: bool 1
    column 242: bool 1
    column 245: bool 1
    column 262: bool 1
    column 270: bool 1
    column 276: bool 1
    column 287: bool 1
    column 288: bool 1
    column 318: bool 1
    column 330: bool 1
    column 334: bool 1
    column 346: bool 1
    column 354: bool 1
    column 356: bool 1
    column 357: bool 1
    column 359: bool 1
    column 371: bool 1
    column 393: bool 1
    column 394: bool 1
    column 406: bool 1
    column 416: bool 1
    column 419: bool 1
    column 442: bool 1
    ...
row: 1 : 1 entries [572:572]
    ...
row: 2 : 2 entries [573:574]
    ...
row: 3 : 2 entries [575:576]
    ...
row: 4 : 2 entries [577:578]
    ...
row: 5 : 2 entries [579:580]
    ...
row: 6 : 1 entries [581:581]
    ...
row: 7 : 2 entries [582:583]
    ...
row: 8 : 2 entries [584:585]
    ...
row: 9 : 3 entries [586:588]
    ...
...
matrix 11157 by 11157, 61886 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11157 ncols: 11157 max # entries: 61886
format: standard CSR vlen: 11157 nvec_nonempty: 11157 nvec: 11157 plen: 11157 vdim: 11157
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 61886 
row: 0 : 572 entries [0:571]
    column 186: bool 1
    column 189: bool 1
    column 195: bool 1
    column 198: bool 1
    column 211: bool 1
    column 213: bool 1
    column 220: bool 1
    column 224: bool 1
    column 242: bool 1
    column 245: bool 1
    column 262: bool 1
    column 270: bool 1
    column 276: bool 1
    column 287: bool 1
    column 288: bool 1
    column 318: bool 1
    column 330: bool 1
    column 334: bool 1
    column 346: bool 1
    column 354: bool 1
    column 356: bool 1
    column 357: bool 1
    column 359: bool 1
    column 371: bool 1
    column 393: bool 1
    column 394: bool 1
    column 406: bool 1
    column 416: bool 1
    column 419: bool 1
    column 442: bool 1
    ...
row: 1 : 1 entries [572:572]
    ...
row: 2 : 2 entries [573:574]
    ...
row: 3 : 2 entries [575:576]
    ...
row: 4 : 2 entries [577:578]
    ...
row: 5 : 2 entries [579:580]
    ...
row: 6 : 1 entries [581:581]
    ...
row: 7 : 2 entries [582:583]
    ...
row: 8 : 2 entries [584:585]
    ...
row: 9 : 3 entries [586:588]
    ...
...

total time to read A matrix:       0.043874 sec

n 11157 # edges 30943
U=triu(A) time:        0.000472 sec
read A, create U memory usage: 0.00249661 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000359 sec
# triangles 72182

tricount time:         0.002251 sec (dot product method)
tri+prep time:         0.003082 sec (incl time to compute L and U)
compute C time:        0.002164 sec
reduce (C) time:       0.000087 sec
rate      10.04 million edges/sec (incl time for U=triu(A))
rate      13.74 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00249675 GB

----------------------------------- outer product method:
tricount time:         0.003125 sec (outer product method)
tri+prep time:         0.003484 sec (incl time to compute L)
compute C time:        0.003040 sec
reduce (C) time:       0.000085 sec
rate       8.88 million edges/sec (incl time for L=tril(A))
rate       9.90 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00249661 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010512/oregon2_010512_adj.tsv.gz
--------------------------------------------------------------
ntuples: 62606
nrows 11260 ncols 11260
time to prune self-edges:     0.000081
time to build the graph with GrB_Matrix_build:     0.008377
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000881

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11260 ncols: 11260 max # entries: 62606
format: standard CSR vlen: 11260 nvec_nonempty: 11260 nvec: 11260 plen: 11260 vdim: 11260
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 62606 
row: 0 : 572 entries [0:571]
    column 187: bool 1
    column 190: bool 1
    column 196: bool 1
    column 199: bool 1
    column 212: bool 1
    column 214: bool 1
    column 221: bool 1
    column 225: bool 1
    column 243: bool 1
    column 246: bool 1
    column 263: bool 1
    column 271: bool 1
    column 277: bool 1
    column 288: bool 1
    column 289: bool 1
    column 319: bool 1
    column 331: bool 1
    column 335: bool 1
    column 347: bool 1
    column 355: bool 1
    column 357: bool 1
    column 358: bool 1
    column 360: bool 1
    column 372: bool 1
    column 394: bool 1
    column 395: bool 1
    column 407: bool 1
    column 417: bool 1
    column 420: bool 1
    column 444: bool 1
    ...
row: 1 : 1 entries [572:572]
    ...
row: 2 : 2 entries [573:574]
    ...
row: 3 : 2 entries [575:576]
    ...
row: 4 : 2 entries [577:578]
    ...
row: 5 : 2 entries [579:580]
    ...
row: 6 : 1 entries [581:581]
    ...
row: 7 : 2 entries [582:583]
    ...
row: 8 : 2 entries [584:585]
    ...
row: 9 : 3 entries [586:588]
    ...
...
matrix 11260 by 11260, 62606 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11260 ncols: 11260 max # entries: 62606
format: standard CSR vlen: 11260 nvec_nonempty: 11260 nvec: 11260 plen: 11260 vdim: 11260
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 62606 
row: 0 : 572 entries [0:571]
    column 187: bool 1
    column 190: bool 1
    column 196: bool 1
    column 199: bool 1
    column 212: bool 1
    column 214: bool 1
    column 221: bool 1
    column 225: bool 1
    column 243: bool 1
    column 246: bool 1
    column 263: bool 1
    column 271: bool 1
    column 277: bool 1
    column 288: bool 1
    column 289: bool 1
    column 319: bool 1
    column 331: bool 1
    column 335: bool 1
    column 347: bool 1
    column 355: bool 1
    column 357: bool 1
    column 358: bool 1
    column 360: bool 1
    column 372: bool 1
    column 394: bool 1
    column 395: bool 1
    column 407: bool 1
    column 417: bool 1
    column 420: bool 1
    column 444: bool 1
    ...
row: 1 : 1 entries [572:572]
    ...
row: 2 : 2 entries [573:574]
    ...
row: 3 : 2 entries [575:576]
    ...
row: 4 : 2 entries [577:578]
    ...
row: 5 : 2 entries [579:580]
    ...
row: 6 : 1 entries [581:581]
    ...
row: 7 : 2 entries [582:583]
    ...
row: 8 : 2 entries [584:585]
    ...
row: 9 : 3 entries [586:588]
    ...
...

total time to read A matrix:       0.044441 sec

n 11260 # edges 31303
U=triu(A) time:        0.000479 sec
read A, create U memory usage: 0.002525 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000362 sec
# triangles 72866

tricount time:         0.002274 sec (dot product method)
tri+prep time:         0.003115 sec (incl time to compute L and U)
compute C time:        0.002186 sec
reduce (C) time:       0.000088 sec
rate      10.05 million edges/sec (incl time for U=triu(A))
rate      13.77 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00252514 GB

----------------------------------- outer product method:
tricount time:         0.003198 sec (outer product method)
tri+prep time:         0.003560 sec (incl time to compute L)
compute C time:        0.003112 sec
reduce (C) time:       0.000086 sec
rate       8.79 million edges/sec (incl time for L=tril(A))
rate       9.79 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.002525 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010519/oregon2_010519_adj.tsv.gz
--------------------------------------------------------------
ntuples: 64574
nrows 11375 ncols 11375
time to prune self-edges:     0.000084
time to build the graph with GrB_Matrix_build:     0.008660
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000908

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11375 ncols: 11375 max # entries: 64574
format: standard CSR vlen: 11375 nvec_nonempty: 11375 nvec: 11375 plen: 11375 vdim: 11375
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 64574 
row: 0 : 567 entries [0:566]
    column 191: bool 1
    column 193: bool 1
    column 199: bool 1
    column 202: bool 1
    column 216: bool 1
    column 218: bool 1
    column 225: bool 1
    column 229: bool 1
    column 248: bool 1
    column 251: bool 1
    column 268: bool 1
    column 276: bool 1
    column 282: bool 1
    column 293: bool 1
    column 294: bool 1
    column 324: bool 1
    column 336: bool 1
    column 340: bool 1
    column 352: bool 1
    column 360: bool 1
    column 362: bool 1
    column 363: bool 1
    column 365: bool 1
    column 377: bool 1
    column 399: bool 1
    column 400: bool 1
    column 412: bool 1
    column 422: bool 1
    column 425: bool 1
    column 449: bool 1
    ...
row: 1 : 1 entries [567:567]
    ...
row: 2 : 2 entries [568:569]
    ...
row: 3 : 2 entries [570:571]
    ...
row: 4 : 2 entries [572:573]
    ...
row: 5 : 2 entries [574:575]
    ...
row: 6 : 1 entries [576:576]
    ...
row: 7 : 2 entries [577:578]
    ...
row: 8 : 2 entries [579:580]
    ...
row: 9 : 3 entries [581:583]
    ...
...
matrix 11375 by 11375, 64574 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11375 ncols: 11375 max # entries: 64574
format: standard CSR vlen: 11375 nvec_nonempty: 11375 nvec: 11375 plen: 11375 vdim: 11375
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 64574 
row: 0 : 567 entries [0:566]
    column 191: bool 1
    column 193: bool 1
    column 199: bool 1
    column 202: bool 1
    column 216: bool 1
    column 218: bool 1
    column 225: bool 1
    column 229: bool 1
    column 248: bool 1
    column 251: bool 1
    column 268: bool 1
    column 276: bool 1
    column 282: bool 1
    column 293: bool 1
    column 294: bool 1
    column 324: bool 1
    column 336: bool 1
    column 340: bool 1
    column 352: bool 1
    column 360: bool 1
    column 362: bool 1
    column 363: bool 1
    column 365: bool 1
    column 377: bool 1
    column 399: bool 1
    column 400: bool 1
    column 412: bool 1
    column 422: bool 1
    column 425: bool 1
    column 449: bool 1
    ...
row: 1 : 1 entries [567:567]
    ...
row: 2 : 2 entries [568:569]
    ...
row: 3 : 2 entries [570:571]
    ...
row: 4 : 2 entries [572:573]
    ...
row: 5 : 2 entries [574:575]
    ...
row: 6 : 1 entries [576:576]
    ...
row: 7 : 2 entries [577:578]
    ...
row: 8 : 2 entries [579:580]
    ...
row: 9 : 3 entries [581:583]
    ...
...

total time to read A matrix:       0.045772 sec

n 11375 # edges 32287
U=triu(A) time:        0.000490 sec
read A, create U memory usage: 0.00259861 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000370 sec
# triangles 83709

tricount time:         0.002453 sec (dot product method)
tri+prep time:         0.003313 sec (incl time to compute L and U)
compute C time:        0.002360 sec
reduce (C) time:       0.000092 sec
rate       9.74 million edges/sec (incl time for U=triu(A))
rate      13.16 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00259875 GB

----------------------------------- outer product method:
tricount time:         0.003384 sec (outer product method)
tri+prep time:         0.003754 sec (incl time to compute L)
compute C time:        0.003293 sec
reduce (C) time:       0.000091 sec
rate       8.60 million edges/sec (incl time for L=tril(A))
rate       9.54 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00259861 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/oregon2_010526/oregon2_010526_adj.tsv.gz
--------------------------------------------------------------
ntuples: 65460
nrows 11461 ncols 11461
time to prune self-edges:     0.000085
time to build the graph with GrB_Matrix_build:     0.008765
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000922

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 11461 ncols: 11461 max # entries: 65460
format: standard CSR vlen: 11461 nvec_nonempty: 11461 nvec: 11461 plen: 11461 vdim: 11461
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 65460 
row: 0 : 583 entries [0:582]
    column 191: bool 1
    column 194: bool 1
    column 200: bool 1
    column 203: bool 1
    column 217: bool 1
    column 219: bool 1
    column 227: bool 1
    column 232: bool 1
    column 251: bool 1
    column 254: bool 1
    column 271: bool 1
    column 279: bool 1
    column 285: bool 1
    column 296: bool 1
    column 297: bool 1
    column 328: bool 1
    column 341: bool 1
    column 345: bool 1
    column 357: bool 1
    column 365: bool 1
    column 367: bool 1
    column 368: bool 1
    column 370: bool 1
    column 382: bool 1
    column 404: bool 1
    column 405: bool 1
    column 417: bool 1
    column 427: bool 1
    column 430: bool 1
    column 454: bool 1
    ...
row: 1 : 1 entries [583:583]
    ...
row: 2 : 2 entries [584:585]
    ...
row: 3 : 2 entries [586:587]
    ...
row: 4 : 2 entries [588:589]
    ...
row: 5 : 2 entries [590:591]
    ...
row: 6 : 1 entries [592:592]
    ...
row: 7 : 2 entries [593:594]
    ...
row: 8 : 3 entries [595:597]
    ...
row: 9 : 3 entries [598:600]
    ...
...
matrix 11461 by 11461, 65460 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 11461 ncols: 11461 max # entries: 65460
format: standard CSR vlen: 11461 nvec_nonempty: 11461 nvec: 11461 plen: 11461 vdim: 11461
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 65460 
row: 0 : 583 entries [0:582]
    column 191: bool 1
    column 194: bool 1
    column 200: bool 1
    column 203: bool 1
    column 217: bool 1
    column 219: bool 1
    column 227: bool 1
    column 232: bool 1
    column 251: bool 1
    column 254: bool 1
    column 271: bool 1
    column 279: bool 1
    column 285: bool 1
    column 296: bool 1
    column 297: bool 1
    column 328: bool 1
    column 341: bool 1
    column 345: bool 1
    column 357: bool 1
    column 365: bool 1
    column 367: bool 1
    column 368: bool 1
    column 370: bool 1
    column 382: bool 1
    column 404: bool 1
    column 405: bool 1
    column 417: bool 1
    column 427: bool 1
    column 430: bool 1
    column 454: bool 1
    ...
row: 1 : 1 entries [583:583]
    ...
row: 2 : 2 entries [584:585]
    ...
row: 3 : 2 entries [586:587]
    ...
row: 4 : 2 entries [588:589]
    ...
row: 5 : 2 entries [590:591]
    ...
row: 6 : 1 entries [592:592]
    ...
row: 7 : 2 entries [593:594]
    ...
row: 8 : 3 entries [595:597]
    ...
row: 9 : 3 entries [598:600]
    ...
...

total time to read A matrix:       0.046718 sec

n 11461 # edges 32730
U=triu(A) time:        0.000499 sec
read A, create U memory usage: 0.00263257 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000385 sec
# triangles 89541

tricount time:         0.002519 sec (dot product method)
tri+prep time:         0.003402 sec (incl time to compute L and U)
compute C time:        0.002424 sec
reduce (C) time:       0.000095 sec
rate       9.62 million edges/sec (incl time for U=triu(A))
rate      13.00 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00263271 GB

----------------------------------- outer product method:
tricount time:         0.003454 sec (outer product method)
tri+prep time:         0.003839 sec (incl time to compute L)
compute C time:        0.003361 sec
reduce (C) time:       0.000093 sec
rate       8.53 million edges/sec (incl time for L=tril(A))
rate       9.48 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00263257 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella04/p2p-Gnutella04_adj.tsv.gz
--------------------------------------------------------------
ntuples: 79988
nrows 10876 ncols 10876
time to prune self-edges:     0.000103
time to build the graph with GrB_Matrix_build:     0.007416
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.001084

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 10876 ncols: 10876 max # entries: 79988
format: standard CSR vlen: 10876 nvec_nonempty: 10876 nvec: 10876 plen: 10876 vdim: 10876
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 79988 
row: 0 : 17 entries [0:16]
    column 1: bool 1
    column 2: bool 1
    column 627: bool 1
    column 1083: bool 1
    column 1988: bool 1
    column 2313: bool 1
    column 2954: bool 1
    column 3099: bool 1
    column 3565: bool 1
    column 4210: bool 1
    column 5321: bool 1
    column 5410: bool 1
    column 6432: bool 1
    column 6480: bool 1
    column 7543: bool 1
    column 8654: bool 1
    column 9765: bool 1
row: 1 : 14 entries [17:30]
    column 0: bool 1
    column 989: bool 1
    column 1100: bool 1
    column 1211: bool 1
    column 1322: bool 1
    column 1433: bool 1
    column 1447: bool 1
    column 1544: bool 1
    column 1655: bool 1
    column 1766: bool 1
    column 1877: bool 1
    column 1988: bool 1
    column 6862: bool 1
    ...
row: 2 : 14 entries [31:44]
    ...
row: 3 : 4 entries [45:48]
    ...
row: 4 : 2 entries [49:50]
    ...
row: 5 : 11 entries [51:61]
    ...
row: 6 : 1 entries [62:62]
    ...
row: 7 : 1 entries [63:63]
    ...
row: 8 : 1 entries [64:64]
    ...
row: 9 : 2 entries [65:66]
    ...
...
matrix 10876 by 10876, 79988 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 10876 ncols: 10876 max # entries: 79988
format: standard CSR vlen: 10876 nvec_nonempty: 10876 nvec: 10876 plen: 10876 vdim: 10876
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 79988 
row: 0 : 17 entries [0:16]
    column 1: bool 1
    column 2: bool 1
    column 627: bool 1
    column 1083: bool 1
    column 1988: bool 1
    column 2313: bool 1
    column 2954: bool 1
    column 3099: bool 1
    column 3565: bool 1
    column 4210: bool 1
    column 5321: bool 1
    column 5410: bool 1
    column 6432: bool 1
    column 6480: bool 1
    column 7543: bool 1
    column 8654: bool 1
    column 9765: bool 1
row: 1 : 14 entries [17:30]
    column 0: bool 1
    column 989: bool 1
    column 1100: bool 1
    column 1211: bool 1
    column 1322: bool 1
    column 1433: bool 1
    column 1447: bool 1
    column 1544: bool 1
    column 1655: bool 1
    column 1766: bool 1
    column 1877: bool 1
    column 1988: bool 1
    column 6862: bool 1
    ...
row: 2 : 14 entries [31:44]
    ...
row: 3 : 4 entries [45:48]
    ...
row: 4 : 2 entries [49:50]
    ...
row: 5 : 11 entries [51:61]
    ...
row: 6 : 1 entries [62:62]
    ...
row: 7 : 1 entries [63:63]
    ...
row: 8 : 1 entries [64:64]
    ...
row: 9 : 2 entries [65:66]
    ...
...

total time to read A matrix:       0.053200 sec

n 10876 # edges 39994
U=triu(A) time:        0.000624 sec
read A, create U memory usage: 0.00314154 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000424 sec
# triangles 934

tricount time:         0.001354 sec (dot product method)
tri+prep time:         0.002401 sec (incl time to compute L and U)
compute C time:        0.001345 sec
reduce (C) time:       0.000008 sec
rate      16.66 million edges/sec (incl time for U=triu(A))
rate      29.55 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00314168 GB

----------------------------------- outer product method:
tricount time:         0.000909 sec (outer product method)
tri+prep time:         0.001333 sec (incl time to compute L)
compute C time:        0.000903 sec
reduce (C) time:       0.000007 sec
rate      29.99 million edges/sec (incl time for L=tril(A))
rate      43.98 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00314154 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella05/p2p-Gnutella05_adj.tsv.gz
--------------------------------------------------------------
ntuples: 63678
nrows 8846 ncols 8846
time to prune self-edges:     0.000083
time to build the graph with GrB_Matrix_build:     0.008375
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000859

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 8846 ncols: 8846 max # entries: 63678
format: standard CSR vlen: 8846 nvec_nonempty: 8846 nvec: 8846 plen: 8846 vdim: 8846
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63678 
row: 0 : 13 entries [0:12]
    column 1: bool 1
    column 2: bool 1
    column 1112: bool 1
    column 2223: bool 1
    column 2512: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5262: bool 1
    column 5293: bool 1
    column 5556: bool 1
    column 6667: bool 1
    column 7778: bool 1
    column 8735: bool 1
row: 1 : 18 entries [13:30]
    column 0: bool 1
    column 104: bool 1
    column 240: bool 1
    column 577: bool 1
    column 977: bool 1
    column 1084: bool 1
    column 1086: bool 1
    column 1191: bool 1
    column 2316: bool 1
    column 2318: bool 1
    column 2336: bool 1
    column 2587: bool 1
    column 2588: bool 1
    column 2589: bool 1
    column 2590: bool 1
    column 2718: bool 1
    column 3136: bool 1
    ...
row: 2 : 16 entries [31:46]
    ...
row: 3 : 1 entries [47:47]
    ...
row: 4 : 5 entries [48:52]
    ...
row: 5 : 13 entries [53:65]
    ...
row: 6 : 19 entries [66:84]
    ...
row: 7 : 7 entries [85:91]
    ...
row: 8 : 4 entries [92:95]
    ...
row: 9 : 14 entries [96:109]
    ...
...
matrix 8846 by 8846, 63678 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 8846 ncols: 8846 max # entries: 63678
format: standard CSR vlen: 8846 nvec_nonempty: 8846 nvec: 8846 plen: 8846 vdim: 8846
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63678 
row: 0 : 13 entries [0:12]
    column 1: bool 1
    column 2: bool 1
    column 1112: bool 1
    column 2223: bool 1
    column 2512: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5262: bool 1
    column 5293: bool 1
    column 5556: bool 1
    column 6667: bool 1
    column 7778: bool 1
    column 8735: bool 1
row: 1 : 18 entries [13:30]
    column 0: bool 1
    column 104: bool 1
    column 240: bool 1
    column 577: bool 1
    column 977: bool 1
    column 1084: bool 1
    column 1086: bool 1
    column 1191: bool 1
    column 2316: bool 1
    column 2318: bool 1
    column 2336: bool 1
    column 2587: bool 1
    column 2588: bool 1
    column 2589: bool 1
    column 2590: bool 1
    column 2718: bool 1
    column 3136: bool 1
    ...
row: 2 : 16 entries [31:46]
    ...
row: 3 : 1 entries [47:47]
    ...
row: 4 : 5 entries [48:52]
    ...
row: 5 : 13 entries [53:65]
    ...
row: 6 : 19 entries [66:84]
    ...
row: 7 : 7 entries [85:91]
    ...
row: 8 : 4 entries [92:95]
    ...
row: 9 : 14 entries [96:109]
    ...
...

total time to read A matrix:       0.044970 sec

n 8846 # edges 31839
U=triu(A) time:        0.000505 sec
read A, create U memory usage: 0.00250566 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000341 sec
# triangles 1112

tricount time:         0.001116 sec (dot product method)
tri+prep time:         0.001962 sec (incl time to compute L and U)
compute C time:        0.001108 sec
reduce (C) time:       0.000008 sec
rate      16.23 million edges/sec (incl time for U=triu(A))
rate      28.54 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0025058 GB

----------------------------------- outer product method:
tricount time:         0.000759 sec (outer product method)
tri+prep time:         0.001101 sec (incl time to compute L)
compute C time:        0.000753 sec
reduce (C) time:       0.000006 sec
rate      28.93 million edges/sec (incl time for L=tril(A))
rate      41.94 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00250566 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella06/p2p-Gnutella06_adj.tsv.gz
--------------------------------------------------------------
ntuples: 63050
nrows 8717 ncols 8717
time to prune self-edges:     0.000082
time to build the graph with GrB_Matrix_build:     0.008354
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000850

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 8717 ncols: 8717 max # entries: 63050
format: standard CSR vlen: 8717 nvec_nonempty: 8717 nvec: 8717 plen: 8717 vdim: 8717
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63050 
row: 0 : 12 entries [0:11]
    column 1: bool 1
    column 2: bool 1
    column 712: bool 1
    column 1112: bool 1
    column 1780: bool 1
    column 2223: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5556: bool 1
    column 6667: bool 1
    column 7778: bool 1
    column 8606: bool 1
row: 1 : 4 entries [12:15]
    column 0: bool 1
    column 2993: bool 1
    column 5399: bool 1
    column 8692: bool 1
row: 2 : 17 entries [16:32]
    column 0: bool 1
    column 68: bool 1
    column 780: bool 1
    column 907: bool 1
    column 1949: bool 1
    column 1950: bool 1
    column 1951: bool 1
    column 1952: bool 1
    column 1953: bool 1
    column 2137: bool 1
    column 2993: bool 1
    column 3896: bool 1
    column 4087: bool 1
    column 5068: bool 1
    ...
row: 3 : 13 entries [33:45]
    ...
row: 4 : 6 entries [46:51]
    ...
row: 5 : 12 entries [52:63]
    ...
row: 6 : 22 entries [64:85]
    ...
row: 7 : 10 entries [86:95]
    ...
row: 8 : 6 entries [96:101]
    ...
row: 9 : 9 entries [102:110]
    ...
...
matrix 8717 by 8717, 63050 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 8717 ncols: 8717 max # entries: 63050
format: standard CSR vlen: 8717 nvec_nonempty: 8717 nvec: 8717 plen: 8717 vdim: 8717
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63050 
row: 0 : 12 entries [0:11]
    column 1: bool 1
    column 2: bool 1
    column 712: bool 1
    column 1112: bool 1
    column 1780: bool 1
    column 2223: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5556: bool 1
    column 6667: bool 1
    column 7778: bool 1
    column 8606: bool 1
row: 1 : 4 entries [12:15]
    column 0: bool 1
    column 2993: bool 1
    column 5399: bool 1
    column 8692: bool 1
row: 2 : 17 entries [16:32]
    column 0: bool 1
    column 68: bool 1
    column 780: bool 1
    column 907: bool 1
    column 1949: bool 1
    column 1950: bool 1
    column 1951: bool 1
    column 1952: bool 1
    column 1953: bool 1
    column 2137: bool 1
    column 2993: bool 1
    column 3896: bool 1
    column 4087: bool 1
    column 5068: bool 1
    ...
row: 3 : 13 entries [33:45]
    ...
row: 4 : 6 entries [46:51]
    ...
row: 5 : 12 entries [52:63]
    ...
row: 6 : 22 entries [64:85]
    ...
row: 7 : 10 entries [86:95]
    ...
row: 8 : 6 entries [96:101]
    ...
row: 9 : 9 entries [102:110]
    ...
...

total time to read A matrix:       0.044395 sec

n 8717 # edges 31525
U=triu(A) time:        0.000498 sec
read A, create U memory usage: 0.00247995 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000340 sec
# triangles 1142

tricount time:         0.001151 sec (dot product method)
tri+prep time:         0.001989 sec (incl time to compute L and U)
compute C time:        0.001142 sec
reduce (C) time:       0.000009 sec
rate      15.85 million edges/sec (incl time for U=triu(A))
rate      27.38 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0024801 GB

----------------------------------- outer product method:
tricount time:         0.000745 sec (outer product method)
tri+prep time:         0.001085 sec (incl time to compute L)
compute C time:        0.000739 sec
reduce (C) time:       0.000007 sec
rate      29.05 million edges/sec (incl time for L=tril(A))
rate      42.31 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00247995 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella08/p2p-Gnutella08_adj.tsv.gz
--------------------------------------------------------------
ntuples: 41554
nrows 6301 ncols 6301
time to prune self-edges:     0.000055
time to build the graph with GrB_Matrix_build:     0.003721
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000579

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 6301 ncols: 6301 max # entries: 41554
format: standard CSR vlen: 6301 nvec_nonempty: 6301 nvec: 6301 plen: 6301 vdim: 6301
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 41554 
row: 0 : 10 entries [0:9]
    column 1: bool 1
    column 2: bool 1
    column 1112: bool 1
    column 2223: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5556: bool 1
    column 5968: bool 1
    column 6079: bool 1
    column 6190: bool 1
row: 1 : 1 entries [10:10]
    column 0: bool 1
row: 2 : 7 entries [11:17]
    column 0: bool 1
    column 546: bool 1
    column 1176: bool 1
    column 1276: bool 1
    column 1436: bool 1
    column 1867: bool 1
    column 3571: bool 1
row: 3 : 4 entries [18:21]
    column 1133: bool 1
    column 1652: bool 1
    column 2569: bool 1
    column 6279: bool 1
row: 4 : 2 entries [22:23]
    column 245: bool 1
    column 6300: bool 1
row: 5 : 20 entries [24:43]
    column 82: bool 1
    column 115: bool 1
    column 195: bool 1
    column 326: bool 1
    column 882: bool 1
    column 980: bool 1
    ...
row: 6 : 13 entries [44:56]
    ...
row: 7 : 4 entries [57:60]
    ...
row: 8 : 12 entries [61:72]
    ...
row: 9 : 13 entries [73:85]
    ...
...
matrix 6301 by 6301, 41554 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 6301 ncols: 6301 max # entries: 41554
format: standard CSR vlen: 6301 nvec_nonempty: 6301 nvec: 6301 plen: 6301 vdim: 6301
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 41554 
row: 0 : 10 entries [0:9]
    column 1: bool 1
    column 2: bool 1
    column 1112: bool 1
    column 2223: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5556: bool 1
    column 5968: bool 1
    column 6079: bool 1
    column 6190: bool 1
row: 1 : 1 entries [10:10]
    column 0: bool 1
row: 2 : 7 entries [11:17]
    column 0: bool 1
    column 546: bool 1
    column 1176: bool 1
    column 1276: bool 1
    column 1436: bool 1
    column 1867: bool 1
    column 3571: bool 1
row: 3 : 4 entries [18:21]
    column 1133: bool 1
    column 1652: bool 1
    column 2569: bool 1
    column 6279: bool 1
row: 4 : 2 entries [22:23]
    column 245: bool 1
    column 6300: bool 1
row: 5 : 20 entries [24:43]
    column 82: bool 1
    column 115: bool 1
    column 195: bool 1
    column 326: bool 1
    column 882: bool 1
    column 980: bool 1
    ...
row: 6 : 13 entries [44:56]
    ...
row: 7 : 4 entries [57:60]
    ...
row: 8 : 12 entries [61:72]
    ...
row: 9 : 13 entries [73:85]
    ...
...

total time to read A matrix:       0.027966 sec

n 6301 # edges 20777
U=triu(A) time:        0.000344 sec
read A, create U memory usage: 0.00164811 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000239 sec
# triangles 2383

tricount time:         0.000849 sec (dot product method)
tri+prep time:         0.001432 sec (incl time to compute L and U)
compute C time:        0.000837 sec
reduce (C) time:       0.000012 sec
rate      14.50 million edges/sec (incl time for U=triu(A))
rate      24.47 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00164826 GB

----------------------------------- outer product method:
tricount time:         0.000531 sec (outer product method)
tri+prep time:         0.000771 sec (incl time to compute L)
compute C time:        0.000521 sec
reduce (C) time:       0.000010 sec
rate      26.96 million edges/sec (incl time for L=tril(A))
rate      39.10 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00164811 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella09/p2p-Gnutella09_adj.tsv.gz
--------------------------------------------------------------
ntuples: 52026
nrows 8114 ncols 8114
time to prune self-edges:     0.000068
time to build the graph with GrB_Matrix_build:     0.004697
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000727

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 8114 ncols: 8114 max # entries: 52026
format: standard CSR vlen: 8114 nvec_nonempty: 8114 nvec: 8114 plen: 8114 vdim: 8114
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 52026 
row: 0 : 11 entries [0:10]
    column 1: bool 1
    column 2: bool 1
    column 888: bool 1
    column 1112: bool 1
    column 2223: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5556: bool 1
    column 6667: bool 1
    column 7778: bool 1
    column 8003: bool 1
row: 1 : 9 entries [11:19]
    column 0: bool 1
    column 673: bool 1
    column 2722: bool 1
    column 3007: bool 1
    column 3995: bool 1
    column 6011: bool 1
    column 6915: bool 1
    column 7466: bool 1
    column 7665: bool 1
row: 2 : 12 entries [20:31]
    column 0: bool 1
    column 185: bool 1
    column 640: bool 1
    column 1156: bool 1
    column 1157: bool 1
    column 1159: bool 1
    column 1160: bool 1
    column 1161: bool 1
    column 1162: bool 1
    column 1524: bool 1
    ...
row: 3 : 5 entries [32:36]
    ...
row: 4 : 4 entries [37:40]
    ...
row: 5 : 12 entries [41:52]
    ...
row: 6 : 12 entries [53:64]
    ...
row: 7 : 12 entries [65:76]
    ...
row: 8 : 6 entries [77:82]
    ...
row: 9 : 3 entries [83:85]
    ...
...
matrix 8114 by 8114, 52026 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 8114 ncols: 8114 max # entries: 52026
format: standard CSR vlen: 8114 nvec_nonempty: 8114 nvec: 8114 plen: 8114 vdim: 8114
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 52026 
row: 0 : 11 entries [0:10]
    column 1: bool 1
    column 2: bool 1
    column 888: bool 1
    column 1112: bool 1
    column 2223: bool 1
    column 3334: bool 1
    column 4445: bool 1
    column 5556: bool 1
    column 6667: bool 1
    column 7778: bool 1
    column 8003: bool 1
row: 1 : 9 entries [11:19]
    column 0: bool 1
    column 673: bool 1
    column 2722: bool 1
    column 3007: bool 1
    column 3995: bool 1
    column 6011: bool 1
    column 6915: bool 1
    column 7466: bool 1
    column 7665: bool 1
row: 2 : 12 entries [20:31]
    column 0: bool 1
    column 185: bool 1
    column 640: bool 1
    column 1156: bool 1
    column 1157: bool 1
    column 1159: bool 1
    column 1160: bool 1
    column 1161: bool 1
    column 1162: bool 1
    column 1524: bool 1
    ...
row: 3 : 5 entries [32:36]
    ...
row: 4 : 4 entries [37:40]
    ...
row: 5 : 12 entries [41:52]
    ...
row: 6 : 12 entries [53:64]
    ...
row: 7 : 12 entries [65:76]
    ...
row: 8 : 6 entries [77:82]
    ...
row: 9 : 3 entries [83:85]
    ...
...

total time to read A matrix:       0.034733 sec

n 8114 # edges 26013
U=triu(A) time:        0.000428 sec
read A, create U memory usage: 0.00206862 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000293 sec
# triangles 2354

tricount time:         0.000937 sec (dot product method)
tri+prep time:         0.001658 sec (incl time to compute L and U)
compute C time:        0.000926 sec
reduce (C) time:       0.000012 sec
rate      15.69 million edges/sec (incl time for U=triu(A))
rate      27.75 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00206876 GB

----------------------------------- outer product method:
tricount time:         0.000634 sec (outer product method)
tri+prep time:         0.000927 sec (incl time to compute L)
compute C time:        0.000624 sec
reduce (C) time:       0.000010 sec
rate      28.06 million edges/sec (incl time for L=tril(A))
rate      41.04 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00206862 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella24/p2p-Gnutella24_adj.tsv.gz
--------------------------------------------------------------
ntuples: 130738
nrows 26518 ncols 26518
time to prune self-edges:     0.000167
time to build the graph with GrB_Matrix_build:     0.024601
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.002031

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 26518 ncols: 26518 max # entries: 130738
format: standard CSR vlen: 26518 nvec_nonempty: 26518 nvec: 26518 plen: 26518 vdim: 26518
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 130738 
row: 0 : 13 entries [0:12]
    column 1: bool 1
    column 11112: bool 1
    column 12033: bool 1
    column 18741: bool 1
    column 18746: bool 1
    column 19852: bool 1
    column 20963: bool 1
    column 22074: bool 1
    column 23185: bool 1
    column 24296: bool 1
    column 24374: bool 1
    column 25407: bool 1
    column 26393: bool 1
row: 1 : 1 entries [13:13]
    column 0: bool 1
row: 2 : 19 entries [14:32]
    column 1113: bool 1
    column 1713: bool 1
    column 2224: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    column 5595: bool 1
    column 6668: bool 1
    column 7779: bool 1
    column 8051: bool 1
    column 8890: bool 1
    column 9250: bool 1
    column 10001: bool 1
    column 11113: bool 1
    column 14361: bool 1
    column 17669: bool 1
    ...
row: 3 : 20 entries [33:52]
    ...
row: 4 : 8 entries [53:60]
    ...
row: 5 : 11 entries [61:71]
    ...
row: 6 : 1 entries [72:72]
    ...
row: 7 : 1 entries [73:73]
    ...
row: 8 : 17 entries [74:90]
    ...
row: 9 : 14 entries [91:104]
    ...
...
matrix 26518 by 26518, 130738 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 26518 ncols: 26518 max # entries: 130738
format: standard CSR vlen: 26518 nvec_nonempty: 26518 nvec: 26518 plen: 26518 vdim: 26518
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 130738 
row: 0 : 13 entries [0:12]
    column 1: bool 1
    column 11112: bool 1
    column 12033: bool 1
    column 18741: bool 1
    column 18746: bool 1
    column 19852: bool 1
    column 20963: bool 1
    column 22074: bool 1
    column 23185: bool 1
    column 24296: bool 1
    column 24374: bool 1
    column 25407: bool 1
    column 26393: bool 1
row: 1 : 1 entries [13:13]
    column 0: bool 1
row: 2 : 19 entries [14:32]
    column 1113: bool 1
    column 1713: bool 1
    column 2224: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    column 5595: bool 1
    column 6668: bool 1
    column 7779: bool 1
    column 8051: bool 1
    column 8890: bool 1
    column 9250: bool 1
    column 10001: bool 1
    column 11113: bool 1
    column 14361: bool 1
    column 17669: bool 1
    ...
row: 3 : 20 entries [33:52]
    ...
row: 4 : 8 entries [53:60]
    ...
row: 5 : 11 entries [61:71]
    ...
row: 6 : 1 entries [72:72]
    ...
row: 7 : 1 entries [73:73]
    ...
row: 8 : 17 entries [74:90]
    ...
row: 9 : 14 entries [91:104]
    ...
...

total time to read A matrix:       0.100226 sec

n 26518 # edges 65369
U=triu(A) time:        0.001157 sec
read A, create U memory usage: 0.00534394 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000795 sec
# triangles 986

tricount time:         0.002112 sec (dot product method)
tri+prep time:         0.004065 sec (incl time to compute L and U)
compute C time:        0.002104 sec
reduce (C) time:       0.000009 sec
rate      16.08 million edges/sec (incl time for U=triu(A))
rate      30.95 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00534409 GB

----------------------------------- outer product method:
tricount time:         0.001505 sec (outer product method)
tri+prep time:         0.002301 sec (incl time to compute L)
compute C time:        0.001499 sec
reduce (C) time:       0.000007 sec
rate      28.41 million edges/sec (incl time for L=tril(A))
rate      43.42 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00534394 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella25/p2p-Gnutella25_adj.tsv.gz
--------------------------------------------------------------
ntuples: 109410
nrows 22687 ncols 22687
time to prune self-edges:     0.000140
time to build the graph with GrB_Matrix_build:     0.010202
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.001701

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 22687 ncols: 22687 max # entries: 109410
format: standard CSR vlen: 22687 nvec_nonempty: 22687 nvec: 22687 plen: 22687 vdim: 22687
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 109410 
row: 0 : 11 entries [0:10]
    column 1: bool 1
    column 11112: bool 1
    column 12868: bool 1
    column 12936: bool 1
    column 14910: bool 1
    column 16021: bool 1
    column 17132: bool 1
    column 18243: bool 1
    column 19354: bool 1
    column 20465: bool 1
    column 21576: bool 1
row: 1 : 2 entries [11:12]
    column 0: bool 1
    column 2256: bool 1
row: 2 : 11 entries [13:23]
    column 1113: bool 1
    column 2224: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    column 6668: bool 1
    column 7779: bool 1
    column 8890: bool 1
    column 10001: bool 1
    column 11113: bool 1
    column 15686: bool 1
row: 3 : 1 entries [24:24]
    column 22243: bool 1
row: 4 : 3 entries [25:27]
    column 5051: bool 1
    column 16177: bool 1
    column 22621: bool 1
row: 5 : 3 entries [28:30]
    column 19329: bool 1
    column 20511: bool 1
    ...
row: 6 : 5 entries [31:35]
    ...
row: 7 : 1 entries [36:36]
    ...
row: 8 : 1 entries [37:37]
    ...
row: 9 : 12 entries [38:49]
    ...
...
matrix 22687 by 22687, 109410 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 22687 ncols: 22687 max # entries: 109410
format: standard CSR vlen: 22687 nvec_nonempty: 22687 nvec: 22687 plen: 22687 vdim: 22687
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 109410 
row: 0 : 11 entries [0:10]
    column 1: bool 1
    column 11112: bool 1
    column 12868: bool 1
    column 12936: bool 1
    column 14910: bool 1
    column 16021: bool 1
    column 17132: bool 1
    column 18243: bool 1
    column 19354: bool 1
    column 20465: bool 1
    column 21576: bool 1
row: 1 : 2 entries [11:12]
    column 0: bool 1
    column 2256: bool 1
row: 2 : 11 entries [13:23]
    column 1113: bool 1
    column 2224: bool 1
    column 3335: bool 1
    column 4446: bool 1
    column 5557: bool 1
    column 6668: bool 1
    column 7779: bool 1
    column 8890: bool 1
    column 10001: bool 1
    column 11113: bool 1
    column 15686: bool 1
row: 3 : 1 entries [24:24]
    column 22243: bool 1
row: 4 : 3 entries [25:27]
    column 5051: bool 1
    column 16177: bool 1
    column 22621: bool 1
row: 5 : 3 entries [28:30]
    column 19329: bool 1
    column 20511: bool 1
    ...
row: 6 : 5 entries [31:35]
    ...
row: 7 : 1 entries [36:36]
    ...
row: 8 : 1 entries [37:37]
    ...
row: 9 : 12 entries [38:49]
    ...
...

total time to read A matrix:       0.073786 sec

n 22687 # edges 54705
U=triu(A) time:        0.000954 sec
read A, create U memory usage: 0.00448419 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000672 sec
# triangles 806

tricount time:         0.001779 sec (dot product method)
tri+prep time:         0.003405 sec (incl time to compute L and U)
compute C time:        0.001771 sec
reduce (C) time:       0.000008 sec
rate      16.07 million edges/sec (incl time for U=triu(A))
rate      30.75 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00448434 GB

----------------------------------- outer product method:
tricount time:         0.003345 sec (outer product method)
tri+prep time:         0.004017 sec (incl time to compute L)
compute C time:        0.003340 sec
reduce (C) time:       0.000006 sec
rate      13.62 million edges/sec (incl time for L=tril(A))
rate      16.35 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00448419 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella30/p2p-Gnutella30_adj.tsv.gz
--------------------------------------------------------------
ntuples: 176656
nrows 36682 ncols 36682
time to prune self-edges:     0.000260
time to build the graph with GrB_Matrix_build:     0.016976
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.002747

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 36682 ncols: 36682 max # entries: 176656
format: standard CSR vlen: 36682 nvec_nonempty: 36682 nvec: 36682 plen: 36682 vdim: 36682
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 176656 
row: 0 : 14 entries [0:13]
    column 1: bool 1
    column 2: bool 1
    column 3459: bool 1
    column 6991: bool 1
    column 11112: bool 1
    column 22223: bool 1
    column 30016: bool 1
    column 31127: bool 1
    column 31520: bool 1
    column 32238: bool 1
    column 33349: bool 1
    column 34460: bool 1
    column 35571: bool 1
    column 36007: bool 1
row: 1 : 6 entries [14:19]
    column 0: bool 1
    column 6952: bool 1
    column 12924: bool 1
    column 18641: bool 1
    column 21015: bool 1
    column 22781: bool 1
row: 2 : 1 entries [20:20]
    column 0: bool 1
row: 3 : 1 entries [21:21]
    column 36571: bool 1
row: 4 : 5 entries [22:26]
    column 12256: bool 1
    column 12369: bool 1
    column 19755: bool 1
    column 29037: bool 1
    column 36594: bool 1
row: 5 : 13 entries [27:39]
    column 6187: bool 1
    column 6589: bool 1
    column 6657: bool 1
    ...
row: 6 : 24 entries [40:63]
    ...
row: 7 : 15 entries [64:78]
    ...
row: 8 : 1 entries [79:79]
    ...
row: 9 : 4 entries [80:83]
    ...
...
matrix 36682 by 36682, 176656 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 36682 ncols: 36682 max # entries: 176656
format: standard CSR vlen: 36682 nvec_nonempty: 36682 nvec: 36682 plen: 36682 vdim: 36682
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 176656 
row: 0 : 14 entries [0:13]
    column 1: bool 1
    column 2: bool 1
    column 3459: bool 1
    column 6991: bool 1
    column 11112: bool 1
    column 22223: bool 1
    column 30016: bool 1
    column 31127: bool 1
    column 31520: bool 1
    column 32238: bool 1
    column 33349: bool 1
    column 34460: bool 1
    column 35571: bool 1
    column 36007: bool 1
row: 1 : 6 entries [14:19]
    column 0: bool 1
    column 6952: bool 1
    column 12924: bool 1
    column 18641: bool 1
    column 21015: bool 1
    column 22781: bool 1
row: 2 : 1 entries [20:20]
    column 0: bool 1
row: 3 : 1 entries [21:21]
    column 36571: bool 1
row: 4 : 5 entries [22:26]
    column 12256: bool 1
    column 12369: bool 1
    column 19755: bool 1
    column 29037: bool 1
    column 36594: bool 1
row: 5 : 13 entries [27:39]
    column 6187: bool 1
    column 6589: bool 1
    column 6657: bool 1
    ...
row: 6 : 24 entries [40:63]
    ...
row: 7 : 15 entries [64:78]
    ...
row: 8 : 1 entries [79:79]
    ...
row: 9 : 4 entries [80:83]
    ...
...

total time to read A matrix:       0.118669 sec

n 36682 # edges 88328
U=triu(A) time:        0.001544 sec
read A, create U memory usage: 0.00724093 GB

------------------------------------- dot product method:
L=tril(A) time:        0.001057 sec
# triangles 1590

tricount time:         0.002924 sec (dot product method)
tri+prep time:         0.005525 sec (incl time to compute L and U)
compute C time:        0.002911 sec
reduce (C) time:       0.000013 sec
rate      15.99 million edges/sec (incl time for U=triu(A))
rate      30.20 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00724107 GB

----------------------------------- outer product method:
tricount time:         0.005654 sec (outer product method)
tri+prep time:         0.006711 sec (incl time to compute L)
compute C time:        0.005645 sec
reduce (C) time:       0.000010 sec
rate      13.16 million edges/sec (incl time for L=tril(A))
rate      15.62 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00724093 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/p2p-Gnutella31/p2p-Gnutella31_adj.tsv.gz
--------------------------------------------------------------
ntuples: 295784
nrows 62586 ncols 62586
time to prune self-edges:     0.000391
time to build the graph with GrB_Matrix_build:     0.029173
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.004737

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 62586 ncols: 62586 max # entries: 295784
format: standard CSR vlen: 62586 nvec_nonempty: 62586 nvec: 62586 plen: 62586 vdim: 62586
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 295784 
row: 0 : 23 entries [0:22]
    column 1: bool 1
    column 2: bool 1
    column 631: bool 1
    column 1056: bool 1
    column 8385: bool 1
    column 11112: bool 1
    column 12408: bool 1
    column 16108: bool 1
    column 16298: bool 1
    column 19134: bool 1
    column 20208: bool 1
    column 22223: bool 1
    column 33334: bool 1
    column 36336: bool 1
    column 38949: bool 1
    column 40628: bool 1
    column 44445: bool 1
    column 46917: bool 1
    column 55556: bool 1
    column 58547: bool 1
    column 59253: bool 1
    column 60364: bool 1
    column 61475: bool 1
row: 1 : 36 entries [23:58]
    column 0: bool 1
    column 950: bool 1
    column 1890: bool 1
    column 2926: bool 1
    column 4282: bool 1
    column 6780: bool 1
    column 6969: bool 1
    ...
row: 2 : 20 entries [59:78]
    ...
row: 3 : 11 entries [79:89]
    ...
row: 4 : 1 entries [90:90]
    ...
row: 5 : 19 entries [91:109]
    ...
row: 6 : 1 entries [110:110]
    ...
row: 7 : 6 entries [111:116]
    ...
row: 8 : 3 entries [117:119]
    ...
row: 9 : 1 entries [120:120]
    ...
...
matrix 62586 by 62586, 295784 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 62586 ncols: 62586 max # entries: 295784
format: standard CSR vlen: 62586 nvec_nonempty: 62586 nvec: 62586 plen: 62586 vdim: 62586
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 295784 
row: 0 : 23 entries [0:22]
    column 1: bool 1
    column 2: bool 1
    column 631: bool 1
    column 1056: bool 1
    column 8385: bool 1
    column 11112: bool 1
    column 12408: bool 1
    column 16108: bool 1
    column 16298: bool 1
    column 19134: bool 1
    column 20208: bool 1
    column 22223: bool 1
    column 33334: bool 1
    column 36336: bool 1
    column 38949: bool 1
    column 40628: bool 1
    column 44445: bool 1
    column 46917: bool 1
    column 55556: bool 1
    column 58547: bool 1
    column 59253: bool 1
    column 60364: bool 1
    column 61475: bool 1
row: 1 : 36 entries [23:58]
    column 0: bool 1
    column 950: bool 1
    column 1890: bool 1
    column 2926: bool 1
    column 4282: bool 1
    column 6780: bool 1
    column 6969: bool 1
    ...
row: 2 : 20 entries [59:78]
    ...
row: 3 : 11 entries [79:89]
    ...
row: 4 : 1 entries [90:90]
    ...
row: 5 : 19 entries [91:109]
    ...
row: 6 : 1 entries [110:110]
    ...
row: 7 : 6 entries [111:116]
    ...
row: 8 : 3 entries [117:119]
    ...
row: 9 : 1 entries [120:120]
    ...
...

total time to read A matrix:       0.196156 sec

n 62586 # edges 147892
U=triu(A) time:        0.002672 sec
read A, create U memory usage: 0.0121512 GB

------------------------------------- dot product method:
L=tril(A) time:        0.001753 sec
# triangles 2024

tricount time:         0.004934 sec (dot product method)
tri+prep time:         0.009359 sec (incl time to compute L and U)
compute C time:        0.004920 sec
reduce (C) time:       0.000015 sec
rate      15.80 million edges/sec (incl time for U=triu(A))
rate      29.97 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0121514 GB

----------------------------------- outer product method:
tricount time:         0.009392 sec (outer product method)
tri+prep time:         0.011145 sec (incl time to compute L)
compute C time:        0.009379 sec
reduce (C) time:       0.000013 sec
rate      13.27 million edges/sec (incl time for L=tril(A))
rate      15.75 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0121512 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/roadNet-CA/roadNet-CA_adj.tsv.gz
--------------------------------------------------------------
ntuples: 5533214
nrows 1965206 ncols 1965206
time to prune self-edges:     0.012202
time to build the graph with GrB_Matrix_build:     0.443280
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.102610

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 1965206 ncols: 1965206 max # entries: 5533214
format: standard CSR vlen: 1965206 nvec_nonempty: 1965206 nvec: 1965206 plen: 1965206 vdim: 1965206
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 5533214 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 1079579: bool 1
    column 1377168: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 1284159: bool 1
    column 1522281: bool 1
row: 2 : 4 entries [6:9]
    column 110797: bool 1
    column 110798: bool 1
    column 1787727: bool 1
    column 1854191: bool 1
row: 3 : 4 entries [10:13]
    column 33232: bool 1
    column 410357: bool 1
    column 1606598: bool 1
    column 1954115: bool 1
row: 4 : 3 entries [14:16]
    column 1114: bool 1
    column 1311498: bool 1
    column 1964098: bool 1
row: 5 : 3 entries [17:19]
    column 116: bool 1
    column 1964432: bool 1
    column 1964764: bool 1
row: 6 : 3 entries [20:22]
    column 17: bool 1
    column 28: bool 1
    column 83: bool 1
row: 7 : 3 entries [23:25]
    column 8: bool 1
    column 18: bool 1
    column 1965201: bool 1
row: 8 : 3 entries [26:28]
    column 7: bool 1
    column 187: bool 1
    column 188: bool 1
row: 9 : 3 entries [29:31]
    column 25578: bool 1
...
matrix 1965206 by 1965206, 5533214 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 1965206 ncols: 1965206 max # entries: 5533214
format: standard CSR vlen: 1965206 nvec_nonempty: 1965206 nvec: 1965206 plen: 1965206 vdim: 1965206
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 5533214 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 1079579: bool 1
    column 1377168: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 1284159: bool 1
    column 1522281: bool 1
row: 2 : 4 entries [6:9]
    column 110797: bool 1
    column 110798: bool 1
    column 1787727: bool 1
    column 1854191: bool 1
row: 3 : 4 entries [10:13]
    column 33232: bool 1
    column 410357: bool 1
    column 1606598: bool 1
    column 1954115: bool 1
row: 4 : 3 entries [14:16]
    column 1114: bool 1
    column 1311498: bool 1
    column 1964098: bool 1
row: 5 : 3 entries [17:19]
    column 116: bool 1
    column 1964432: bool 1
    column 1964764: bool 1
row: 6 : 3 entries [20:22]
    column 17: bool 1
    column 28: bool 1
    column 83: bool 1
row: 7 : 3 entries [23:25]
    column 8: bool 1
    column 18: bool 1
    column 1965201: bool 1
row: 8 : 3 entries [26:28]
    column 7: bool 1
    column 187: bool 1
    column 188: bool 1
row: 9 : 3 entries [29:31]
    column 25578: bool 1
...

total time to read A matrix:       3.757328 sec

n 1965206 # edges 2766607
U=triu(A) time:        0.056834 sec
read A, create U memory usage: 0.246362 GB

------------------------------------- dot product method:
L=tril(A) time:        0.039817 sec
# triangles 120676

tricount time:         0.076566 sec (dot product method)
tri+prep time:         0.173217 sec (incl time to compute L and U)
compute C time:        0.075695 sec
reduce (C) time:       0.000871 sec
rate      15.97 million edges/sec (incl time for U=triu(A))
rate      36.13 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.246362 GB

----------------------------------- outer product method:
tricount time:         0.068099 sec (outer product method)
tri+prep time:         0.107915 sec (incl time to compute L)
compute C time:        0.067372 sec
reduce (C) time:       0.000726 sec
rate      25.64 million edges/sec (incl time for L=tril(A))
rate      40.63 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.246362 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/roadNet-PA/roadNet-PA_adj.tsv.gz
--------------------------------------------------------------
ntuples: 3083796
nrows 1088092 ncols 1088092
time to prune self-edges:     0.005260
time to build the graph with GrB_Matrix_build:     0.240493
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.056076

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 1088092 ncols: 1088092 max # entries: 3083796
format: standard CSR vlen: 1088092 nvec_nonempty: 1088092 nvec: 1088092 plen: 1088092 vdim: 1088092
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 3083796 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 679115: bool 1
    column 683992: bool 1
row: 1 : 1 entries [3:3]
    column 0: bool 1
row: 2 : 3 entries [4:6]
    column 101798: bool 1
    column 223777: bool 1
    column 833239: bool 1
row: 3 : 3 entries [7:9]
    column 88666: bool 1
    column 99767: bool 1
    column 1076994: bool 1
row: 4 : 3 entries [10:12]
    column 968202: bool 1
    column 981845: bool 1
    column 1086984: bool 1
row: 5 : 3 entries [13:15]
    column 797340: bool 1
    column 815598: bool 1
    column 822031: bool 1
row: 6 : 3 entries [16:18]
    column 17: bool 1
    column 28: bool 1
    column 1088081: bool 1
row: 7 : 2 entries [19:20]
    column 8: bool 1
    column 1088091: bool 1
row: 8 : 3 entries [21:23]
    column 7: bool 1
    column 9: bool 1
    column 578: bool 1
row: 9 : 3 entries [24:26]
    column 8: bool 1
...
matrix 1088092 by 1088092, 3083796 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 1088092 ncols: 1088092 max # entries: 3083796
format: standard CSR vlen: 1088092 nvec_nonempty: 1088092 nvec: 1088092 plen: 1088092 vdim: 1088092
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 3083796 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 679115: bool 1
    column 683992: bool 1
row: 1 : 1 entries [3:3]
    column 0: bool 1
row: 2 : 3 entries [4:6]
    column 101798: bool 1
    column 223777: bool 1
    column 833239: bool 1
row: 3 : 3 entries [7:9]
    column 88666: bool 1
    column 99767: bool 1
    column 1076994: bool 1
row: 4 : 3 entries [10:12]
    column 968202: bool 1
    column 981845: bool 1
    column 1086984: bool 1
row: 5 : 3 entries [13:15]
    column 797340: bool 1
    column 815598: bool 1
    column 822031: bool 1
row: 6 : 3 entries [16:18]
    column 17: bool 1
    column 28: bool 1
    column 1088081: bool 1
row: 7 : 2 entries [19:20]
    column 8: bool 1
    column 1088091: bool 1
row: 8 : 3 entries [21:23]
    column 7: bool 1
    column 9: bool 1
    column 578: bool 1
row: 9 : 3 entries [24:26]
    column 8: bool 1
...

total time to read A matrix:       2.008590 sec

n 1088092 # edges 1541898
U=triu(A) time:        0.032093 sec
read A, create U memory usage: 0.137132 GB

------------------------------------- dot product method:
L=tril(A) time:        0.022271 sec
# triangles 67150

tricount time:         0.041447 sec (dot product method)
tri+prep time:         0.095811 sec (incl time to compute L and U)
compute C time:        0.041035 sec
reduce (C) time:       0.000412 sec
rate      16.09 million edges/sec (incl time for U=triu(A))
rate      37.20 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.137132 GB

----------------------------------- outer product method:
tricount time:         0.037169 sec (outer product method)
tri+prep time:         0.059440 sec (incl time to compute L)
compute C time:        0.036764 sec
reduce (C) time:       0.000405 sec
rate      25.94 million edges/sec (incl time for L=tril(A))
rate      41.48 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.137132 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/snap/roadNet-TX/roadNet-TX_adj.tsv.gz
--------------------------------------------------------------
ntuples: 3843320
nrows 1379917 ncols 1379917
time to prune self-edges:     0.006012
time to build the graph with GrB_Matrix_build:     0.302479
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.070479

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 1379917 ncols: 1379917 max # entries: 3843320
format: standard CSR vlen: 1379917 nvec_nonempty: 1379917 nvec: 1379917 plen: 1379917 vdim: 1379917
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 3843320 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 500958: bool 1
    column 599260: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 533845: bool 1
    column 632071: bool 1
row: 2 : 3 entries [6:8]
    column 110510: bool 1
    column 830498: bool 1
    column 1159914: bool 1
row: 3 : 2 entries [9:10]
    column 11046: bool 1
    column 1105070: bool 1
row: 4 : 1 entries [11:11]
    column 1376617: bool 1
row: 5 : 3 entries [12:14]
    column 717769: bool 1
    column 732327: bool 1
    column 732438: bool 1
row: 6 : 3 entries [15:17]
    column 5176: bool 1
    column 1379807: bool 1
    column 1379895: bool 1
row: 7 : 3 entries [18:20]
    column 8: bool 1
    column 9: bool 1
    column 1379916: bool 1
row: 8 : 2 entries [21:22]
    column 7: bool 1
    column 1379901: bool 1
row: 9 : 4 entries [23:26]
    column 7: bool 1
...
matrix 1379917 by 1379917, 3843320 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 1379917 ncols: 1379917 max # entries: 3843320
format: standard CSR vlen: 1379917 nvec_nonempty: 1379917 nvec: 1379917 plen: 1379917 vdim: 1379917
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 3843320 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 500958: bool 1
    column 599260: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 533845: bool 1
    column 632071: bool 1
row: 2 : 3 entries [6:8]
    column 110510: bool 1
    column 830498: bool 1
    column 1159914: bool 1
row: 3 : 2 entries [9:10]
    column 11046: bool 1
    column 1105070: bool 1
row: 4 : 1 entries [11:11]
    column 1376617: bool 1
row: 5 : 3 entries [12:14]
    column 717769: bool 1
    column 732327: bool 1
    column 732438: bool 1
row: 6 : 3 entries [15:17]
    column 5176: bool 1
    column 1379807: bool 1
    column 1379895: bool 1
row: 7 : 3 entries [18:20]
    column 8: bool 1
    column 9: bool 1
    column 1379916: bool 1
row: 8 : 2 entries [21:22]
    column 7: bool 1
    column 1379901: bool 1
row: 9 : 4 entries [23:26]
    column 7: bool 1
...

total time to read A matrix:       2.599964 sec

n 1379917 # edges 1921660
U=triu(A) time:        0.038163 sec
read A, create U memory usage: 0.171478 GB

------------------------------------- dot product method:
L=tril(A) time:        0.028101 sec
# triangles 82869

tricount time:         0.051767 sec (dot product method)
tri+prep time:         0.118031 sec (incl time to compute L and U)
compute C time:        0.051258 sec
reduce (C) time:       0.000509 sec
rate      16.28 million edges/sec (incl time for U=triu(A))
rate      37.12 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.171479 GB

----------------------------------- outer product method:
tricount time:         0.046397 sec (outer product method)
tri+prep time:         0.074498 sec (incl time to compute L)
compute C time:        0.045894 sec
reduce (C) time:       0.000503 sec
rate      25.79 million edges/sec (incl time for L=tril(A))
rate      41.42 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.171478 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/image-grid/g-1045506-262144_adj.tsv.gz
--------------------------------------------------------------
ntuples: 2091012
nrows 262144 ncols 262144
time to prune self-edges:     0.007070
time to build the graph with GrB_Matrix_build:     0.352276
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.024640

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 262144 ncols: 262144 max # entries: 2091012
format: standard CSR vlen: 262144 nvec_nonempty: 262144 nvec: 262144 plen: 262144 vdim: 262144
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 2091012 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 512: bool 1
    column 513: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 512: bool 1
    column 513: bool 1
    column 514: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 513: bool 1
    column 514: bool 1
    column 515: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 514: bool 1
    column 515: bool 1
    column 516: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 515: bool 1
    column 516: bool 1
    column 517: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 516: bool 1
    column 517: bool 1
    column 518: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...
matrix 262144 by 262144, 2091012 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 262144 ncols: 262144 max # entries: 2091012
format: standard CSR vlen: 262144 nvec_nonempty: 262144 nvec: 262144 plen: 262144 vdim: 262144
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 2091012 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 512: bool 1
    column 513: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 512: bool 1
    column 513: bool 1
    column 514: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 513: bool 1
    column 514: bool 1
    column 515: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 514: bool 1
    column 515: bool 1
    column 516: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 515: bool 1
    column 516: bool 1
    column 517: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 516: bool 1
    column 517: bool 1
    column 518: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...

total time to read A matrix:       1.542175 sec

n 262144 # edges 1045506
U=triu(A) time:        0.012448 sec
read A, create U memory usage: 0.0815688 GB

------------------------------------- dot product method:
L=tril(A) time:        0.010279 sec
# triangles 1044484

tricount time:         0.022103 sec (dot product method)
tri+prep time:         0.044831 sec (incl time to compute L and U)
compute C time:        0.018922 sec
reduce (C) time:       0.003182 sec
rate      23.32 million edges/sec (incl time for U=triu(A))
rate      47.30 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.081569 GB

----------------------------------- outer product method:
tricount time:         0.018695 sec (outer product method)
tri+prep time:         0.028974 sec (incl time to compute L)
compute C time:        0.015522 sec
reduce (C) time:       0.003173 sec
rate      36.08 million edges/sec (incl time for L=tril(A))
rate      55.92 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0815688 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/image-grid/g-16764930-4194304_adj.tsv.gz
--------------------------------------------------------------
ntuples: 33529860
nrows 4194304 ncols 4194304
time to prune self-edges:     0.049389
time to build the graph with GrB_Matrix_build:     2.702279
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.399184

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4194304 ncols: 4194304 max # entries: 33529860
format: standard CSR vlen: 4194304 nvec_nonempty: 4194304 nvec: 4194304 plen: 4194304 vdim: 4194304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 33529860 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 2048: bool 1
    column 2049: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 2048: bool 1
    column 2049: bool 1
    column 2050: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 2049: bool 1
    column 2050: bool 1
    column 2051: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 2050: bool 1
    column 2051: bool 1
    column 2052: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 2051: bool 1
    column 2052: bool 1
    column 2053: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 2052: bool 1
    column 2053: bool 1
    column 2054: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...
matrix 4194304 by 4194304, 33529860 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4194304 ncols: 4194304 max # entries: 33529860
format: standard CSR vlen: 4194304 nvec_nonempty: 4194304 nvec: 4194304 plen: 4194304 vdim: 4194304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 33529860 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 2048: bool 1
    column 2049: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 2048: bool 1
    column 2049: bool 1
    column 2050: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 2049: bool 1
    column 2050: bool 1
    column 2051: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 2050: bool 1
    column 2051: bool 1
    column 2052: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 2051: bool 1
    column 2052: bool 1
    column 2053: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 2052: bool 1
    column 2053: bool 1
    column 2054: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...

total time to read A matrix:      22.584496 sec

n 4194304 # edges 16764930
U=triu(A) time:        0.206876 sec
read A, create U memory usage: 1.30774 GB

------------------------------------- dot product method:
L=tril(A) time:        0.172297 sec
# triangles 16760836

tricount time:         0.366223 sec (dot product method)
tri+prep time:         0.745395 sec (incl time to compute L and U)
compute C time:        0.313867 sec
reduce (C) time:       0.052355 sec
rate      22.49 million edges/sec (incl time for U=triu(A))
rate      45.78 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.30774 GB

----------------------------------- outer product method:
tricount time:         0.339538 sec (outer product method)
tri+prep time:         0.511835 sec (incl time to compute L)
compute C time:        0.287109 sec
reduce (C) time:       0.052429 sec
rate      32.75 million edges/sec (incl time for L=tril(A))
rate      49.38 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.30774 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/image-grid/g-260610-65536_adj.tsv.gz
--------------------------------------------------------------
ntuples: 521220
nrows 65536 ncols 65536
time to prune self-edges:     0.000679
time to build the graph with GrB_Matrix_build:     0.085095
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.006133

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 65536 ncols: 65536 max # entries: 521220
format: standard CSR vlen: 65536 nvec_nonempty: 65536 nvec: 65536 plen: 65536 vdim: 65536
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 521220 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 256: bool 1
    column 257: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 256: bool 1
    column 257: bool 1
    column 258: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 257: bool 1
    column 258: bool 1
    column 259: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 258: bool 1
    column 259: bool 1
    column 260: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 259: bool 1
    column 260: bool 1
    column 261: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 260: bool 1
    column 261: bool 1
    column 262: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...
matrix 65536 by 65536, 521220 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 65536 ncols: 65536 max # entries: 521220
format: standard CSR vlen: 65536 nvec_nonempty: 65536 nvec: 65536 plen: 65536 vdim: 65536
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 521220 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 256: bool 1
    column 257: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 256: bool 1
    column 257: bool 1
    column 258: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 257: bool 1
    column 258: bool 1
    column 259: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 258: bool 1
    column 259: bool 1
    column 260: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 259: bool 1
    column 260: bool 1
    column 261: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 260: bool 1
    column 261: bool 1
    column 262: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...

total time to read A matrix:       0.368273 sec

n 65536 # edges 260610
U=triu(A) time:        0.003090 sec
read A, create U memory usage: 0.0203377 GB

------------------------------------- dot product method:
L=tril(A) time:        0.002616 sec
# triangles 260100

tricount time:         0.005485 sec (dot product method)
tri+prep time:         0.011191 sec (incl time to compute L and U)
compute C time:        0.004685 sec
reduce (C) time:       0.000800 sec
rate      23.29 million edges/sec (incl time for U=triu(A))
rate      47.51 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0203379 GB

----------------------------------- outer product method:
tricount time:         0.004696 sec (outer product method)
tri+prep time:         0.007312 sec (incl time to compute L)
compute C time:        0.003903 sec
reduce (C) time:       0.000793 sec
rate      35.64 million edges/sec (incl time for L=tril(A))
rate      55.50 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0203377 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/image-grid/g-268386306-67108864_adj.tsv.gz
--------------------------------------------------------------
ntuples: 536772612
nrows 67108864 ncols 67108864
time to prune self-edges:     0.958156
time to build the graph with GrB_Matrix_build:    47.240141
make symmetric
A = (C+C')/2
A = (C+C')/2 time     7.097966

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 67108864 ncols: 67108864 max # entries: 536772612
format: standard CSR vlen: 67108864 nvec_nonempty: 67108864 nvec: 67108864 plen: 67108864 vdim: 67108864
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 536772612 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 8192: bool 1
    column 8193: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 8192: bool 1
    column 8193: bool 1
    column 8194: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 8193: bool 1
    column 8194: bool 1
    column 8195: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 8194: bool 1
    column 8195: bool 1
    column 8196: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 8195: bool 1
    column 8196: bool 1
    column 8197: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 8196: bool 1
    column 8197: bool 1
    column 8198: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...
matrix 67108864 by 67108864, 536772612 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 67108864 ncols: 67108864 max # entries: 536772612
format: standard CSR vlen: 67108864 nvec_nonempty: 67108864 nvec: 67108864 plen: 67108864 vdim: 67108864
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 536772612 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 8192: bool 1
    column 8193: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 8192: bool 1
    column 8193: bool 1
    column 8194: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 8193: bool 1
    column 8194: bool 1
    column 8195: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 8194: bool 1
    column 8195: bool 1
    column 8196: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 8195: bool 1
    column 8196: bool 1
    column 8197: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 8196: bool 1
    column 8197: bool 1
    column 8198: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...

total time to read A matrix:     385.425870 sec

n 67108864 # edges 268386306
U=triu(A) time:        3.334210 sec
read A, create U memory usage: 20.9344 GB

------------------------------------- dot product method:
L=tril(A) time:        2.770548 sec
# triangles 268369924

tricount time:         5.984320 sec (dot product method)
tri+prep time:        12.089078 sec (incl time to compute L and U)
compute C time:        5.141980 sec
reduce (C) time:       0.842339 sec
rate      22.20 million edges/sec (incl time for U=triu(A))
rate      44.85 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 20.9344 GB

----------------------------------- outer product method:
tricount time:         5.027485 sec (outer product method)
tri+prep time:         7.798033 sec (incl time to compute L)
compute C time:        4.149304 sec
reduce (C) time:       0.878181 sec
rate      34.42 million edges/sec (incl time for L=tril(A))
rate      53.38 million edges/sec (just tricount itself)

tricount (outer) memory usage: 20.9344 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/image-grid/g-4188162-1048576_adj.tsv.gz
--------------------------------------------------------------
ntuples: 8376324
nrows 1048576 ncols 1048576
time to prune self-edges:     0.016911
time to build the graph with GrB_Matrix_build:     0.650745
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.103233

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 1048576 ncols: 1048576 max # entries: 8376324
format: standard CSR vlen: 1048576 nvec_nonempty: 1048576 nvec: 1048576 plen: 1048576 vdim: 1048576
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 8376324 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 1024: bool 1
    column 1025: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 1024: bool 1
    column 1025: bool 1
    column 1026: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 1025: bool 1
    column 1026: bool 1
    column 1027: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 1026: bool 1
    column 1027: bool 1
    column 1028: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 1027: bool 1
    column 1028: bool 1
    column 1029: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 1028: bool 1
    column 1029: bool 1
    column 1030: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...
matrix 1048576 by 1048576, 8376324 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 1048576 ncols: 1048576 max # entries: 8376324
format: standard CSR vlen: 1048576 nvec_nonempty: 1048576 nvec: 1048576 plen: 1048576 vdim: 1048576
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 8376324 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 1024: bool 1
    column 1025: bool 1
row: 1 : 5 entries [3:7]
    column 0: bool 1
    column 2: bool 1
    column 1024: bool 1
    column 1025: bool 1
    column 1026: bool 1
row: 2 : 5 entries [8:12]
    column 1: bool 1
    column 3: bool 1
    column 1025: bool 1
    column 1026: bool 1
    column 1027: bool 1
row: 3 : 5 entries [13:17]
    column 2: bool 1
    column 4: bool 1
    column 1026: bool 1
    column 1027: bool 1
    column 1028: bool 1
row: 4 : 5 entries [18:22]
    column 3: bool 1
    column 5: bool 1
    column 1027: bool 1
    column 1028: bool 1
    column 1029: bool 1
row: 5 : 5 entries [23:27]
    column 4: bool 1
    column 6: bool 1
    column 1028: bool 1
    column 1029: bool 1
    column 1030: bool 1
row: 6 : 5 entries [28:32]
    column 5: bool 1
    column 7: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 5 entries [38:42]
    ...
row: 9 : 5 entries [43:47]
    ...
...

total time to read A matrix:       5.385469 sec

n 1048576 # edges 4188162
U=triu(A) time:        0.050681 sec
read A, create U memory usage: 0.326714 GB

------------------------------------- dot product method:
L=tril(A) time:        0.041302 sec
# triangles 4186116

tricount time:         0.090228 sec (dot product method)
tri+prep time:         0.182212 sec (incl time to compute L and U)
compute C time:        0.077200 sec
reduce (C) time:       0.013028 sec
rate      22.99 million edges/sec (incl time for U=triu(A))
rate      46.42 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.326715 GB

----------------------------------- outer product method:
tricount time:         0.076991 sec (outer product method)
tri+prep time:         0.118294 sec (incl time to compute L)
compute C time:        0.064030 sec
reduce (C) time:       0.012962 sec
rate      35.40 million edges/sec (incl time for L=tril(A))
rate      54.40 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.326714 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/ssget/DIMACS10/hugebubbles-00020_adj.tsv.gz
--------------------------------------------------------------
ntuples: 63580358
nrows 21198119 ncols 21198119
time to prune self-edges:     0.100562
time to build the graph with GrB_Matrix_build:     6.901928
make symmetric
A = (C+C')/2
A = (C+C')/2 time     2.983833

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 21198119 ncols: 21198119 max # entries: 63580358
format: standard CSR vlen: 21198119 nvec_nonempty: 21198119 nvec: 21198119 plen: 21198119 vdim: 21198119
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63580358 
row: 0 : 3 entries [0:2]
    column 42704: bool 1
    column 43297: bool 1
    column 2422992: bool 1
row: 1 : 3 entries [3:5]
    column 42704: bool 1
    column 43297: bool 1
    column 2392763: bool 1
row: 2 : 3 entries [6:8]
    column 32104: bool 1
    column 45491: bool 1
    column 4439423: bool 1
row: 3 : 3 entries [9:11]
    column 32104: bool 1
    column 45491: bool 1
    column 5276299: bool 1
row: 4 : 3 entries [12:14]
    column 1204889: bool 1
    column 13506658: bool 1
    column 15142297: bool 1
row: 5 : 3 entries [15:17]
    column 255858: bool 1
    column 1177801: bool 1
    column 5052995: bool 1
row: 6 : 3 entries [18:20]
    column 1909372: bool 1
    column 20696422: bool 1
    column 20742514: bool 1
row: 7 : 3 entries [21:23]
    column 2203688: bool 1
    column 20696422: bool 1
    column 20742514: bool 1
row: 8 : 3 entries [24:26]
    column 1943469: bool 1
    column 2072685: bool 1
    column 21167571: bool 1
row: 9 : 3 entries [27:29]
    column 1793040: bool 1
...
matrix 21198119 by 21198119, 63580358 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 21198119 ncols: 21198119 max # entries: 63580358
format: standard CSR vlen: 21198119 nvec_nonempty: 21198119 nvec: 21198119 plen: 21198119 vdim: 21198119
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63580358 
row: 0 : 3 entries [0:2]
    column 42704: bool 1
    column 43297: bool 1
    column 2422992: bool 1
row: 1 : 3 entries [3:5]
    column 42704: bool 1
    column 43297: bool 1
    column 2392763: bool 1
row: 2 : 3 entries [6:8]
    column 32104: bool 1
    column 45491: bool 1
    column 4439423: bool 1
row: 3 : 3 entries [9:11]
    column 32104: bool 1
    column 45491: bool 1
    column 5276299: bool 1
row: 4 : 3 entries [12:14]
    column 1204889: bool 1
    column 13506658: bool 1
    column 15142297: bool 1
row: 5 : 3 entries [15:17]
    column 255858: bool 1
    column 1177801: bool 1
    column 5052995: bool 1
row: 6 : 3 entries [18:20]
    column 1909372: bool 1
    column 20696422: bool 1
    column 20742514: bool 1
row: 7 : 3 entries [21:23]
    column 2203688: bool 1
    column 20696422: bool 1
    column 20742514: bool 1
row: 8 : 3 entries [24:26]
    column 1943469: bool 1
    column 2072685: bool 1
    column 21167571: bool 1
row: 9 : 3 entries [27:29]
    column 1793040: bool 1
...

total time to read A matrix:      48.238693 sec

n 21198119 # edges 31790179
U=triu(A) time:        0.569699 sec
read A, create U memory usage: 2.79765 GB

------------------------------------- dot product method:
L=tril(A) time:        0.422464 sec
# triangles 0

tricount time:         3.517312 sec (dot product method)
tri+prep time:         4.509475 sec (incl time to compute L and U)
compute C time:        3.517299 sec
reduce (C) time:       0.000013 sec
rate       7.05 million edges/sec (incl time for U=triu(A))
rate       9.04 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 2.79765 GB

----------------------------------- outer product method:
tricount time:         2.376003 sec (outer product method)
tri+prep time:         2.798467 sec (incl time to compute L)
compute C time:        2.375995 sec
reduce (C) time:       0.000008 sec
rate      11.36 million edges/sec (incl time for L=tril(A))
rate      13.38 million edges/sec (just tricount itself)

tricount (outer) memory usage: 2.79765 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/ssget/vanHeukelum/cage15_adj.tsv.gz
--------------------------------------------------------------
ntuples: 94044692
nrows 5154859 ncols 5154859
time to prune self-edges:     0.146918
time to build the graph with GrB_Matrix_build:    10.561141
make symmetric
A = (C+C')/2
A = (C+C')/2 time     1.302020

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 5154859 ncols: 5154859 max # entries: 94044692
format: standard CSR vlen: 5154859 nvec_nonempty: 5154859 nvec: 5154859 plen: 5154859 vdim: 5154859
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 94044692 
row: 0 : 4 entries [0:3]
    column 1: bool 1
    column 6176: bool 1
    column 8256: bool 1
    column 16447: bool 1
row: 1 : 4 entries [4:7]
    column 0: bool 1
    column 6175: bool 1
    column 8256: bool 1
    column 12351: bool 1
row: 2 : 4 entries [8:11]
    column 3: bool 1
    column 6177: bool 1
    column 8257: bool 1
    column 14399: bool 1
row: 3 : 4 entries [12:15]
    column 2: bool 1
    column 3599: bool 1
    column 8257: bool 1
    column 10303: bool 1
row: 4 : 4 entries [16:19]
    column 5: bool 1
    column 6178: bool 1
    column 8258: bool 1
    column 15423: bool 1
row: 5 : 4 entries [20:23]
    column 4: bool 1
    column 5015: bool 1
    column 8258: bool 1
    column 11327: bool 1
row: 6 : 4 entries [24:27]
    column 7: bool 1
    column 6179: bool 1
    column 8259: bool 1
    column 13375: bool 1
row: 7 : 4 entries [28:31]
    column 6: bool 1
    column 1927: bool 1
    ...
row: 8 : 4 entries [32:35]
    ...
row: 9 : 4 entries [36:39]
    ...
...
matrix 5154859 by 5154859, 94044692 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 5154859 ncols: 5154859 max # entries: 94044692
format: standard CSR vlen: 5154859 nvec_nonempty: 5154859 nvec: 5154859 plen: 5154859 vdim: 5154859
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 94044692 
row: 0 : 4 entries [0:3]
    column 1: bool 1
    column 6176: bool 1
    column 8256: bool 1
    column 16447: bool 1
row: 1 : 4 entries [4:7]
    column 0: bool 1
    column 6175: bool 1
    column 8256: bool 1
    column 12351: bool 1
row: 2 : 4 entries [8:11]
    column 3: bool 1
    column 6177: bool 1
    column 8257: bool 1
    column 14399: bool 1
row: 3 : 4 entries [12:15]
    column 2: bool 1
    column 3599: bool 1
    column 8257: bool 1
    column 10303: bool 1
row: 4 : 4 entries [16:19]
    column 5: bool 1
    column 6178: bool 1
    column 8258: bool 1
    column 15423: bool 1
row: 5 : 4 entries [20:23]
    column 4: bool 1
    column 5015: bool 1
    column 8258: bool 1
    column 11327: bool 1
row: 6 : 4 entries [24:27]
    column 7: bool 1
    column 6179: bool 1
    column 8259: bool 1
    column 13375: bool 1
row: 7 : 4 entries [28:31]
    column 6: bool 1
    column 1927: bool 1
    ...
row: 8 : 4 entries [32:35]
    ...
row: 9 : 4 entries [36:39]
    ...
...

total time to read A matrix:      66.855304 sec

n 5154859 # edges 47022346
U=triu(A) time:        0.538308 sec
read A, create U memory usage: 3.50933 GB

------------------------------------- dot product method:
L=tril(A) time:        0.392371 sec
# triangles 36106416

tricount time:         1.754250 sec (dot product method)
tri+prep time:         2.684929 sec (incl time to compute L and U)
compute C time:        1.607004 sec
reduce (C) time:       0.147246 sec
rate      17.51 million edges/sec (incl time for U=triu(A))
rate      26.80 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 3.50933 GB

----------------------------------- outer product method:
tricount time:         1.560859 sec (outer product method)
tri+prep time:         1.953230 sec (incl time to compute L)
compute C time:        1.413910 sec
reduce (C) time:       0.146949 sec
rate      24.07 million edges/sec (incl time for L=tril(A))
rate      30.13 million edges/sec (just tricount itself)

tricount (outer) memory usage: 3.50933 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/ssget/Freescale/circuit5M_adj.tsv.gz
--------------------------------------------------------------
ntuples: 53967852
nrows 5558326 ncols 5558326
time to prune self-edges:     0.094630
time to build the graph with GrB_Matrix_build:     5.866292
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.697088

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 5558326 ncols: 5558326 max # entries: 53967852
format: standard CSR vlen: 5558326 nvec_nonempty: 5558311 nvec: 5558326 plen: 5558326 vdim: 5558326
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 53967852 
row: 0 : 1 entries [0:0]
    column 329097: bool 1
row: 1 : 1 entries [1:1]
    column 329098: bool 1
row: 2 : 1 entries [2:2]
    column 329099: bool 1
row: 3 : 1 entries [3:3]
    column 329100: bool 1
row: 4 : 1 entries [4:4]
    column 329101: bool 1
row: 5 : 1 entries [5:5]
    column 329102: bool 1
row: 6 : 1 entries [6:6]
    column 329103: bool 1
row: 7 : 1 entries [7:7]
    column 329104: bool 1
row: 8 : 1 entries [8:8]
    column 329105: bool 1
row: 9 : 1 entries [9:9]
    column 329106: bool 1
...
matrix 5558326 by 5558326, 53967852 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 5558326 ncols: 5558326 max # entries: 53967852
format: standard CSR vlen: 5558326 nvec_nonempty: 5558311 nvec: 5558326 plen: 5558326 vdim: 5558326
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 53967852 
row: 0 : 1 entries [0:0]
    column 329097: bool 1
row: 1 : 1 entries [1:1]
    column 329098: bool 1
row: 2 : 1 entries [2:2]
    column 329099: bool 1
row: 3 : 1 entries [3:3]
    column 329100: bool 1
row: 4 : 1 entries [4:4]
    column 329101: bool 1
row: 5 : 1 entries [5:5]
    column 329102: bool 1
row: 6 : 1 entries [6:6]
    column 329103: bool 1
row: 7 : 1 entries [7:7]
    column 329104: bool 1
row: 8 : 1 entries [8:8]
    column 329105: bool 1
row: 9 : 1 entries [9:9]
    column 329106: bool 1
...

total time to read A matrix:      37.430906 sec

n 5558326 # edges 26983926
U=triu(A) time:        0.279555 sec
read A, create U memory usage: 2.07624 GB

------------------------------------- dot product method:
L=tril(A) time:        0.266797 sec
# triangles 31019473

tricount time:         1.917893 sec (dot product method)
tri+prep time:         2.464246 sec (incl time to compute L and U)
compute C time:        1.788926 sec
reduce (C) time:       0.128967 sec
rate      10.95 million edges/sec (incl time for U=triu(A))
rate      14.07 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 2.07624 GB

----------------------------------- outer product method:
tricount time:       450.393214 sec (outer product method)
tri+prep time:       450.660012 sec (incl time to compute L)
compute C time:      450.258716 sec
reduce (C) time:       0.134498 sec
rate       0.06 million edges/sec (incl time for L=tril(A))
rate       0.06 million edges/sec (just tricount itself)

tricount (outer) memory usage: 2.07624 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/graph500-scale18-ef16/graph500-scale18-ef16_adj.tsv.gz
--------------------------------------------------------------
ntuples: 7600696
nrows 174147 ncols 174147
time to prune self-edges:     0.017769
time to build the graph with GrB_Matrix_build:     1.773043
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.123532

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 174147 ncols: 174147 max # entries: 7600696
format: standard CSR vlen: 174147 nvec_nonempty: 174147 nvec: 174147 plen: 174147 vdim: 174147
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 7600696 
row: 0 : 25707 entries [0:25706]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 5: bool 1
    column 28: bool 1
    column 42: bool 1
    column 43: bool 1
    column 50: bool 1
    column 52: bool 1
    column 86: bool 1
    column 90: bool 1
    column 96: bool 1
    column 97: bool 1
    column 105: bool 1
    column 115: bool 1
    column 122: bool 1
    column 148: bool 1
    column 155: bool 1
    column 160: bool 1
    column 175: bool 1
    column 221: bool 1
    column 222: bool 1
    column 237: bool 1
    column 244: bool 1
    column 254: bool 1
    column 269: bool 1
    column 281: bool 1
    column 295: bool 1
    column 308: bool 1
    column 309: bool 1
    ...
row: 1 : 10969 entries [25707:36675]
    ...
row: 2 : 4400 entries [36676:41075]
    ...
row: 3 : 1630 entries [41076:42705]
    ...
row: 4 : 55 entries [42706:42760]
    ...
row: 5 : 205 entries [42761:42965]
    ...
row: 6 : 56 entries [42966:43021]
    ...
row: 7 : 15 entries [43022:43036]
    ...
row: 8 : 21 entries [43037:43057]
    ...
row: 9 : 5 entries [43058:43062]
    ...
...
matrix 174147 by 174147, 7600696 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 174147 ncols: 174147 max # entries: 7600696
format: standard CSR vlen: 174147 nvec_nonempty: 174147 nvec: 174147 plen: 174147 vdim: 174147
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 7600696 
row: 0 : 25707 entries [0:25706]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 5: bool 1
    column 28: bool 1
    column 42: bool 1
    column 43: bool 1
    column 50: bool 1
    column 52: bool 1
    column 86: bool 1
    column 90: bool 1
    column 96: bool 1
    column 97: bool 1
    column 105: bool 1
    column 115: bool 1
    column 122: bool 1
    column 148: bool 1
    column 155: bool 1
    column 160: bool 1
    column 175: bool 1
    column 221: bool 1
    column 222: bool 1
    column 237: bool 1
    column 244: bool 1
    column 254: bool 1
    column 269: bool 1
    column 281: bool 1
    column 295: bool 1
    column 308: bool 1
    column 309: bool 1
    ...
row: 1 : 10969 entries [25707:36675]
    ...
row: 2 : 4400 entries [36676:41075]
    ...
row: 3 : 1630 entries [41076:42705]
    ...
row: 4 : 55 entries [42706:42760]
    ...
row: 5 : 205 entries [42761:42965]
    ...
row: 6 : 56 entries [42966:43021]
    ...
row: 7 : 15 entries [43022:43036]
    ...
row: 8 : 21 entries [43037:43057]
    ...
row: 9 : 5 entries [43058:43062]
    ...
...

total time to read A matrix:       6.073405 sec

n 174147 # edges 3800348
U=triu(A) time:        0.038629 sec
read A, create U memory usage: 0.277806 GB

------------------------------------- dot product method:
L=tril(A) time:        0.030100 sec
# triangles 82287285

tricount time:         4.323558 sec (dot product method)
tri+prep time:         4.392287 sec (incl time to compute L and U)
compute C time:        4.306400 sec
reduce (C) time:       0.017158 sec
rate       0.87 million edges/sec (incl time for U=triu(A))
rate       0.88 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.277806 GB

----------------------------------- outer product method:
tricount time:         3.124588 sec (outer product method)
tri+prep time:         3.154688 sec (incl time to compute L)
compute C time:        3.107269 sec
reduce (C) time:       0.017319 sec
rate       1.20 million edges/sec (incl time for L=tril(A))
rate       1.22 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.277806 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/graph500-scale19-ef16/graph500-scale19-ef16_adj.tsv.gz
--------------------------------------------------------------
ntuples: 15459350
nrows 335318 ncols 335318
time to prune self-edges:     0.022318
time to build the graph with GrB_Matrix_build:     3.740179
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.295759

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 335318 ncols: 335318 max # entries: 15459350
format: standard CSR vlen: 335318 nvec_nonempty: 335318 nvec: 335318 plen: 335318 vdim: 335318
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 15459350 
row: 0 : 41358 entries [0:41357]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 5: bool 1
    column 26: bool 1
    column 39: bool 1
    column 48: bool 1
    column 56: bool 1
    column 57: bool 1
    column 58: bool 1
    column 63: bool 1
    column 74: bool 1
    column 97: bool 1
    column 98: bool 1
    column 104: bool 1
    column 107: bool 1
    column 116: bool 1
    column 124: bool 1
    column 125: bool 1
    column 126: bool 1
    column 133: bool 1
    column 136: bool 1
    column 165: bool 1
    column 176: bool 1
    column 187: bool 1
    column 204: bool 1
    column 207: bool 1
    column 222: bool 1
    column 223: bool 1
    column 239: bool 1
    ...
row: 1 : 17310 entries [41358:58667]
    ...
row: 2 : 6884 entries [58668:65551]
    ...
row: 3 : 2560 entries [65552:68111]
    ...
row: 4 : 90 entries [68112:68201]
    ...
row: 5 : 292 entries [68202:68493]
    ...
row: 6 : 80 entries [68494:68573]
    ...
row: 7 : 28 entries [68574:68601]
    ...
row: 8 : 25 entries [68602:68626]
    ...
row: 9 : 8 entries [68627:68634]
    ...
...
matrix 335318 by 335318, 15459350 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 335318 ncols: 335318 max # entries: 15459350
format: standard CSR vlen: 335318 nvec_nonempty: 335318 nvec: 335318 plen: 335318 vdim: 335318
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 15459350 
row: 0 : 41358 entries [0:41357]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 5: bool 1
    column 26: bool 1
    column 39: bool 1
    column 48: bool 1
    column 56: bool 1
    column 57: bool 1
    column 58: bool 1
    column 63: bool 1
    column 74: bool 1
    column 97: bool 1
    column 98: bool 1
    column 104: bool 1
    column 107: bool 1
    column 116: bool 1
    column 124: bool 1
    column 125: bool 1
    column 126: bool 1
    column 133: bool 1
    column 136: bool 1
    column 165: bool 1
    column 176: bool 1
    column 187: bool 1
    column 204: bool 1
    column 207: bool 1
    column 222: bool 1
    column 223: bool 1
    column 239: bool 1
    ...
row: 1 : 17310 entries [41358:58667]
    ...
row: 2 : 6884 entries [58668:65551]
    ...
row: 3 : 2560 entries [65552:68111]
    ...
row: 4 : 90 entries [68112:68201]
    ...
row: 5 : 292 entries [68202:68493]
    ...
row: 6 : 80 entries [68494:68573]
    ...
row: 7 : 28 entries [68574:68601]
    ...
row: 8 : 25 entries [68602:68626]
    ...
row: 9 : 8 entries [68627:68634]
    ...
...

total time to read A matrix:      12.426686 sec

n 335318 # edges 7729675
U=triu(A) time:        0.077859 sec
read A, create U memory usage: 0.564585 GB

------------------------------------- dot product method:
L=tril(A) time:        0.060466 sec
# triangles 186288972

tricount time:        11.899419 sec (dot product method)
tri+prep time:        12.037744 sec (incl time to compute L and U)
compute C time:       11.864570 sec
reduce (C) time:       0.034849 sec
rate       0.64 million edges/sec (incl time for U=triu(A))
rate       0.65 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.564585 GB

----------------------------------- outer product method:
tricount time:         7.981027 sec (outer product method)
tri+prep time:         8.041493 sec (incl time to compute L)
compute C time:        7.946544 sec
reduce (C) time:       0.034483 sec
rate       0.96 million edges/sec (incl time for L=tril(A))
rate       0.97 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.564585 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/graph500-scale20-ef16/graph500-scale20-ef16_adj.tsv.gz
--------------------------------------------------------------
ntuples: 31361722
nrows 645820 ncols 645820
time to prune self-edges:     0.054125
time to build the graph with GrB_Matrix_build:     4.390232
make symmetric
A = (C+C')/2
A = (C+C')/2 time     1.099649

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 645820 ncols: 645820 max # entries: 31361722
format: standard CSR vlen: 645820 nvec_nonempty: 645820 nvec: 645820 plen: 645820 vdim: 645820
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 31361722 
row: 0 : 67086 entries [0:67085]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 48: bool 1
    column 63: bool 1
    column 132: bool 1
    column 140: bool 1
    column 147: bool 1
    column 158: bool 1
    column 170: bool 1
    column 249: bool 1
    column 286: bool 1
    column 333: bool 1
    column 401: bool 1
    column 410: bool 1
    column 419: bool 1
    column 430: bool 1
    column 445: bool 1
    column 486: bool 1
    column 560: bool 1
    column 611: bool 1
    column 615: bool 1
    column 631: bool 1
    column 639: bool 1
    column 649: bool 1
    column 656: bool 1
    ...
row: 1 : 27363 entries [67086:94448]
    ...
row: 2 : 10311 entries [94449:104759]
    ...
row: 3 : 3909 entries [104760:108668]
    ...
row: 4 : 134 entries [108669:108802]
    ...
row: 5 : 439 entries [108803:109241]
    ...
row: 6 : 131 entries [109242:109372]
    ...
row: 7 : 37 entries [109373:109409]
    ...
row: 8 : 8 entries [109410:109417]
    ...
row: 9 : 16 entries [109418:109433]
    ...
...
matrix 645820 by 645820, 31361722 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 645820 ncols: 645820 max # entries: 31361722
format: standard CSR vlen: 645820 nvec_nonempty: 645820 nvec: 645820 plen: 645820 vdim: 645820
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 31361722 
row: 0 : 67086 entries [0:67085]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 48: bool 1
    column 63: bool 1
    column 132: bool 1
    column 140: bool 1
    column 147: bool 1
    column 158: bool 1
    column 170: bool 1
    column 249: bool 1
    column 286: bool 1
    column 333: bool 1
    column 401: bool 1
    column 410: bool 1
    column 419: bool 1
    column 430: bool 1
    column 445: bool 1
    column 486: bool 1
    column 560: bool 1
    column 611: bool 1
    column 615: bool 1
    column 631: bool 1
    column 639: bool 1
    column 649: bool 1
    column 656: bool 1
    ...
row: 1 : 27363 entries [67086:94448]
    ...
row: 2 : 10311 entries [94449:104759]
    ...
row: 3 : 3909 entries [104760:108668]
    ...
row: 4 : 134 entries [108669:108802]
    ...
row: 5 : 439 entries [108803:109241]
    ...
row: 6 : 131 entries [109242:109372]
    ...
row: 7 : 37 entries [109373:109409]
    ...
row: 8 : 8 entries [109410:109417]
    ...
row: 9 : 16 entries [109418:109433]
    ...
...

total time to read A matrix:      22.616722 sec

n 645820 # edges 15680861
U=triu(A) time:        0.159823 sec
read A, create U memory usage: 1.14452 GB

------------------------------------- dot product method:
L=tril(A) time:        0.122503 sec
# triangles 419349784

tricount time:        35.934453 sec (dot product method)
tri+prep time:        36.216779 sec (incl time to compute L and U)
compute C time:       35.862133 sec
reduce (C) time:       0.072319 sec
rate       0.43 million edges/sec (incl time for U=triu(A))
rate       0.44 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.14452 GB

----------------------------------- outer product method:
tricount time:        22.956280 sec (outer product method)
tri+prep time:        23.078784 sec (incl time to compute L)
compute C time:       22.879975 sec
reduce (C) time:       0.076306 sec
rate       0.68 million edges/sec (incl time for L=tril(A))
rate       0.68 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.14452 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/graph500-scale21-ef16/graph500-scale21-ef16_adj.tsv.gz
--------------------------------------------------------------
ntuples: 63463300
nrows 1243072 ncols 1243072
time to prune self-edges:     0.106662
time to build the graph with GrB_Matrix_build:     9.432510
make symmetric
A = (C+C')/2
A = (C+C')/2 time     3.377101

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 1243072 ncols: 1243072 max # entries: 63463300
format: standard CSR vlen: 1243072 nvec_nonempty: 1243072 nvec: 1243072 plen: 1243072 vdim: 1243072
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63463300 
row: 0 : 107400 entries [0:107399]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 17: bool 1
    column 27: bool 1
    column 43: bool 1
    column 51: bool 1
    column 60: bool 1
    column 92: bool 1
    column 134: bool 1
    column 156: bool 1
    column 160: bool 1
    column 170: bool 1
    column 186: bool 1
    column 199: bool 1
    column 215: bool 1
    column 235: bool 1
    column 264: bool 1
    column 268: bool 1
    column 295: bool 1
    column 308: bool 1
    column 309: bool 1
    column 319: bool 1
    column 342: bool 1
    column 363: bool 1
    column 405: bool 1
    column 474: bool 1
    column 488: bool 1
    ...
row: 1 : 43161 entries [107400:150560]
    ...
row: 2 : 16341 entries [150561:166901]
    ...
row: 3 : 5902 entries [166902:172803]
    ...
row: 4 : 213 entries [172804:173016]
    ...
row: 5 : 658 entries [173017:173674]
    ...
row: 6 : 195 entries [173675:173869]
    ...
row: 7 : 59 entries [173870:173928]
    ...
row: 8 : 18 entries [173929:173946]
    ...
row: 9 : 20 entries [173947:173966]
    ...
...
matrix 1243072 by 1243072, 63463300 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 1243072 ncols: 1243072 max # entries: 63463300
format: standard CSR vlen: 1243072 nvec_nonempty: 1243072 nvec: 1243072 plen: 1243072 vdim: 1243072
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 63463300 
row: 0 : 107400 entries [0:107399]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 17: bool 1
    column 27: bool 1
    column 43: bool 1
    column 51: bool 1
    column 60: bool 1
    column 92: bool 1
    column 134: bool 1
    column 156: bool 1
    column 160: bool 1
    column 170: bool 1
    column 186: bool 1
    column 199: bool 1
    column 215: bool 1
    column 235: bool 1
    column 264: bool 1
    column 268: bool 1
    column 295: bool 1
    column 308: bool 1
    column 309: bool 1
    column 319: bool 1
    column 342: bool 1
    column 363: bool 1
    column 405: bool 1
    column 474: bool 1
    column 488: bool 1
    ...
row: 1 : 43161 entries [107400:150560]
    ...
row: 2 : 16341 entries [150561:166901]
    ...
row: 3 : 5902 entries [166902:172803]
    ...
row: 4 : 213 entries [172804:173016]
    ...
row: 5 : 658 entries [173017:173674]
    ...
row: 6 : 195 entries [173675:173869]
    ...
row: 7 : 59 entries [173870:173928]
    ...
row: 8 : 18 entries [173929:173946]
    ...
row: 9 : 20 entries [173947:173966]
    ...
...

total time to read A matrix:      48.612303 sec

n 1243072 # edges 31731650
U=triu(A) time:        0.315380 sec
read A, create U memory usage: 2.31451 GB

------------------------------------- dot product method:
L=tril(A) time:        0.247698 sec
# triangles 935100883

tricount time:        89.567690 sec (dot product method)
tri+prep time:        90.130768 sec (incl time to compute L and U)
compute C time:       89.423341 sec
reduce (C) time:       0.144349 sec
rate       0.35 million edges/sec (incl time for U=triu(A))
rate       0.35 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 2.31451 GB

----------------------------------- outer product method:
tricount time:        72.679807 sec (outer product method)
tri+prep time:        72.927506 sec (incl time to compute L)
compute C time:       72.531770 sec
reduce (C) time:       0.148037 sec
rate       0.44 million edges/sec (incl time for L=tril(A))
rate       0.44 million edges/sec (just tricount itself)

tricount (outer) memory usage: 2.31451 GB


--------------------------------------------------------------------------------
/research/davisgroup/GraphChallenge/synthetic/graph500-scale22-ef16/graph500-scale22-ef16_adj.tsv.gz
--------------------------------------------------------------
ntuples: 128194008
nrows 2393285 ncols 2393285
time to prune self-edges:     0.215577
time to build the graph with GrB_Matrix_build:    19.251609
make symmetric
A = (C+C')/2
A = (C+C')/2 time     9.541109

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 2393285 ncols: 2393285 max # entries: 128194008
format: standard CSR vlen: 2393285 nvec_nonempty: 2393285 nvec: 2393285 plen: 2393285 vdim: 2393285
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 128194008 
row: 0 : 170546 entries [0:170545]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 17: bool 1
    column 68: bool 1
    column 69: bool 1
    column 75: bool 1
    column 113: bool 1
    column 150: bool 1
    column 158: bool 1
    column 171: bool 1
    column 177: bool 1
    column 224: bool 1
    column 279: bool 1
    column 337: bool 1
    column 392: bool 1
    column 406: bool 1
    column 408: bool 1
    column 410: bool 1
    column 424: bool 1
    column 432: bool 1
    column 467: bool 1
    column 468: bool 1
    column 490: bool 1
    column 498: bool 1
    column 517: bool 1
    column 528: bool 1
    column 578: bool 1
    ...
row: 1 : 67823 entries [170546:238368]
    ...
row: 2 : 25303 entries [238369:263671]
    ...
row: 3 : 8921 entries [263672:272592]
    ...
row: 4 : 294 entries [272593:272886]
    ...
row: 5 : 994 entries [272887:273880]
    ...
row: 6 : 325 entries [273881:274205]
    ...
row: 7 : 97 entries [274206:274302]
    ...
row: 8 : 31 entries [274303:274333]
    ...
row: 9 : 36 entries [274334:274369]
    ...
...
matrix 2393285 by 2393285, 128194008 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 2393285 ncols: 2393285 max # entries: 128194008
format: standard CSR vlen: 2393285 nvec_nonempty: 2393285 nvec: 2393285 plen: 2393285 vdim: 2393285
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 128194008 
row: 0 : 170546 entries [0:170545]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 5: bool 1
    column 17: bool 1
    column 68: bool 1
    column 69: bool 1
    column 75: bool 1
    column 113: bool 1
    column 150: bool 1
    column 158: bool 1
    column 171: bool 1
    column 177: bool 1
    column 224: bool 1
    column 279: bool 1
    column 337: bool 1
    column 392: bool 1
    column 406: bool 1
    column 408: bool 1
    column 410: bool 1
    column 424: bool 1
    column 432: bool 1
    column 467: bool 1
    column 468: bool 1
    column 490: bool 1
    column 498: bool 1
    column 517: bool 1
    column 528: bool 1
    column 578: bool 1
    ...
row: 1 : 67823 entries [170546:238368]
    ...
row: 2 : 25303 entries [238369:263671]
    ...
row: 3 : 8921 entries [263672:272592]
    ...
row: 4 : 294 entries [272593:272886]
    ...
row: 5 : 994 entries [272887:273880]
    ...
row: 6 : 325 entries [273881:274205]
    ...
row: 7 : 97 entries [274206:274302]
    ...
row: 8 : 31 entries [274303:274333]
    ...
row: 9 : 36 entries [274334:274369]
    ...
...

total time to read A matrix:     102.457431 sec

n 2393285 # edges 64097004
U=triu(A) time:        0.635366 sec
read A, create U memory usage: 4.67242 GB

------------------------------------- dot product method:
L=tril(A) time:        0.496917 sec
# triangles 2067392370

tricount time:       249.642634 sec (dot product method)
tri+prep time:       250.774917 sec (incl time to compute L and U)
compute C time:      249.356423 sec
reduce (C) time:       0.286211 sec
rate       0.26 million edges/sec (incl time for U=triu(A))
rate       0.26 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 4.67242 GB

----------------------------------- outer product method:
tricount time:       189.857126 sec (outer product method)
tri+prep time:       190.354044 sec (incl time to compute L)
compute C time:      189.569915 sec
reduce (C) time:       0.287212 sec
rate       0.34 million edges/sec (incl time for L=tril(A))
rate       0.34 million edges/sec (just tricount itself)

tricount (outer) memory usage: 4.67242 GB

