// SPDX-License-Identifier: Apache-2.0
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMboolAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMboolAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMboolAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMboolAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMboolAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMboolAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMint32_tAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMint32_tAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMint32_tAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMint32_tAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCint32_tMint32_tAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCint32_tMint32_tAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMboolAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMboolAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMboolAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMboolAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMboolAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMboolAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMboolAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMboolAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMint32_tAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMint32_tAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMint32_tAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMint32_tAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMint32_tAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMint32_tAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyPLUS_TIMESCuint64_tMint32_tAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallPLUS_TIMESCuint64_tMint32_tAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "PLUS_TIMES";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMboolAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMboolAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMboolAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMboolAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMboolAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMboolAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMint32_tAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMint32_tAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMint32_tAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMint32_tAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCint32_tMint32_tAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCint32_tMint32_tAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMboolAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMboolAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMboolAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMboolAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMboolAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMboolAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMboolAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMboolAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMint32_tAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMint32_tAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMint32_tAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMint32_tAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMint32_tAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMint32_tAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMIN_PLUSCuint64_tMint32_tAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMIN_PLUSCuint64_tMint32_tAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MIN_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMboolAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMboolAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMboolAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMboolAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMboolAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMboolAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,bool,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMint32_tAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMint32_tAint32_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMint32_tAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMint32_tAuint64_tBint32_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,int32_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCint32_tMint32_tAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCint32_tMint32_tAuint64_tBuint64_tXint32_tYint32_tZint32_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< int32_t,int32_t,uint64_t,uint64_t,int32_t,int32_t,int32_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMboolAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMboolAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMboolAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMboolAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMboolAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMboolAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMboolAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMboolAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,bool,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMint32_tAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMint32_tAint32_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMint32_tAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMint32_tAint32_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMint32_tAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMint32_tAuint64_tBint32_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,int32_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
TEST( AxB_dot3_tests_warp, tinyxtinyMAX_PLUSCuint64_tMint32_tAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 32, 256, 128, SR);}
TEST( AxB_dot3_tests_warp, smallxsmallMAX_PLUSCuint64_tMint32_tAuint64_tBuint64_tXuint64_tYuint64_tZuint64_t){ std::string SR = "MAX_PLUS";  test_AxB_dot3_warp_factory< uint64_t,int32_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t > (5, 1024, 65536, 65536, SR);}
