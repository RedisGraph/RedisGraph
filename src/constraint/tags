!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CT_ACTIVE	constraint.h	/^    CT_ACTIVE = 0,$/;"	e	enum:ConstraintStatus
CT_FAILED	constraint.h	/^    CT_FAILED$/;"	e	enum:ConstraintStatus
CT_MANDATORY	constraint.h	/^	CT_MANDATORY$/;"	e	enum:__anon1
CT_PENDING	constraint.h	/^    CT_PENDING,$/;"	e	enum:ConstraintStatus
CT_UNIQUE	constraint.h	/^	CT_UNIQUE,$/;"	e	enum:__anon1
Constraint	constraint.h	/^typedef struct _Constraint *Constraint;$/;"	t	typeref:struct:_Constraint
ConstraintStatus	constraint.h	/^typedef enum ConstraintStatus {$/;"	g
ConstraintStatus	constraint.h	/^} ConstraintStatus;$/;"	t	typeref:enum:ConstraintStatus
ConstraintType	constraint.h	/^} ConstraintType;$/;"	t	typeref:enum:__anon1
Constraint_ContainsAttribute	constraint.c	/^bool Constraint_ContainsAttribute$/;"	f
Constraint_DecPendingChanges	constraint.c	/^void Constraint_DecPendingChanges$/;"	f
Constraint_Enforce	constraint.c	/^void Constraint_Enforce$/;"	f
Constraint_EnforceEdges	constraint.c	/^void Constraint_EnforceEdges$/;"	f
Constraint_EnforceEntity	constraint.c	/^bool Constraint_EnforceEntity$/;"	f
Constraint_EnforceExists	mandatory_constraint.c	/^static bool Constraint_EnforceExists$/;"	f	file:
Constraint_EnforceNodes	constraint.c	/^void Constraint_EnforceNodes$/;"	f
Constraint_EnforceUniqueEntity	unique_constraint.c	/^static bool Constraint_EnforceUniqueEntity$/;"	f	file:
Constraint_ExistsNew	mandatory_constraint.c	/^Constraint Constraint_ExistsNew$/;"	f
Constraint_Free	constraint.c	/^void Constraint_Free$/;"	f
Constraint_GetAttributes	constraint.c	/^uint8_t Constraint_GetAttributes$/;"	f
Constraint_GetEntityType	constraint.c	/^GraphEntityType Constraint_GetEntityType$/;"	f
Constraint_GetSchemaID	constraint.c	/^int Constraint_GetSchemaID$/;"	f
Constraint_GetStatus	constraint.c	/^ConstraintStatus Constraint_GetStatus$/;"	f
Constraint_GetType	constraint.c	/^ConstraintType Constraint_GetType$/;"	f
Constraint_IncPendingChanges	constraint.c	/^void Constraint_IncPendingChanges$/;"	f
Constraint_New	constraint.c	/^Constraint Constraint_New$/;"	f
Constraint_PendingChanges	constraint.c	/^int Constraint_PendingChanges$/;"	f
Constraint_SetStatus	constraint.c	/^void Constraint_SetStatus$/;"	f
Constraint_UniqueNew	unique_constraint.c	/^Constraint Constraint_UniqueNew$/;"	f
EnforcementCB	constraint.h	/^typedef bool (*EnforcementCB)$/;"	t
ExistsConstraint	mandatory_constraint.c	/^typedef struct _ExistsConstraint* ExistsConstraint;$/;"	t	typeref:struct:_ExistsConstraint	file:
UniqueConstraint	unique_constraint.c	/^typedef struct _UniqueConstraint* UniqueConstraint;$/;"	t	typeref:struct:_UniqueConstraint	file:
_Constraint	constraint.c	/^typedef struct _Constraint {$/;"	s	file:
_Constraint	constraint.c	/^} _Constraint;$/;"	t	typeref:struct:_Constraint	file:
_ExistsConstraint	mandatory_constraint.c	/^struct _ExistsConstraint {$/;"	s	file:
_UniqueConstraint	unique_constraint.c	/^struct _UniqueConstraint {$/;"	s	file:
_edge_violation_err_msg	mandatory_constraint.c	/^static const char *_edge_violation_err_msg =$/;"	v	file:
_edge_violation_err_msg	unique_constraint.c	/^static const char *_edge_violation_err_msg =$/;"	v	file:
_node_violation_err_msg	mandatory_constraint.c	/^static const char *_node_violation_err_msg =$/;"	v	file:
_node_violation_err_msg	unique_constraint.c	/^static const char *_node_violation_err_msg =$/;"	v	file:
attr_names	constraint.c	/^	const char **attr_names;       \/\/ enforced attribute names$/;"	m	struct:_Constraint	file:
attr_names	mandatory_constraint.c	/^	const char **attr_names;       \/\/ enforced attribute names$/;"	m	struct:_ExistsConstraint	file:
attr_names	unique_constraint.c	/^	const char **attr_names;       \/\/ enforced attribute names$/;"	m	struct:_UniqueConstraint	file:
attrs	constraint.c	/^	Attribute_ID *attrs;           \/\/ enforced attributes$/;"	m	struct:_Constraint	file:
attrs	mandatory_constraint.c	/^    Attribute_ID *attrs;           \/\/ enforced attributes$/;"	m	struct:_ExistsConstraint	file:
attrs	unique_constraint.c	/^    Attribute_ID *attrs;           \/\/ enforced attributes$/;"	m	struct:_UniqueConstraint	file:
enforce	constraint.c	/^	EnforcementCB enforce;         \/\/ enforcement function$/;"	m	struct:_Constraint	file:
enforce	mandatory_constraint.c	/^	EnforcementCB enforce;         \/\/ enforcement function$/;"	m	struct:_ExistsConstraint	file:
enforce	unique_constraint.c	/^	EnforcementCB enforce;         \/\/ enforcement function$/;"	m	struct:_UniqueConstraint	file:
et	constraint.c	/^	GraphEntityType et;            \/\/ entity type$/;"	m	struct:_Constraint	file:
et	mandatory_constraint.c	/^	GraphEntityType et;            \/\/ entity type$/;"	m	struct:_ExistsConstraint	file:
et	unique_constraint.c	/^	GraphEntityType et;            \/\/ entity type$/;"	m	struct:_UniqueConstraint	file:
idx	unique_constraint.c	/^	Index idx;                     \/\/ supporting index$/;"	m	struct:_UniqueConstraint	file:
n_attr	constraint.c	/^	uint8_t n_attr;                \/\/ number of fields$/;"	m	struct:_Constraint	file:
n_attr	mandatory_constraint.c	/^	uint8_t n_attr;                \/\/ number of fields$/;"	m	struct:_ExistsConstraint	file:
n_attr	unique_constraint.c	/^	uint8_t n_attr;                \/\/ number of fields$/;"	m	struct:_UniqueConstraint	file:
pending_changes	constraint.c	/^	uint _Atomic pending_changes;  \/\/ number of pending changes$/;"	m	struct:_Constraint	file:
pending_changes	mandatory_constraint.c	/^    uint _Atomic pending_changes;  \/\/ number of pending changes$/;"	m	struct:_ExistsConstraint	file:
pending_changes	unique_constraint.c	/^    uint _Atomic pending_changes;  \/\/ number of pending changes$/;"	m	struct:_UniqueConstraint	file:
schema_id	constraint.c	/^	int schema_id;                 \/\/ enforced label\/relationship-type$/;"	m	struct:_Constraint	file:
schema_id	mandatory_constraint.c	/^	int schema_id;                 \/\/ enforced schema ID$/;"	m	struct:_ExistsConstraint	file:
schema_id	unique_constraint.c	/^	int schema_id;                 \/\/ enforced schema ID$/;"	m	struct:_UniqueConstraint	file:
status	constraint.c	/^	ConstraintStatus status;       \/\/ constraint status$/;"	m	struct:_Constraint	file:
status	mandatory_constraint.c	/^    ConstraintStatus status;       \/\/ constraint status$/;"	m	struct:_ExistsConstraint	file:
status	unique_constraint.c	/^    ConstraintStatus status;       \/\/ constraint status$/;"	m	struct:_UniqueConstraint	file:
t	constraint.c	/^	ConstraintType t;              \/\/ constraint type$/;"	m	struct:_Constraint	file:
t	mandatory_constraint.c	/^	ConstraintType t;              \/\/ constraint type$/;"	m	struct:_ExistsConstraint	file:
t	unique_constraint.c	/^	ConstraintType t;              \/\/ constraint type$/;"	m	struct:_UniqueConstraint	file:
