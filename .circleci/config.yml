version: 2.1

parameters:
  run_default_flow:
    default: true
    type: boolean

  run_benchmark_flow_label:
    default: false
    type: boolean

commands:
  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  # If this build is from a fork, stop executing the current job and return success.
  # This is useful to avoid steps that will fail due to missing credentials.
  early-return-for-forked-pull-requests:
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            ./deps/readies/bin/getpy3
            ./deps/readies/bin/getpy2
            ./deps/readies/bin/getaws
          no_output_timeout: 30m

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "6"
      getredis_params:
        type: string
        default: ""
      benchmarks:
        type: string
        default: "no"
    steps:
      - setup-automation
      - run:
          name: Install remote benchmark python dependencies
          command: |
            if [[ "<<parameters.benchmarks>>" == "yes" ]]; then
              python3 -m pip install -r ./tests/benchmarks/requirements.txt
            fi
      - run:
          name: System setup
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py
            python3 -m pip list
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: |
            python3 ./deps/readies/bin/getredis -v '<<parameters.redis_version>>' --force <<parameters.getredis_params>>
            redis-server --version
      - run:
          name: Install remote benchmark tool dependencies
          command: |
            if [[ "<<parameters.benchmarks>>" == "yes" ]]; then
              VERSION=0.14.8 ./deps/readies/bin/getterraform
            fi

  save-tests-logs:
    steps:
      - run:
          name: Cleanup test log dir
          command: |
            rm -f tests/flow/logs/*.{aof,rdb}
            rm -f tests/tck/logs/*.{aof,rdb}
          when: always
      - store_artifacts:
          path: tests/flow/logs
      - store_artifacts:
          path: tests/tck/logs

  persist-artifacts:
    steps:
      - early-return-for-forked-pull-requests
      - run:
          name: List artifacts
          command: |
            cd bin/artifacts
            du -ah --apparent-size *
      - persist_to_workspace:
          root: bin/
          paths:
            - artifacts/*.zip
            - artifacts/*.tgz
            - artifacts/*.tar

  build-steps:
    parameters:
      redis_version:
        type: string
        default: "6"
      build_params:
        type: string
        default: ""
      run_pack:
        type: boolean
        default: true
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          redis_version: <<parameters.redis_version>>
      - run:
          name: Build
          shell: /bin/bash -l -eo pipefail
          command: make <<parameters.build_params>> NPROC=16
      - when:
          condition: << parameters.run_pack >>
          steps:
            - run:
                name: Pack
                shell: /bin/bash -l -eo pipefail
                command: |
                  make pack SHOW=1

  test-steps:
    parameters:
      test_params:
        type: string
        default: ""
    steps:
      - run:
          name: Unit tests
          shell: /bin/bash -l -eo pipefail
          command: make unit-tests CLEAR_LOGS=0 <<parameters.test_params>>
          no_output_timeout: 45m
      - run:
          name: Flow tests
          shell: /bin/bash -l -eo pipefail
          command: make flow-tests CLEAR_LOGS=0 <<parameters.test_params>>
          no_output_timeout: 45m
      - run:
          name: TCK tests
          shell: /bin/bash -l -eo pipefail
          command: make tck-tests CLEAR_LOGS=0 <<parameters.test_params>>
          no_output_timeout: 45m
      - run:
          name: Run 30-second fuzz test
          shell: /bin/bash -l -eo pipefail
          command: make fuzz <<parameters.test_params>>
      - save-tests-logs

  fuzzer-test-steps:
    steps:
      - run:
          name: Run 30-second fuzz test
          shell: /bin/bash -l -eo pipefail
          command: make fuzz
      - save-tests-logs

  platform-build-steps:
    parameters:
      platform:
        type: string
      official:
        type: string
        default: "1"
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Build for platform
          shell: /bin/bash -l -eo pipefail
          command: |
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION="$CIRCLE_TAG" BRANCH="$CIRCLE_BRANCH" TEST=1 OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Publish container
          shell: /bin/bash -l -eo pipefail
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION="$CIRCLE_TAG" BRANCH="$CIRCLE_BRANCH" OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
      - persist-artifacts

  vm-build-platforms-steps:
    parameters:
      platform:
        type: string
      official:
        type: string
        default: "1"
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install Docker
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getdocker
      - run:
          name: Build for platform
          command: |
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
          no_output_timeout: 30m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1 VERBOSE=1
            fi
      - run:
          name: Publish container
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
      - persist-artifacts

  benchmark-steps:
    parameters:
      github_actor:
        type: string
        default: $CIRCLE_USERNAME
      module_path:
        type: string
        default: ""
      profile_env:
        type: string
        default: "0"
      benchmark_glob:
        type: string
        default: "*.yml"
      triggering_env:
        type: string
        default: "circleci"
      allowed_envs:
        type: string
        default: "oss-standalone"
    steps:
      - run:
          name: Run CI benchmarks on aws
          no_output_timeout: 30m # given we use very large datasets we need this timeout
          command: |
            ROOT="$PWD"
            cd tests/benchmarks
            export AWS_ACCESS_KEY_ID=$PERFORMANCE_EC2_ACCESS_KEY
            export AWS_SECRET_ACCESS_KEY=$PERFORMANCE_EC2_SECRET_KEY
            export AWS_DEFAULT_REGION=$PERFORMANCE_EC2_REGION
            export EC2_PRIVATE_PEM=$PERFORMANCE_EC2_PRIVATE_PEM
            export PROFILE=<< parameters.profile_env >>
            export BENCHMARK_GLOB=<< parameters.benchmark_glob >>
            export PERF_CALLGRAPH_MODE="dwarf"
            redisbench-admin run-remote \
              --module_path << parameters.module_path >> \
              --github_actor << parameters.github_actor >> \
              --github_repo $CIRCLE_PROJECT_REPONAME \
              --github_org $CIRCLE_PROJECT_USERNAME \
              --github_sha $CIRCLE_SHA1 \
              --github_branch $CIRCLE_BRANCH \
              --upload_results_s3 \
              --triggering_env circleci \
              --required-module graph \
              --upload_results_s3 \
              --triggering_env << parameters.triggering_env >> \
              --fail_fast \
              --push_results_redistimeseries \
              --allowed-envs << parameters.allowed_envs >>
      - run:
          name: Generate Pull Request Performance info
          command: |
            if [[ -n ${CIRCLE_PULL_REQUEST##*/} ]]; then
                redisbench-admin compare  \
                  --defaults_filename ./tests/benchmarks/defaults.yml \
                  --comparison-branch $CIRCLE_BRANCH \
                  --pull-request ${CIRCLE_PULL_REQUEST##*/} \
                  --auto-approve
            fi


#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-linux-debian:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    resource_class: large
    parameters:
      redis_version:
        type: string
        default: "6"
      build_params:
        type: string
        default: ""
      persist:
        type: string
        default: "yes"
    steps:
      - build-steps:
          redis_version: <<parameters.redis_version>>
      - test-steps
      - early-return-for-forked-pull-requests
      - run:
          name: Persist artifacts?
          command: |
            if [[ "<<parameters.persist>>" != "yes" ]]; then
              circleci step halt
            fi
      - persist-artifacts

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    resource_class: large
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Test coverage
          shell: /bin/bash -l -eo pipefail
          command: |
            make coverage
            make upload-cov
          no_output_timeout: 45m
      - save-tests-logs

  fuzzer:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - build-steps:
          build_params: NPROC=16
      - fuzzer-test-steps
      - save-tests-logs

  sanitize:
    docker:
      - image: redisfab/clang:13-x64-bullseye
    resource_class: large
    parameters:
      san-type:
        type: string
    steps:
      - build-steps:
          build_params: SAN=<<parameters.san-type>>
          run_pack: false
      - run:
          name: Unit tests
          shell: /bin/bash -l -eo pipefail
          command: make unit-tests CLEAR_LOGS=0 SAN=<<parameters.san-type>>
          no_output_timeout: 45m
      - run:
          name: Flow tests
          shell: /bin/bash -l -eo pipefail
          command: make flow-tests CLEAR_LOGS=0 SAN=<<parameters.san-type>>
          no_output_timeout: 45m
      - run:
          name: TCK tests
          shell: /bin/bash -l -eo pipefail
          command: make tck-tests CLEAR_LOGS=0 SAN=<<parameters.san-type>>
          no_output_timeout: 45m
      - save-tests-logs

  valgrind-test:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bionic
    resource_class: xlarge
    steps:
      - build-steps:
          build_params: VG=1
          run_pack: false
      - run:
          name: Unit tests
          shell: /bin/bash -l -eo pipefail
          command: make unit-tests CLEAR_LOGS=0 VG=1
          timeout: 60m
          no_output_timeout: 60m
      - run:
          name: Flow tests
          shell: /bin/bash -l -eo pipefail
          command: make flow-tests CLEAR_LOGS=0 VG=1
          timeout: 60m
          no_output_timeout: 60m
      - run:
          name: TCK tests
          shell: /bin/bash -l -eo pipefail
          command: make tck-tests CLEAR_LOGS=0 VG=1
          timeout: 60m
          no_output_timeout: 60m
      - save-tests-logs

  build-platforms:
    parameters:
      platform:
        type: string
    # docker:
    #   - image: debian:bullseye
    machine:
      enabled: true
      image: ubuntu-2004:202010-01
      resource_class: large
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  build-arm-platforms:
    parameters:
      platform:
        type: string
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.large
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>
          official: "0"

  build-macos:
    macos:
      xcode: 12.5.1
    resource_class: macos.x86.medium.gen2
    parameters:
      upload:
        type: string
        default: "yes"
    steps:
      - early-returns
      - build-steps
      - test-steps
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH && "<<parameters.upload>>" == "yes" ]]; then
                make upload-artifacts SHOW=1 VERBOSE=1
            fi
      - persist-artifacts

  upload-artifacts:
    parameters:
      staging-lab:
        type: string
        default: "0"
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Upload artifacts to S3
          command: |
            mkdir -p bin
            ln -s ~/workspace/artifacts bin/artifacts
            if [[ -n $CIRCLE_TAG && "<<parameters.staging-lab>>" != 1 ]]; then
                make upload-release SHOW=1
            else
                make upload-release SHOW=1 STAGING=1
            fi

  release-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run

  nightly-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run
      - run:
          name: Run 10-minute fuzz test
          shell: /bin/bash -l -eo pipefail
          command: make fuzz-tests TIMEOUT=600

  benchmark:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    resource_class: large
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          benchmarks: "yes"
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Build artifact
          shell: /bin/bash -l -eo pipefail
          command: make NPROC=16
      - benchmark-steps:
          module_path: "/root/project/bin/linux-x64-release/src/$PACKAGE_NAME.so"

  benchmark-profiler:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    resource_class: large
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          benchmarks: "yes"
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Build artifact
          shell: /bin/bash -l -eo pipefail
          command: make NPROC=16
      - benchmark-steps:
          profile_env: "1"
          module_path: "/root/project/src/$PACKAGE_NAME.so"
          benchmark_glob: "graph500-scale18-ef16_1hop.yml"
          triggering_env: "circleci.profilers" # results generated with profilers attached are not mixed with the ones without it

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

always: &always
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
        - /^perf-.*$/
    tags:
      ignore: /.*/

on-integ-branch-cron: &on-integ-branch-cron
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
        - /^perf-.*$/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
        - /^perf-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  build_and_package:
    when:
      << pipeline.parameters.run_default_flow >>
    jobs:
      - build-linux-debian:
          name: build
          <<: *not-on-integ-branch
      - build-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [jammy, focal, bionic, xenial, centos7, rocky8, bullseye]
      - build-arm-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [jammy, focal, bionic]
      - build-macos:
          context: common
          <<: *on-integ-and-version-tags
      - coverage:
          <<: *always
      - sanitize:
          name: sanitize-<< matrix.san-type >>
          <<: *always
          matrix:
            parameters:
              san-type: [address]
      - upload-artifacts:
          name: upload-artifacts-to-staging-lab
          staging-lab: "1"
          context: common
          <<: *on-integ-branch
          requires:
            - build-platforms
            - build-arm-platforms
            - build-macos
      - upload-artifacts:
          name: upload-release-artifacts
          context: common
          <<: *on-version-tags
          requires:
            - build-platforms
            - build-arm-platforms
            - build-macos
      - release-automation:
          <<: *on-version-tags
          context: common
          requires:
            - upload-release-artifacts
      - benchmark:
          <<: *on-integ-and-version-tags
          context: common

  benchmark-flow-label:
    when:
      << pipeline.parameters.run_benchmark_flow_label >>
    jobs:
      - benchmark:
          context: common
          <<: *always

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          <<: *on-integ-branch-cron
    jobs:
      - build-linux-debian:
          name: build-with-redis-<<matrix.redis_version>>
          matrix:
            parameters:
              redis_version: ["6.0", "6.2", "7", "unstable"]
      - valgrind-test:
          <<: *on-integ-branch-cron
      - fuzzer:
          name: nightly-fuzzer

  nightly-perf-once-a-week:
    triggers:
      - schedule:
          #  “At 07:00 on Mondays.”
          cron: "00 07 * * 1"
          filters:
            branches:
              only: master
    jobs:
      - benchmark:
          context: common
