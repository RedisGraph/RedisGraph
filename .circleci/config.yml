version: 2.1
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

jobs:
  build:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - checkout
      - run:
          name: Fetch submodules
          command: >-
            git submodule update --init --recursive

      - run:
          name: Install prerequisite
          command: |
            apt-get -qq update
            apt-get install -y --no-install-recommends ca-certificates wget git
            apt-get install -y --no-install-recommends python python-pip python-psutil
            apt-get install -y --no-install-recommends build-essential cmake m4 automake autoconf libtool peg libgomp1 valgrind astyle
            python -m pip install wheel
            python -m pip install setuptools --upgrade
            # stick to strict order in the following pakcages:
            python -m pip install git+https://github.com/Grokzen/redis-py-cluster.git@master
            python -m pip install git+https://github.com/RedisLabsModules/RLTest.git@master
            python -m pip install git+https://github.com/RedisLabs/RAMP@master
            python -m pip install -r tests/requirements.txt

      # Validate source complies with formatting
      #- run:
          # name: Formatting
          # command: astyle --options=.astylerc -R "./*.c,*.h" --dry-run -Q

      # Load GraphBLAS from cache if possible.
      - restore_cache:
          keys:
          - GraphBLAS3.2-{{checksum "./deps/GraphBLAS/README.md"}}

      # Load libcypher-parser from cache if possible.
      - restore_cache:
          keys:
          - libcypher-parser-{{checksum "./deps/libcypher-parser/lib/src/parser.leg"}}

      - run:
          name: Build
          command: make

      # Save GraphBLAS to cache.
      - save_cache:
          paths:
            - deps/GraphBLAS
          key: GraphBLAS3.2-{{checksum "./deps/GraphBLAS/README.md"}}

      # Save libcypher-parser to cache.
      - save_cache:
          paths:
            - deps/libcypher-parser
          key: libcypher-parser-{{checksum "./deps/libcypher-parser/README.md"}}

      - run:
          name: Test
          command: make test
      - early_return_for_forked_pull_requests

      - run:
          name: Persist Artifacts
          command: |
            strip src/$MODULE_ARTIFACT
            mkdir -p /workspace/build && cp src/$MODULE_ARTIFACT /workspace
            cp ramp.yml /workspace/

      - persist_to_workspace:
          root: /workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

      - run:
          name: Test for memory leaks
          command: |
              # Replace the default Redis server with one linked to libc malloc rather than jemalloc.
              git clone https://github.com/antirez/redis.git; cd redis; git checkout 6.0.1; make valgrind; make install; cd ..
              make clean;
              make memcheck # Re-run the test suite, failing if definite memory leaks have been introduced.
          # Allow RediSearch global destructors.
          environment:
            RS_GLOBAL_DTORS: 1

  package_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  package_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip
            /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: >-
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  deploy_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  deploy_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"
            
  run_automation:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - run:
          name: Run QA Automation
          command: >-
            apt-get update &&
            apt-get -y install curl &&
            curl -k -X POST
            -H "Content-Type: application/json"
            -H "Authorization: Bearer $QA_AUTOMATION_ACCESS_TOKEN"
            -d '{"service_id":"single_module_test_cycle_sanity_and_extended", "name":"redisgraph automation-testing", "properties":{"sut_version":"5.6.0", "email_recipients":"graph@redislabs.com", "sut_environments":[], "tools_environment":{}, "module_name": "RedisGraph", "module_version":"master", "cycle_environments_setup":[{"teardown":true, "name":"rhel7.5-x86_64-aws", "concurrency":1}, {"teardown":true, "name":"bionic-amd64-aws", "concurrency":1}]}}'
            https://qa-automation-center.redislabs.com/processes

workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - package_branch:
          requires:
            - build
          filters:
            branches:
              only: master
      - package_release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: '/^v[0-9].*/'
      - deploy_branch:
          requires:
            - package_branch
      - run_automation:
          requires:
            - deploy_branch
      - deploy_release:
          filters:
            tags:
              only: '/^v[0-9].*/'
          requires:
            - package_release
