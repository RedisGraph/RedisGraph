version: 2.1

commands:
  # If this build is from a fork, stop executing the current job and return success.
  # This is useful to avoid steps that will fail due to missing credentials.
  early-return-for-forked-pull-requests:
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful."
              circleci step halt
            fi

  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            ./deps/readies/bin/getpy3

  persist-artifacts:
    steps:
      - persist_to_workspace:
          root: bin/artifacts
          paths:
            - 'snapshots/*.zip'
            - 'snapshots/*.tgz'
            - '*.zip'
            - '*.tgz'

  load-cached-deps:
    steps:
      # Load GraphBLAS from cache if possible.
      - restore_cache:
          keys:
          - GraphBLAS4.0-{{checksum "./deps/GraphBLAS/README.md"}}

      # Load libcypher-parser from cache if possible.
      - restore_cache:
          keys:
          - libcypher-parser-{{checksum "./deps/libcypher-parser/README.md"}}

  save-deps-cache:
    steps:
      # Save GraphBLAS to cache.
      - save_cache:
          paths:
            - deps/GraphBLAS
          key: GraphBLAS4.0-{{checksum "./deps/GraphBLAS/README.md"}}

      # Save libcypher-parser to cache.
      - save_cache:
          paths:
            - deps/libcypher-parser
          key: libcypher-parser-{{checksum "./deps/libcypher-parser/README.md"}}

  setup-prerequisits:
    steps:
      - setup-automation
      - run:
          name: Install prerequisites
          command: ./sbin/system-setup.py

  benchmark-automation:
    parameters:
      github_actor:
        type: string
        default: $CIRCLE_USERNAME
      module_path:
        type: string
        default: /workspace/$MODULE_ARTIFACT
    steps:
      - run:
          name: Install remote benchmark tool dependencies
          command: |
            VERSION=0.14.8 ./deps/readies/bin/getterraform
      - run:
          name: Install remote benchmark python dependencies
          command: python3 -m pip install -r ./tests/benchmarks/requirements.txt
      - run:
          name: Run CI benchmarks on aws
          no_output_timeout: 30m # given we use very large datasets we need this timeout
          command: |
              cd ./tests/benchmarks
              export AWS_ACCESS_KEY_ID=$PERFORMANCE_EC2_ACCESS_KEY
              export AWS_SECRET_ACCESS_KEY=$PERFORMANCE_EC2_SECRET_KEY
              export AWS_DEFAULT_REGION=$PERFORMANCE_EC2_REGION
              export EC2_PRIVATE_PEM=$PERFORMANCE_EC2_PRIVATE_PEM

              redisbench-admin run-remote \
                --module_path << parameters.module_path >> \
                --github_actor << parameters.github_actor >> \
                --github_repo $CIRCLE_PROJECT_REPONAME \
                --github_org $CIRCLE_PROJECT_USERNAME \
                --github_sha $CIRCLE_SHA1 \
                --github_branch $CIRCLE_BRANCH \
                --upload_results_s3 \
                --triggering_env circleci \
                --required-module graph \
                --push_results_redistimeseries

  platform-build-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Build for platform
          command: |
            cd build/docker
            make build OSNICK=<<parameters.platform>> ARTIFACTS=1 TEST=1 SHOW=1
      - early-return-for-forked-pull-requests
      - run:
          name: Build for platform (publish)
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> OFFICIAL=0 SHOW=1 VERBOSE=1
      - persist-artifacts

  vm-build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install Docker
          command: bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - run:
          name: Build for platform
          command: |
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH ARTIFACTS=1 TEST=1 SHOW=1
          no_output_timeout: 30m
      - early-return-for-forked-pull-requests
      - run:
          name: Build for platform (publish)
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=0 SHOW=1 VERBOSE=1
      - persist-artifacts

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - early-returns
      - checkout-all
      - setup-prerequisits
      - load-cached-deps
      - run:
          name: Build
          command: bash -l -c "make all package"
      - save-deps-cache
      - run:
          name: Test
          command: bash -l -c "make test"
      - run:
          name: Run 30-second fuzz test
          command: bash -l -c "make fuzz"
      - early-return-for-forked-pull-requests
      - run:
          name: Persist Artifact for CI benchmarks
          command: |
            strip src/$MODULE_ARTIFACT
            mkdir -p /workspace
            cp src/$MODULE_ARTIFACT /workspace
      - persist_to_workspace:
          root: /workspace
          paths:
            - '*.so'

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - early-returns
      - checkout-all
      - setup-prerequisits
      - load-cached-deps
      - run:
          name: Build for coverage
          command: bash -l -c "make COV=1"
      - run:
          name: Test with coverage
          command: |
            bash -l -c "make test COV=1"
            bash -l -c "make cov-upload"
          no_output_timeout: 30m

  build_memcheck:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - early-returns
      - checkout-all
      - setup-prerequisits
      - load-cached-deps
      - attach_workspace:
          at: /workspace
      - run:
          name: Test for memory leaks
          command: |
            # Replace the default Redis server with one linked to libc malloc rather than jemalloc
            python3 ./deps/readies/bin/getredis --force --valgrind
            # Re-run the test suite, failing if definite memory leaks have been introduced
            bash -l -c "make memcheck"
          # Allow RediSearch global destructors
          environment:
            RS_GLOBAL_DTORS: 1

  build_macos:
    macos:
      xcode: 12.4.0
    steps:
      - early-returns
      - checkout-all
      - setup-prerequisits
      - run:
          name: Build
          command: |
            bash -l -c "make all package"
      - run:
          name: Test
          command: bash -l -c "make test"
      - persist-artifacts

  platform_build:
    parameters:
      platform:
        type: string
    docker:
      - image: debian:buster
    steps:
      - platform-build-steps:
          platform: <<parameters.platform>>

  build-arm-platforms:
    parameters:
      platform:
        type: string
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  deploy_branch:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - attach_workspace:
          at: artifacts
      - run:
          name: Deploy to S3
          command: |
            du -ah --apparent-size artifacts/snapshots/*
            for f in artifacts/snapshots/*.zip artifacts/snapshots/*.tgz; do
              aws s3 cp $f s3://redismodules/$PACKAGE_NAME/snapshots/ --acl public-read
            done

  deploy_release:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - attach_workspace:
          at: artifacts
      - run:
          name: Deploy to S3
          command: |
            du -ah --apparent-size artifacts/*
            for f in artifacts/*.zip artifacts/*.tgz; do
              aws s3 cp $f s3://redismodules/$PACKAGE_NAME/ --acl public-read
            done

  release_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run

  nightly_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run
      - run:
          name: Run 10-minute fuzz test
          command: bash -l -c "FUZZ_TIMEOUT=600 make fuzz"

  performance_ci_automation_not_integ:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - early-returns
      - checkout
      - setup-prerequisits
      - attach_workspace:
          at: /workspace
      - benchmark-automation

  performance_ci_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - early-returns
      - checkout
      - setup-prerequisits
      - attach_workspace:
          at: /workspace
      - run:
          name: Unzip module artifact
          command: |
            unzip `ls /workspace/$PACKAGE_NAME.Linux-ubuntu18.04-x86_64.*.zip |grep -v rce` -d /workspace/
      - benchmark-automation

  nightly_performance_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - early-returns
      - checkout-all
      - setup-prerequisits
      - attach_workspace:
          at: /workspace
      - run:
          name: Build artifact
          command: bash -l -c make
      - benchmark-automation:
          github_actor: "ci.nightly"
          module_path: "/root/project/src/$PACKAGE_NAME.so"

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
    tags:
      only: /^v[0-9].*/

context: &context
  context:
    - common

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          <<: *context
          <<: *not-on-integ-branch
      - coverage:
          <<: *context
          <<: *on-any-branch
      - build_memcheck:
          <<: *context
          <<: *on-any-branch
      - build_macos:
          <<: *context
          <<: *on-integ-and-version-tags
      - platform_build:
          <<: *context
          <<: *on-integ-and-version-tags
          matrix:
            parameters:
              platform: [bionic, xenial, centos7, centos8]
      - build-arm-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [bionic]
      - deploy_branch:
          <<: *context
          <<: *on-integ-branch
          requires:
            - platform_build
            - build_macos
      - release_automation:
          <<: *context
          <<: *on-version-tags
          requires:
            - deploy_release
      - deploy_release:
          <<: *context
          <<: *on-version-tags
          requires:
            - platform_build
            - build_macos
      - performance_ci_automation_not_integ:
          <<: *context
          <<: *not-on-integ-branch
          requires:
            - build
      - performance_ci_automation:
          <<: *context
          <<: *on-integ-and-version-tags
          requires:
            - platform_build

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          filters:
            branches:
              only: master
    jobs:
      - nightly_performance_automation:
          <<: *context
