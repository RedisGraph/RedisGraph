version: 2.1

commands:
  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  # If this build is from a fork, stop executing the current job and return success.
  # This is useful to avoid steps that will fail due to missing credentials.
  early-return-for-forked-pull-requests:
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            if [[ $(uname -s) == Darwin ]]; then rm -f /usr/local/bin/python3; fi
            ./deps/readies/bin/getpy3
      - run:
          name: Setup automation (2)
          shell: /bin/bash -l -eo pipefail
          command: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            ./deps/readies/bin/getpy2
            ./deps/readies/bin/getaws
            ls -l /usr/local/bin/python* || true
            echo "python3: $(command -v python3)"
            python3 --version
            python3 -m pip list

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "6"
      getredis_params:
        type: string
        default: ""
      benchmarks:
        type: string
        default: "no"
    steps:
      - setup-automation
      - run:
          name: Install remote benchmark python dependencies
          command: |
            if [[ "<<parameters.benchmarks>>" == "yes" ]]; then
              python3 -m pip install -r ./tests/benchmarks/requirements.txt
            fi
      - run:
          name: System setup
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py
            python3 -m pip list
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: |
            python3 ./deps/readies/bin/getredis -v '<<parameters.redis_version>>' --force <<parameters.getredis_params>>
            redis-server --version
      - run:
          name: Install remote benchmark tool dependencies
          command: |
            if [[ "<<parameters.benchmarks>>" == "yes" ]]; then
              VERSION=0.14.8 ./deps/readies/bin/getterraform
            fi

  save-tests-logs:
    steps:
      - run:
          name: Cleanup test log dir
          command: |
            rm -f tests/flow/logs/*.{aof,rdb}
            rm -f tests/tck/logs/*.{aof,rdb}
          when: always
      - store_artifacts:
          path: tests/flow/logs
      - store_artifacts:
          path: tests/tck/logs

  persist-artifacts:
    steps:
      - early-return-for-forked-pull-requests
      - run:
          name: List artifacts
          command: |
            cd bin/artifacts
            du -ah --apparent-size *
      - persist_to_workspace:
          root: bin/
          paths:
            - artifacts/*.zip
            - artifacts/*.tgz
            - artifacts/*.tar

  platform-build-steps:
    parameters:
      platform:
        type: string
      official:
        type: string
        default: "1"
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Build for platform
          shell: /bin/bash -l -eo pipefail
          command: |
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION="$CIRCLE_TAG" BRANCH="$CIRCLE_BRANCH" TEST=1 OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Publish container
          shell: /bin/bash -l -eo pipefail
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION="$CIRCLE_TAG" BRANCH="$CIRCLE_BRANCH" OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
      - persist-artifacts

  vm-build-platforms-steps:
    parameters:
      platform:
        type: string
      official:
        type: string
        default: "1"
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install Docker
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getdocker
      - run:
          name: Build for platform
          command: |
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
          no_output_timeout: 30m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1 VERBOSE=1
            fi
      - run:
          name: Publish container
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=<<parameters.official>> SHOW=1 VERBOSE=1
      - persist-artifacts

  benchmark-automation:
    parameters:
      github_actor:
        type: string
        default: $CIRCLE_USERNAME
      module_path:
        type: string
        default: ~/workspace/$MODULE_ARTIFACT
    steps:
      - run:
          name: Install remote benchmark tool dependencies
          command: |
            VERSION=0.14.8 ./deps/readies/bin/getterraform
      - run:
          name: Install remote benchmark python dependencies
          command: python3 -m pip install -r ./tests/benchmarks/requirements.txt
      - run:
          name: Run CI benchmarks on aws
          no_output_timeout: 30m # given we use very large datasets we need this timeout
          command: |
            cd tests/benchmarks
            export AWS_ACCESS_KEY_ID=$PERFORMANCE_EC2_ACCESS_KEY
            export AWS_SECRET_ACCESS_KEY=$PERFORMANCE_EC2_SECRET_KEY
            export AWS_DEFAULT_REGION=$PERFORMANCE_EC2_REGION
            export EC2_PRIVATE_PEM=$PERFORMANCE_EC2_PRIVATE_PEM

            redisbench-admin run-remote \
              --module_path << parameters.module_path >> \
              --github_actor << parameters.github_actor >> \
              --github_repo $CIRCLE_PROJECT_REPONAME \
              --github_org $CIRCLE_PROJECT_USERNAME \
              --github_sha $CIRCLE_SHA1 \
              --github_branch $CIRCLE_BRANCH \
              --upload_results_s3 \
              --triggering_env circleci \
              --required-module graph \
              --push_results_redistimeseries

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    resource_class: large
    parameters:
      persist:
        type: string
        default: "yes"
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Build
          shell: /bin/bash -l -eo pipefail
          command: make all package
      - run:
          name: Test
          shell: /bin/bash -l -eo pipefail
          command: make test
      - early-return-for-forked-pull-requests
      - run:
          name: Persist artifacts?
          command: |
            if [[ "<<parameters.persist>>" != "yes" ]]; then
              circleci step halt
            fi
      - persist-artifacts

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Build for coverage
          shell: /bin/bash -l -eo pipefail
          command: make COV=1
      - run:
          name: Test with coverage
          shell: /bin/bash -l -eo pipefail
          command: |
            make test COV=1
            make cov-upload
          no_output_timeout: 45m
      - save-tests-logs

  build_memcheck:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - attach_workspace:
          at: /workspace
      - run:
          name: Test for memory leaks
          shell: /bin/bash -l -eo pipefail
          command: |
            # Replace the default Redis server with one linked to libc malloc rather than jemalloc
            python3 ./deps/readies/bin/getredis --force --valgrind
            # Re-run the test suite, failing if definite memory leaks have been introduced
            make memcheck
          # Allow RediSearch global destructors
          environment:
            RS_GLOBAL_DTORS: 1
      - run:
          name: Cleanup test log dir
          command: |
            if [[ -d tests/flow/logs ]]; then
              cd tests/flow/logs
              rm -f *.aof *.rdb
            fi
      - store_artifacts:
          path: ~/project/tests/flow/logs

  platform_build:
    parameters:
      platform:
        type: string
    docker:
      - image: debian:buster
    steps:
      - platform-build-steps:
          platform: <<parameters.platform>>

  build_macos:
    macos:
      xcode: 12.5.1
    resource_class: macos.x86.medium.gen2
    parameters:
      upload:
        type: string
        default: "yes"
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Build
          shell: /bin/bash -l -eo pipefail
          command: |
            make all package
      - run:
          name: Test
          shell: /bin/bash -l -eo pipefail
          command: make test
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH && "<<parameters.upload>>" == "yes" ]]; then
                make upload-artifacts SHOW=1 VERBOSE=1
            fi
      - save-tests-logs
      - persist-artifacts

  upload-artifacts:
    parameters:
      staging-lab:
        type: string
        default: "0"
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Upload artifacts to S3
          command: |
            mkdir -p bin
            ln -s ~/workspace/artifacts bin/artifacts
            if [[ -n $CIRCLE_TAG && "<<parameters.staging-lab>>" != 1 ]]; then
                make upload-release SHOW=1
            else
                make upload-release SHOW=1 STAGING=1
            fi

  release_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run

  nightly_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run

  performance_ci_automation_not_integ:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout
      - install-prerequisites
      - attach_workspace:
          at: /workspace
      - run:
          name: Arrange artifacts
          command: |
            mkdir -p bin
            ln -s /workspace/artifacts bin/artifacts
      - benchmark-automation

  performance_ci_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout
      - install-prerequisites:
          benchmarks: "yes"
      - attach_workspace:
          at: /workspace
      - run:
          name: Unzip module artifact
          command: |
            unzip `ls /workspace/$PACKAGE_NAME.Linux-ubuntu18.04-x86_64.*.zip | grep -v rce` -d /workspace/
      - benchmark-automation

  nightly_performance_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          benchmarks: "yes"
      - attach_workspace:
          at: /workspace
      - run:
          name: Build artifact
          command: bash -l -c make
      - benchmark-automation:
          github_actor: "ci.nightly"
          module_path: "/root/project/src/$PACKAGE_NAME.so"

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

always: &always
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-integ-branch-cron: &on-integ-branch-cron
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
        - /^perf-.*$/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/

on-perf-tags: &on-perf-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^perf-.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          <<: *not-on-integ-branch
      - platform_build:
          #@<<: *on-integ-and-version-tags
          <<: *always
          context: common
          matrix:
            parameters:
              platform: [bionic, xenial, centos7, rocky8]
      - build_macos:
          context: common
          #<<: *on-integ-and-version-tags
          <<: *never
      - coverage:
          <<: *always
      - build_memcheck:
          <<: *on-any-branch
          context: common
      - upload-artifacts:
          name: upload-artifacts-to-staging-lab
          staging-lab: "1"
          context: common
          <<: *on-integ-branch
          requires:
            - platform_build
            #- build_macos
      - upload-artifacts:
          name: upload-release-artifacts
          context: common
          <<: *on-version-tags
          requires:
            - platform_build
            #- build_macos
      - release_automation:
          <<: *on-version-tags
          context: common
          requires:
            - upload-release-artifacts
      - performance_ci_automation_not_integ:
          <<: *not-on-integ-branch
          context: common
          requires:
            - build
      - performance_ci_automation:
          <<: *on-integ-and-version-tags
          context: common
          requires:
            - platform_build

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          filters:
            branches:
              only: master
    jobs:
      - nightly_performance_automation:
          context: common
