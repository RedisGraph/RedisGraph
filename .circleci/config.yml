version: 2.1

commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            (mkdir -p deps; cd deps; git clone https://github.com/RedisLabsModules/readies.git)
            PIP=1 ./deps/readies/bin/getpy2
            python2 -m pip install -r ./deps/readies/paella/requirements.txt

jobs:
  build:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - checkout
      - run:
          name: Fetch submodules
          command: |
            git submodule update --init --recursive

      - run:
          name: Install prerequisite
          command: |
            apt-get -qq update
            apt-get install -y --no-install-recommends ca-certificates wget git
            apt-get install -y --no-install-recommends python python-pip python-psutil
            apt-get install -y --no-install-recommends build-essential cmake m4 automake autoconf libtool peg libgomp1 valgrind astyle
            python -m pip install wheel
            python -m pip install setuptools --upgrade
            # stick to strict order in the following pakcages:
            python -m pip install git+https://github.com/Grokzen/redis-py-cluster.git@master
            python -m pip install git+https://github.com/RedisLabsModules/RLTest.git@master
            python -m pip install git+https://github.com/RedisLabs/RAMP@master
            python -m pip install -r tests/requirements.txt

      - setup-automation

      # Validate source complies with formatting
      #- run:
          # name: Formatting
          # command: astyle --options=.astylerc -R "./*.c,*.h" --dry-run -Q

      # Load GraphBLAS from cache if possible.
      - restore_cache:
          keys:
          - GraphBLAS3.2-{{checksum "./deps/GraphBLAS/README.md"}}

      # Load libcypher-parser from cache if possible.
      - restore_cache:
          keys:
          - libcypher-parser-{{checksum "./deps/libcypher-parser/lib/src/parser.leg"}}

      - run:
          name: Build
          command: make

      # Save GraphBLAS to cache.
      - save_cache:
          paths:
            - deps/GraphBLAS
          key: GraphBLAS3.2-{{checksum "./deps/GraphBLAS/README.md"}}

      # Save libcypher-parser to cache.
      - save_cache:
          paths:
            - deps/libcypher-parser
          key: libcypher-parser-{{checksum "./deps/libcypher-parser/README.md"}}

      - run:
          name: Test
          command: make test
      - early_return_for_forked_pull_requests

      - run:
          name: Persist Artifacts
          command: |
            strip src/$MODULE_ARTIFACT
            mkdir -p /workspace/build && cp src/$MODULE_ARTIFACT /workspace
            cp ramp.yml /workspace/

      - persist_to_workspace:
          root: /workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

      - run:
          name: Test for memory leaks
          command: |
              # Replace the default Redis server with one linked to libc malloc rather than jemalloc.
              python ./deps/readies/bin/getredis --force --valgrind
              make clean
              make memcheck # Re-run the test suite, failing if definite memory leaks have been introduced.
          # Allow RediSearch global destructors.
          environment:
            RS_GLOBAL_DTORS: 1

  package_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  package_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip
            /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: >-
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  deploy_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  deploy_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  release_automation:
    docker:
      - image: redisfab/rmbuilder:6.0.9-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run

  nightly_automation:
    docker:
      - image: redisfab/rmbuilder:6.0.9-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run


on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-master-and-version-tags: &on-master-and-version-tags
  filters:
    branches:
      only:
        - master
    tags:
      only: /^v[0-9].*/


workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          <<: *on-any-branch
      - package_branch:
          <<: *on-master
          requires:
            - build
      - package_release:
          <<: *on-version-tags
          requires:
            - build
      - deploy_branch:
          requires:
            - package_branch
      - release_automation:
          requires:
            - deploy_branch
      - deploy_release:
          <<: *on-version-tags
          requires:
            - package_release

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          <<: *on-master
    jobs:
      - nightly_automation
