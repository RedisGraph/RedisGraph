version: 2.1
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

jobs:
  build:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - checkout
      - run:
          name: Fetch submodules
          command: >-
            git submodule update --init --recursive

      - run:
          name: Install prerequisite
          command: >-
            pip install git+https://github.com/RedisGraph/redisgraph-py.git@master &&
            pip install psutil behave &&
            pip install redis-py-cluster &&
            pip install git+https://github.com/RedisLabsModules/RLTest.git@master &&
            apt-get update; apt-get install -y automake peg libtool autoconf cmake valgrind astyle

      # Validate source complies with formatting
      #- run:
          # name: Formatting
          # command: astyle --options=.astylerc -R "./*.c,*.h" --dry-run -Q

      # Load libcypher-parser from cache if possible.
      - restore_cache:
          keys:
          - libcypher-parser-{{checksum "./deps/libcypher-parser/lib/src/parser.leg"}}

      - run:
          name: Build
          command: make

      # Save libcypher-parser to cache.
      - save_cache:
          paths:
            - deps/libcypher-parser
          key: libcypher-parser-{{checksum "./deps/libcypher-parser/README.md"}}

      - run:
          name: Test
          command: make test
      
      - early_return_for_forked_pull_requests

      - run:
          name: Persist Artifacts
          command: |
            strip src/$MODULE_ARTIFACT
            mkdir -p /workspace/build && cp src/$MODULE_ARTIFACT /workspace
            cp ramp.yml /workspace/
      
      - persist_to_workspace:
          root: /workspace
          paths:
            - '*.so'
            - ramp.yml
            - build  
  package_branch:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  package_release:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip
            /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  deploy_branch:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"
  deploy_release:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"
  deploy_docs:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - checkout
      - run:
          name: Build Docs
          command: mkdocs build
      - run:
          name: Deploy Docs to S3
          command: >-
            aws s3 cp site s3://oss.redislabs.com/$WEBSITE_FOLDER/ --acl
            public-read --recursive
  run_automation:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - run:
          name: Run QA Automation
          command: >-
            apt-get update &&
            apt-get -y install curl &&
            curl -k -u $QA_AUTOMATION_USERNAME:$QA_AUTOMATION_PASS -X POST
            -H "Content-Type: application/json"
            -d '{"service_id":"single_module_test_cycle_sanity_and_extended", "name":"redisgraph automation-testing", "properties":{"sut_version":"5.4.11", "email_recipients":"graph@redislabs.com", "sut_environments":[], "tools_environment":{}, "module_name": "RedisGraph", "module_version":"master", "cycle_environments_setup":[{"teardown":true, "name":"xenial-amd64-aws", "concurrency":1}, {"teardown":true, "name":"bionic-amd64-aws", "concurrency":1}]}}'
            https://qa-automation-center.redislabs.com/processes
workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/      
      - package_branch:
          requires:
            - build
          filters:
            branches:
              only: master      
      - package_release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: '/^v[0-9].*/'
      - deploy_branch:
          requires:
            - package_branch
      - run_automation:
          requires:
            - deploy_branch
      - deploy_release:
          filters:
            tags:
              only: '/^v[0-9].*/'
          requires:
            - package_release
      - deploy_docs:
          filters:
            branches:
              only: master
