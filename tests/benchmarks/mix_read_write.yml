name: "MIX_READ_WRITE"
remote:
  - setup: redisgraph-r5
  - type: oss-standalone
dbconfig:
  - init_commands:
    - '"GRAPH.QUERY" "g" "UNWIND range(0, 10000) AS x CREATE (:N)"'
clientconfig:
  - tool: redisgraph-benchmark-go
  - parameters:
    - graph: "g"
    - rps: 0
    - clients: 32
    - threads: 4
    - connections: 32
    - requests: 1000000
    - random-int-max: 10000
    - random-seed: 12345
    - queries:
      - { q: "CYPHER Id1=__rand_int__ MATCH (n:N) WHERE id(n) > $Id1 RETURN n LIMIT 100", ratio: 0.8 }
      - { q: "CYPHER Id1=__rand_int__ MATCH (n:N) WHERE id(n) = $Id1 SET n.v = $Id1 WITH n MATCH (n:N) WHERE id(n) > $Id1 RETURN n LIMIT 100", ratio: 0.05 }
      - { q: "CYPHER Id1=__rand_int__ Id2=__rand_int__ MATCH (n:N), (m:N) WHERE id(n) = $Id1 AND id(m) = $Id2  MERGE (n)-[:R]->(m) WITH n MATCH (n:N) WHERE id(n) > $Id1 RETURN n LIMIT 100", ratio: 0.05 }
      - { q: "CYPHER Id1=__rand_int__ MATCH (n:N) WHERE id(n) = $Id1 DELETE n WITH n MATCH (n:N) WHERE id(n) > $Id1 RETURN n LIMIT 100", ratio: 0.05 }
      - { q: "CYPHER Id1=__rand_int__ MATCH (n:N) WHERE id(n) = $Id1 CREATE (:N) WITH n MATCH (n:N) WHERE id(n) > $Id1 RETURN n LIMIT 100", ratio: 0.05 }
kpis:
  - ge: { $.OverallQueryRates.Total: 7000 }
