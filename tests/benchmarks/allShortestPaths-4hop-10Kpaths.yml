name: "ENTITY_COUNT"
description: '
           ┌────┐
           │ S0 │
           └────┘
       /     |          \
      /      |           \
     /       |            \
  ┌────┐   ┌────┐         ┌────┐
  │ S  │   │ S  │ ...100  │ S  │
  └────┘   └────┘         └────┘
       \     |            /
        \    |           /
         \   |          /
           ┌────┐
           │ S1 │
           └────┘
       /     |          \
      /      |           \
     /       |            \
  ┌────┐   ┌────┐         ┌────┐
  │ S  │   │ S  │ ...100  │ S  │
  └────┘   └────┘         └────┘
       \     |            /
        \    |           /
         \   |          /
           ┌────┐
           │ S2 │
           └────┘
'
remote:
  - setup: redisgraph-r5
  - type: oss-standalone
dbconfig:
  - init_commands:
    - '"GRAPH.QUERY" "g" "CREATE (s0:S0) CREATE (s1:S1) WITH * UNWIND range(1, 100) AS x CREATE (s0)-[:R]->(:S)-[:R]->(s1)"'
    - '"GRAPH.QUERY" "g" "MATCH (s1:S1) CREATE (s2:S2) WITH * UNWIND range(1, 100) AS x CREATE (s1)-[:R]->(:S)-[:R]->(s2)"'
clientconfig:
  - tool: redisgraph-benchmark-go
  - parameters:
    - graph: "g"
    - rps: 0
    - clients: 32
    - threads: 4
    - connections: 32
    - requests: 50000
    - queries:
      - { q: "MATCH (s:S0), (t:S2) WITH * MATCH p = allShortestPaths((s)-[:R*]->(t)) RETURN count(p)", ratio: 1 }
kpis:
  - le: { $.OverallClientLatencies.Total.q50: 200.0 }
  - ge: { $.OverallQueryRates.Total: 100 }
