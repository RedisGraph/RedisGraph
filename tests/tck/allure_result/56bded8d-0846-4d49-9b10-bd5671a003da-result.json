{"status": "broken", "name": "In-query call to procedure should fail if too many explicit argument are given", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486123034, "historyId": "fed1be4de2a3c9df0829301c74a97d29", "start": 1578486122914, "steps": [{"status": "passed", "start": 1578486122916, "stop": 1578486123033, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "837835f3-a1ec-4319-818f-91356cd5743c-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486123033, "start": 1578486123033, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)"}, {"status": "skipped", "start": 1578486123034, "stop": 1578486123034, "name": "When executing query", "attachments": [{"source": "1a3bd7f7-5da7-4c9a-8d5b-6b75faaea330-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "broken", "start": 1578486123034, "stop": 1578486123034, "name": "Then a SyntaxError should be raised at compile time: InvalidNumberOfArguments", "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'a SyntaxError should be raised at compile time: InvalidNumberOfArguments')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then a SyntaxError should be raised at compile time: InvalidNumberOfArguments')\n\n"}}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "uuid": "97af9832-f151-4aae-823e-4cefb6e94e97"}