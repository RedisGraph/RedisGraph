{"status": "broken", "name": "Standalone call to procedure with argument of type NUMBER accepts value of type FLOAT", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486121017, "historyId": "569d7abded853959245a254af8e06a3e", "start": 1578486120803, "steps": [{"status": "passed", "start": 1578486120805, "stop": 1578486121013, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "fc0a1c24-02f3-46b9-885e-5a887256babd-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486121014, "start": 1578486121013, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)"}, {"status": "skipped", "start": 1578486121016, "stop": 1578486121016, "name": "When executing query", "attachments": [{"source": "8f68eee7-53a1-4527-a059-9434f15b2d7c-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "skipped", "start": 1578486121016, "stop": 1578486121016, "name": "Then the result should be, in order", "attachments": [{"source": "ada35ec9-fc8c-4fd0-87c9-53884cf481f7-attachment.csv", "type": "text/csv", "name": ".table"}]}, {"status": "skipped", "start": 1578486121017, "stop": 1578486121017, "name": "And no side effects"}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "uuid": "c109c9e5-4eb0-4b62-880b-3e53dccf8401"}