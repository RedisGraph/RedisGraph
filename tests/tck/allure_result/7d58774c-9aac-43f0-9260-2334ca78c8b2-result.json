{"status": "broken", "name": "Standalone call to procedure should fail if input type is wrong", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486122302, "historyId": "2d52a7bcbb7422c8c893133ffbfa0b00", "start": 1578486122177, "steps": [{"status": "passed", "start": 1578486122179, "stop": 1578486122299, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "0f8b1fb7-9364-4cc7-8135-2ac835029b4a-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486122300, "start": 1578486122300, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)"}, {"status": "skipped", "start": 1578486122302, "stop": 1578486122302, "name": "When executing query", "attachments": [{"source": "9fad5275-b9b7-4dae-b83b-2102a502b22a-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "skipped", "start": 1578486122302, "stop": 1578486122302, "name": "Then a SyntaxError should be raised at compile time: InvalidArgumentType"}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "uuid": "2641063d-365c-4da4-8dff-b18982e7a7a6"}