{"status": "broken", "name": "In-query call to procedure with argument of type NUMBER accepts value of type INTEGER", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486120800, "historyId": "d48a894c81c59b7ffe9bf4ec53fe3949", "start": 1578486120674, "steps": [{"status": "passed", "start": 1578486120676, "stop": 1578486120796, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "66bd85a8-113f-4996-8050-22238bc49b69-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486120798, "start": 1578486120797, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)"}, {"status": "skipped", "start": 1578486120799, "stop": 1578486120800, "name": "When executing query", "attachments": [{"source": "e27af675-65b0-42b2-bb07-738c0df6fe7f-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "skipped", "start": 1578486120800, "stop": 1578486120800, "name": "Then the result should be, in order", "attachments": [{"source": "2a3dfb8c-5438-4154-82fd-690a1c55b323-attachment.csv", "type": "text/csv", "name": ".table"}]}, {"status": "skipped", "start": 1578486120800, "stop": 1578486120800, "name": "And no side effects"}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "uuid": "a1c8f7dc-1c42-4884-a8a9-aaaeb45e6c4d"}