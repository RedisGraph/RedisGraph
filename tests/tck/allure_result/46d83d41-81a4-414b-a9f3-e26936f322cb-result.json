{"status": "broken", "name": "In-query call to procedure with argument of type NUMBER accepts value of type FLOAT", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486121147, "historyId": "5a3464a16d28d76fbd07471005a0deb5", "start": 1578486121019, "steps": [{"status": "passed", "start": 1578486121021, "stop": 1578486121143, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "0e0a600b-0c9d-4680-b6cf-b0f5a7489be5-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486121144, "start": 1578486121143, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)"}, {"status": "skipped", "start": 1578486121146, "stop": 1578486121146, "name": "When executing query", "attachments": [{"source": "410ed7ea-4cdb-4999-8cd8-bf6ab1162ffe-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "skipped", "start": 1578486121146, "stop": 1578486121147, "name": "Then the result should be, in order", "attachments": [{"source": "f1d3f842-37a8-4c9d-994b-3ee77eadcb1d-attachment.csv", "type": "text/csv", "name": ".table"}]}, {"status": "skipped", "start": 1578486121147, "stop": 1578486121147, "name": "And no side effects"}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "uuid": "d3849208-3f3f-444b-a46a-26586c244965"}