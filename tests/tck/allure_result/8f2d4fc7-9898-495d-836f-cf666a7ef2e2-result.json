{"status": "broken", "name": "Standalone call to procedure should fail if too many explicit argument are given", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486122911, "historyId": "fe4d9466ea72e44d4d2b063afe8e94ab", "start": 1578486122786, "steps": [{"status": "passed", "start": 1578486122788, "stop": 1578486122908, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "a70b4357-a8bf-4c06-9534-dc8119b1f9c0-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486122910, "start": 1578486122909, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)"}, {"status": "skipped", "start": 1578486122911, "stop": 1578486122911, "name": "When executing query", "attachments": [{"source": "6047c5b4-0c45-4c9f-99ac-8fb7782df296-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "broken", "start": 1578486122911, "stop": 1578486122911, "name": "Then a SyntaxError should be raised at compile time: InvalidNumberOfArguments", "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'a SyntaxError should be raised at compile time: InvalidNumberOfArguments')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then a SyntaxError should be raised at compile time: InvalidNumberOfArguments')\n\n"}}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "uuid": "2a5205e0-df7b-472b-8092-75daefc7e230"}