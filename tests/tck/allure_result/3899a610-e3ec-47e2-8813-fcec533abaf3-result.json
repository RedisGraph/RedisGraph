{"status": "broken", "name": "In-query call to procedure should fail if input type is wrong", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486122430, "historyId": "703ce8fe0647477a7edcf3b40bc51d84", "start": 1578486122305, "steps": [{"status": "passed", "start": 1578486122307, "stop": 1578486122427, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "86e569ab-4c84-435d-b7eb-bff1e8b4a6f6-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486122428, "start": 1578486122427, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)"}, {"status": "skipped", "start": 1578486122429, "stop": 1578486122430, "name": "When executing query", "attachments": [{"source": "d4efdeb4-a71d-428e-8fa3-bb62f85096d7-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "skipped", "start": 1578486122430, "stop": 1578486122430, "name": "Then a SyntaxError should be raised at compile time: InvalidArgumentType"}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "uuid": "e112046e-af39-4b16-b40f-c3fdc0124b0d"}