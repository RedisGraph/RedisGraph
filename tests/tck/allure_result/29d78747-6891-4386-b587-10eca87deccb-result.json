{"status": "broken", "name": "Standalone call to procedure with argument of type NUMBER accepts value of type INTEGER", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486120671, "historyId": "3445921602514c60026584d501fe6f9e", "start": 1578486120547, "steps": [{"status": "passed", "start": 1578486120549, "stop": 1578486120667, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "09cb5406-14e6-48c0-b92e-df093db03d2a-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486120669, "start": 1578486120668, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)"}, {"status": "skipped", "start": 1578486120670, "stop": 1578486120671, "name": "When executing query", "attachments": [{"source": "d09ac4b9-96e1-48b3-b900-61ce6e3607a8-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "skipped", "start": 1578486120671, "stop": 1578486120671, "name": "Then the result should be, in order", "attachments": [{"source": "0deec5d4-60ed-4127-9470-b8beba251bd5-attachment.csv", "type": "text/csv", "name": ".table"}]}, {"status": "skipped", "start": 1578486120671, "stop": 1578486120671, "name": "And no side effects"}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then there exists a procedure test.my.proc(in :: NUMBER?) :: (out :: STRING?)')\n\n"}, "uuid": "2f205c27-7e19-4c61-aaa8-3f4a8ee51b11"}