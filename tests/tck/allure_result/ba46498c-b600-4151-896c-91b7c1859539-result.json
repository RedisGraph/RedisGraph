{"status": "broken", "name": "In-query call to procedure that takes arguments fails when trying to pass them implicitly", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "skip"}, {"name": "feature", "value": "ProcedureCallAcceptance"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython2"}], "stop": 1578486118129, "historyId": "cbeebd8baf2439179263895363854204", "start": 1578486117912, "steps": [{"status": "passed", "start": 1578486117914, "stop": 1578486118126, "name": "Given an empty graph"}, {"status": "broken", "attachments": [{"source": "8a81302d-e1fa-4cea-a60b-bcdd1f01b216-attachment.csv", "type": "text/csv", "name": ".table"}], "stop": 1578486118127, "start": 1578486118126, "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "name": "And there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)"}, {"status": "skipped", "start": 1578486118128, "stop": 1578486118129, "name": "When executing query", "attachments": [{"source": "fbd0ccae-851f-4bd8-a6d9-c79e262d190e-attachment.txt", "type": "text/plain", "name": ".text"}]}, {"status": "broken", "start": 1578486118129, "stop": 1578486118129, "name": "Then a SyntaxError should be raised at compile time: InvalidArgumentPassingMode", "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'a SyntaxError should be raised at compile time: InvalidArgumentPassingMode')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then a SyntaxError should be raised at compile time: InvalidArgumentPassingMode')\n\n"}}], "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given there exists a procedure test.my.proc(in :: INTEGER?) :: (out :: INTEGER?)')\n\n"}, "uuid": "eccb3e5f-e64f-4b0a-badc-995938910397"}